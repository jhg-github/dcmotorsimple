
dcmotorsimple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a0  080049a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080049a0  080049a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049a0  080049a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a0  080049a0  000149a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  080049b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080049b4  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dff3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000221b  00000000  00000000  0002e02f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00030250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  00030fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f783  00000000  00000000  00031c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d27c  00000000  00000000  0005139b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000be6d0  00000000  00000000  0005e617  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011cce7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003748  00000000  00000000  0011cd64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004950 	.word	0x08004950

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004950 	.word	0x08004950

080001d4 <com_Test_SendBuffer>:

#include "com.h"
#include "usart.h"


void com_Test_SendBuffer( uint8_t * const buffer, const uint16_t size_bytes ){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08e      	sub	sp, #56	; 0x38
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	807b      	strh	r3, [r7, #2]
	uint16_t *u16buffer = (uint16_t *)buffer;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	637b      	str	r3, [r7, #52]	; 0x34

//		for(i=0;i<10;i++){
//			array[i]=i*0.1F;
//		}

	HAL_UART_Transmit(&huart2, buffer, size_bytes, 5000);
 80001e4:	887a      	ldrh	r2, [r7, #2]
 80001e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80001ea:	6879      	ldr	r1, [r7, #4]
 80001ec:	4801      	ldr	r0, [pc, #4]	; (80001f4 <com_Test_SendBuffer+0x20>)
 80001ee:	f003 fbdd 	bl	80039ac <HAL_UART_Transmit>

	while(1){
 80001f2:	e7fe      	b.n	80001f2 <com_Test_SendBuffer+0x1e>
 80001f4:	200000b8 	.word	0x200000b8

080001f8 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001fe:	463b      	mov	r3, r7
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
 800020c:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 800020e:	4b27      	ldr	r3, [pc, #156]	; (80002ac <MX_ADC2_Init+0xb4>)
 8000210:	4a27      	ldr	r2, [pc, #156]	; (80002b0 <MX_ADC2_Init+0xb8>)
 8000212:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000214:	4b25      	ldr	r3, [pc, #148]	; (80002ac <MX_ADC2_Init+0xb4>)
 8000216:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800021a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800021c:	4b23      	ldr	r3, [pc, #140]	; (80002ac <MX_ADC2_Init+0xb4>)
 800021e:	2200      	movs	r2, #0
 8000220:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000222:	4b22      	ldr	r3, [pc, #136]	; (80002ac <MX_ADC2_Init+0xb4>)
 8000224:	2200      	movs	r2, #0
 8000226:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000228:	4b20      	ldr	r3, [pc, #128]	; (80002ac <MX_ADC2_Init+0xb4>)
 800022a:	2200      	movs	r2, #0
 800022c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800022e:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <MX_ADC2_Init+0xb4>)
 8000230:	2200      	movs	r2, #0
 8000232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000236:	4b1d      	ldr	r3, [pc, #116]	; (80002ac <MX_ADC2_Init+0xb4>)
 8000238:	2200      	movs	r2, #0
 800023a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800023c:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <MX_ADC2_Init+0xb4>)
 800023e:	2201      	movs	r2, #1
 8000240:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <MX_ADC2_Init+0xb4>)
 8000244:	2200      	movs	r2, #0
 8000246:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <MX_ADC2_Init+0xb4>)
 800024a:	2201      	movs	r2, #1
 800024c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <MX_ADC2_Init+0xb4>)
 8000250:	2200      	movs	r2, #0
 8000252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <MX_ADC2_Init+0xb4>)
 8000258:	2204      	movs	r2, #4
 800025a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <MX_ADC2_Init+0xb4>)
 800025e:	2200      	movs	r2, #0
 8000260:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000262:	4b12      	ldr	r3, [pc, #72]	; (80002ac <MX_ADC2_Init+0xb4>)
 8000264:	2200      	movs	r2, #0
 8000266:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000268:	4810      	ldr	r0, [pc, #64]	; (80002ac <MX_ADC2_Init+0xb4>)
 800026a:	f000 fc81 	bl	8000b70 <HAL_ADC_Init>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000274:	f000 faa2 	bl	80007bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000278:	2301      	movs	r3, #1
 800027a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027c:	2301      	movs	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000290:	463b      	mov	r3, r7
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_ADC2_Init+0xb4>)
 8000296:	f001 f8ed 	bl	8001474 <HAL_ADC_ConfigChannel>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80002a0:	f000 fa8c 	bl	80007bc <Error_Handler>
  }

}
 80002a4:	bf00      	nop
 80002a6:	3718      	adds	r7, #24
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000028 	.word	0x20000028
 80002b0:	50000100 	.word	0x50000100

080002b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08a      	sub	sp, #40	; 0x28
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a15      	ldr	r2, [pc, #84]	; (8000328 <HAL_ADC_MspInit+0x74>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d124      	bne.n	8000320 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002d6:	4b15      	ldr	r3, [pc, #84]	; (800032c <HAL_ADC_MspInit+0x78>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a14      	ldr	r2, [pc, #80]	; (800032c <HAL_ADC_MspInit+0x78>)
 80002dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <HAL_ADC_MspInit+0x78>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ea:	613b      	str	r3, [r7, #16]
 80002ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <HAL_ADC_MspInit+0x78>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <HAL_ADC_MspInit+0x78>)
 80002f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <HAL_ADC_MspInit+0x78>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000306:	2310      	movs	r3, #16
 8000308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800030a:	2303      	movs	r3, #3
 800030c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	4619      	mov	r1, r3
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f001 fd3a 	bl	8001d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000320:	bf00      	nop
 8000322:	3728      	adds	r7, #40	; 0x28
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	50000100 	.word	0x50000100
 800032c:	40021000 	.word	0x40021000

08000330 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <LL_SYSCFG_SetEXTISource+0x58>)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	3302      	adds	r3, #2
 8000342:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	0c1b      	lsrs	r3, r3, #16
 800034a:	43db      	mvns	r3, r3
 800034c:	ea02 0103 	and.w	r1, r2, r3
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	0c1b      	lsrs	r3, r3, #16
 8000354:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	fa93 f3a3 	rbit	r3, r3
 800035c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	fab3 f383 	clz	r3, r3
 8000364:	b2db      	uxtb	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	fa03 f202 	lsl.w	r2, r3, r2
 800036e:	4806      	ldr	r0, [pc, #24]	; (8000388 <LL_SYSCFG_SetEXTISource+0x58>)
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	430a      	orrs	r2, r1
 8000376:	3302      	adds	r3, #2
 8000378:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40010000 	.word	0x40010000

0800038c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800038c:	b480      	push	{r7}
 800038e:	b089      	sub	sp, #36	; 0x24
 8000390:	af00      	add	r7, sp, #0
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	60b9      	str	r1, [r7, #8]
 8000396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	fa93 f3a3 	rbit	r3, r3
 80003a6:	613b      	str	r3, [r7, #16]
  return result;
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	fab3 f383 	clz	r3, r3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	2103      	movs	r1, #3
 80003b4:	fa01 f303 	lsl.w	r3, r1, r3
 80003b8:	43db      	mvns	r3, r3
 80003ba:	401a      	ands	r2, r3
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	fa93 f3a3 	rbit	r3, r3
 80003c6:	61bb      	str	r3, [r7, #24]
  return result;
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	fab3 f383 	clz	r3, r3
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	6879      	ldr	r1, [r7, #4]
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	431a      	orrs	r2, r3
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	601a      	str	r2, [r3, #0]
}
 80003de:	bf00      	nop
 80003e0:	3724      	adds	r7, #36	; 0x24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b089      	sub	sp, #36	; 0x24
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	60f8      	str	r0, [r7, #12]
 80003f2:	60b9      	str	r1, [r7, #8]
 80003f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	68da      	ldr	r2, [r3, #12]
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	fa93 f3a3 	rbit	r3, r3
 8000404:	613b      	str	r3, [r7, #16]
  return result;
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	fab3 f383 	clz	r3, r3
 800040c:	b2db      	uxtb	r3, r3
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	2103      	movs	r1, #3
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	43db      	mvns	r3, r3
 8000418:	401a      	ands	r2, r3
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	fa93 f3a3 	rbit	r3, r3
 8000424:	61bb      	str	r3, [r7, #24]
  return result;
 8000426:	69bb      	ldr	r3, [r7, #24]
 8000428:	fab3 f383 	clz	r3, r3
 800042c:	b2db      	uxtb	r3, r3
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	fa01 f303 	lsl.w	r3, r1, r3
 8000436:	431a      	orrs	r2, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	60da      	str	r2, [r3, #12]
}
 800043c:	bf00      	nop
 800043e:	3724      	adds	r7, #36	; 0x24
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	4907      	ldr	r1, [pc, #28]	; (8000490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4013      	ands	r3, r2
 8000480:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000482:	68fb      	ldr	r3, [r7, #12]
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000

08000494 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08a      	sub	sp, #40	; 0x28
 8000498:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800049a:	f107 031c 	add.w	r3, r7, #28
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
 80004b4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80004b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80004ba:	f7ff ffd3 	bl	8000464 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80004be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80004c2:	f7ff ffcf 	bl	8000464 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004ca:	f7ff ffcb 	bl	8000464 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80004ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80004d2:	f7ff ffc7 	bl	8000464 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(EN_B_GPIO_Port, EN_B_Pin);
 80004d6:	2102      	movs	r1, #2
 80004d8:	4826      	ldr	r0, [pc, #152]	; (8000574 <MX_GPIO_Init+0xe0>)
 80004da:	f7ff ffb5 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, IN1_B_Pin|IN2_B_Pin|LD2_Pin);
 80004de:	2123      	movs	r1, #35	; 0x23
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f7ff ffb0 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80004e8:	4923      	ldr	r1, [pc, #140]	; (8000578 <MX_GPIO_Init+0xe4>)
 80004ea:	2002      	movs	r0, #2
 80004ec:	f7ff ff20 	bl	8000330 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	481f      	ldr	r0, [pc, #124]	; (8000574 <MX_GPIO_Init+0xe0>)
 80004f8:	f7ff ff77 	bl	80003ea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	481c      	ldr	r0, [pc, #112]	; (8000574 <MX_GPIO_Init+0xe0>)
 8000504:	f7ff ff42 	bl	800038c <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800050c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800050e:	2300      	movs	r3, #0
 8000510:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000512:	2301      	movs	r3, #1
 8000514:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000518:	2300      	movs	r3, #0
 800051a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800051e:	2302      	movs	r3, #2
 8000520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000524:	f107 031c 	add.w	r3, r7, #28
 8000528:	4618      	mov	r0, r3
 800052a:	f003 ff7f 	bl	800442c <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = EN_B_Pin;
 800052e:	2302      	movs	r3, #2
 8000530:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000532:	2301      	movs	r3, #1
 8000534:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EN_B_GPIO_Port, &GPIO_InitStruct);
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	4619      	mov	r1, r3
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <MX_GPIO_Init+0xe0>)
 8000548:	f004 f95d 	bl	8004806 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IN1_B_Pin|IN2_B_Pin|LD2_Pin;
 800054c:	2323      	movs	r3, #35	; 0x23
 800054e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000550:	2301      	movs	r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4619      	mov	r1, r3
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f004 f94d 	bl	8004806 <LL_GPIO_Init>

}
 800056c:	bf00      	nop
 800056e:	3728      	adds	r7, #40	; 0x28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	48000800 	.word	0x48000800
 8000578:	00f00003 	.word	0x00f00003

0800057c <LL_GPIO_SetOutputPin>:
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	619a      	str	r2, [r3, #24]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <LL_GPIO_ResetOutputPin>:
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <test_mANoise>:
//	}
//}


#define N (10000)
void test_mANoise(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	f5ad 4d1c 	sub.w	sp, sp, #39936	; 0x9c00
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
	uint16_t adcValue = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80005c4:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 80005c8:	8013      	strh	r3, [r2, #0]
	float adcValue_mV = 0;
 80005ca:	f04f 0300 	mov.w	r3, #0
 80005ce:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80005d2:	f102 0244 	add.w	r2, r2, #68	; 0x44
 80005d6:	6013      	str	r3, [r2, #0]
	float adcValue_mA[N];
	unsigned int index = N;
 80005d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80005dc:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80005e0:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80005e4:	6013      	str	r3, [r2, #0]

	LL_GPIO_SetOutputPin(IN1_B_GPIO_Port, IN1_B_Pin);
 80005e6:	2101      	movs	r1, #1
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f7ff ffc6 	bl	800057c <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(IN2_B_GPIO_Port, IN2_B_Pin);
 80005f0:	2102      	movs	r1, #2
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f6:	f7ff ffcf 	bl	8000598 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(EN_B_GPIO_Port, EN_B_Pin);
 80005fa:	2102      	movs	r1, #2
 80005fc:	4830      	ldr	r0, [pc, #192]	; (80006c0 <test_mANoise+0x10c>)
 80005fe:	f7ff ffbd 	bl	800057c <LL_GPIO_SetOutputPin>
	HAL_Delay(1000);
 8000602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000606:	f000 fa91 	bl	8000b2c <HAL_Delay>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800060a:	2100      	movs	r1, #0
 800060c:	482d      	ldr	r0, [pc, #180]	; (80006c4 <test_mANoise+0x110>)
 800060e:	f000 fec6 	bl	800139e <HAL_ADCEx_Calibration_Start>
	while(index--){
 8000612:	e03f      	b.n	8000694 <test_mANoise+0xe0>
		HAL_Delay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fa89 	bl	8000b2c <HAL_Delay>
		HAL_ADC_Start(&hadc2);
 800061a:	482a      	ldr	r0, [pc, #168]	; (80006c4 <test_mANoise+0x110>)
 800061c:	f000 fca2 	bl	8000f64 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 10);
 8000620:	210a      	movs	r1, #10
 8000622:	4828      	ldr	r0, [pc, #160]	; (80006c4 <test_mANoise+0x110>)
 8000624:	f000 fdb4 	bl	8001190 <HAL_ADC_PollForConversion>
		adcValue = HAL_ADC_GetValue(&hadc2);
 8000628:	4826      	ldr	r0, [pc, #152]	; (80006c4 <test_mANoise+0x110>)
 800062a:	f000 feab 	bl	8001384 <HAL_ADC_GetValue>
 800062e:	4603      	mov	r3, r0
 8000630:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 8000634:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 8000638:	8013      	strh	r3, [r2, #0]
		adcValue_mV = adcValue * 0.805664F;
 800063a:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 800063e:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	ee07 3a90 	vmov	s15, r3
 8000648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800064c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80006c8 <test_mANoise+0x114>
 8000650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000654:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8000658:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800065c:	edc3 7a00 	vstr	s15, [r3]
		adcValue_mA[index] = (adcValue_mV-40) / (31*0.05F);
 8000660:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8000664:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8000668:	edd3 7a00 	vldr	s15, [r3]
 800066c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80006cc <test_mANoise+0x118>
 8000670:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000674:	eddf 6a16 	vldr	s13, [pc, #88]	; 80006d0 <test_mANoise+0x11c>
 8000678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800067c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000680:	3b4c      	subs	r3, #76	; 0x4c
 8000682:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 8000686:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800068a:	6812      	ldr	r2, [r2, #0]
 800068c:	0092      	lsls	r2, r2, #2
 800068e:	4413      	add	r3, r2
 8000690:	edc3 7a00 	vstr	s15, [r3]
	while(index--){
 8000694:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8000698:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	f507 411c 	add.w	r1, r7, #39936	; 0x9c00
 80006a4:	f101 014c 	add.w	r1, r1, #76	; 0x4c
 80006a8:	600a      	str	r2, [r1, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1b2      	bne.n	8000614 <test_mANoise+0x60>
	}
	com_Test_SendBuffer( (uint8_t *)&adcValue_mA[0] , 4*N);
 80006ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006b2:	3b4c      	subs	r3, #76	; 0x4c
 80006b4:	f649 4140 	movw	r1, #40000	; 0x9c40
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fd8b 	bl	80001d4 <com_Test_SendBuffer>
	while(1);
 80006be:	e7fe      	b.n	80006be <test_mANoise+0x10a>
 80006c0:	48000800 	.word	0x48000800
 80006c4:	20000028 	.word	0x20000028
 80006c8:	3f4e3fff 	.word	0x3f4e3fff
 80006cc:	42200000 	.word	0x42200000
 80006d0:	3fc66667 	.word	0x3fc66667

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 f9c2 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f80c 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f7ff fed8 	bl	8000494 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 f920 	bl	8000928 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80006e8:	f000 f8d8 	bl	800089c <MX_TIM16_Init>
  MX_ADC2_Init();
 80006ec:	f7ff fd84 	bl	80001f8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  //test_ContinuousSingleDirection();
  //test_ContinuousSingleDirectionADC();
  test_mANoise();
 80006f0:	f7ff ff60 	bl	80005b4 <test_mANoise>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while(1){
 80006f4:	e7fe      	b.n	80006f4 <main+0x20>
	...

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0a6      	sub	sp, #152	; 0x98
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000702:	2228      	movs	r2, #40	; 0x28
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f004 f91a 	bl	8004940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2258      	movs	r2, #88	; 0x58
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 f90c 	bl	8004940 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000744:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000748:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fca6 	bl	80020a8 <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000762:	f000 f82b 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000776:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000780:	2102      	movs	r1, #2
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fba6 	bl	8002ed4 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800078e:	f000 f815 	bl	80007bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <SystemClock_Config+0xc0>)
 8000794:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800079a:	2300      	movs	r3, #0
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fdcd 	bl	8003340 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007ac:	f000 f806 	bl	80007bc <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3798      	adds	r7, #152	; 0x98
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	00800002 	.word	0x00800002

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_MspInit+0x44>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <HAL_MspInit+0x44>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_MspInit+0x44>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x44>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x44>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x44>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f940 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <SystemInit+0x28>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <SystemInit+0x28>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SystemInit+0x28>)
 8000886:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800088a:	609a      	str	r2, [r3, #8]
#endif
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_TIM16_Init+0x44>)
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <MX_TIM16_Init+0x48>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_TIM16_Init+0x44>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_TIM16_Init+0x44>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3599;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_TIM16_Init+0x44>)
 80008b4:	f640 620f 	movw	r2, #3599	; 0xe0f
 80008b8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_TIM16_Init+0x44>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_TIM16_Init+0x44>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_TIM16_Init+0x44>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_TIM16_Init+0x44>)
 80008ce:	f002 ff55 	bl	800377c <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80008d8:	f7ff ff70 	bl	80007bc <Error_Handler>
  }

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000078 	.word	0x20000078
 80008e4:	40014400 	.word	0x40014400

080008e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_TIM_Base_MspInit+0x38>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d10b      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a09      	ldr	r2, [pc, #36]	; (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40014400 	.word	0x40014400
 8000924:	40021000 	.word	0x40021000

08000928 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_USART2_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800096c:	f002 ffd0 	bl	8003910 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f7ff ff21 	bl	80007bc <Error_Handler>
  }

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000b8 	.word	0x200000b8
 8000984:	40004400 	.word	0x40004400

08000988 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x7c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d128      	bne.n	80009fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0x80>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <HAL_UART_MspInit+0x80>)
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_UART_MspInit+0x80>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_UART_MspInit+0x80>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <HAL_UART_MspInit+0x80>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_UART_MspInit+0x80>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009da:	230c      	movs	r3, #12
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ea:	2307      	movs	r3, #7
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f001 f9cc 	bl	8001d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40021000 	.word	0x40021000

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a12:	e003      	b.n	8000a1c <LoopCopyDataInit>

08000a14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a1a:	3104      	adds	r1, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a24:	d3f6      	bcc.n	8000a14 <CopyDataInit>
	ldr	r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a28:	e002      	b.n	8000a30 <LoopFillZerobss>

08000a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <LoopForever+0x16>)
	cmp	r2, r3
 8000a32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a36:	f7ff ff1b 	bl	8000870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f003 ff5d 	bl	80048f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fe49 	bl	80006d4 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a44:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000a48:	080049a8 	.word	0x080049a8
	ldr	r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a50:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a54:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a58:	2000013c 	.word	0x2000013c

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_Init+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_Init+0x28>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f001 f95b 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f808 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7c:	f7ff fea6 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x54>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x58>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 f965 	bl	8001d7a <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00e      	b.n	8000ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d80a      	bhi.n	8000ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac8:	f001 f93b 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_InitTick+0x5c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x20>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_IncTick+0x24>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000138 	.word	0x20000138

08000b14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_GetTick+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000138 	.word	0x20000138

08000b2c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b34:	f7ff ffee 	bl	8000b14 <HAL_GetTick>
 8000b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b44:	d005      	beq.n	8000b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_Delay+0x40>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b52:	bf00      	nop
 8000b54:	f7ff ffde 	bl	8000b14 <HAL_GetTick>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d8f7      	bhi.n	8000b54 <HAL_Delay+0x28>
  {
  }
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000008 	.word	0x20000008

08000b70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b09a      	sub	sp, #104	; 0x68
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d101      	bne.n	8000b90 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e1e3      	b.n	8000f58 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d176      	bne.n	8000c90 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d152      	bne.n	8000c50 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fb75 	bl	80002b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d13b      	bne.n	8000c50 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 ff95 	bl	8001b08 <ADC_Disable>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d12f      	bne.n	8000c50 <HAL_ADC_Init+0xe0>
 8000bf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d12b      	bne.n	8000c50 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c00:	f023 0302 	bic.w	r3, r3, #2
 8000c04:	f043 0202 	orr.w	r2, r3, #2
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c1a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c2c:	4b92      	ldr	r3, [pc, #584]	; (8000e78 <HAL_ADC_Init+0x308>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a92      	ldr	r2, [pc, #584]	; (8000e7c <HAL_ADC_Init+0x30c>)
 8000c32:	fba2 2303 	umull	r2, r3, r2, r3
 8000c36:	0c9a      	lsrs	r2, r3, #18
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c42:	e002      	b.n	8000c4a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f9      	bne.n	8000c44 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d007      	beq.n	8000c6e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c6c:	d110      	bne.n	8000c90 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f023 0312 	bic.w	r3, r3, #18
 8000c76:	f043 0210 	orr.w	r2, r3, #16
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f043 0201 	orr.w	r2, r3, #1
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 0310 	and.w	r3, r3, #16
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f040 8150 	bne.w	8000f3e <HAL_ADC_Init+0x3ce>
 8000c9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 814b 	bne.w	8000f3e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8143 	bne.w	8000f3e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cc0:	f043 0202 	orr.w	r2, r3, #2
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cd0:	d004      	beq.n	8000cdc <HAL_ADC_Init+0x16c>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a6a      	ldr	r2, [pc, #424]	; (8000e80 <HAL_ADC_Init+0x310>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d101      	bne.n	8000ce0 <HAL_ADC_Init+0x170>
 8000cdc:	4b69      	ldr	r3, [pc, #420]	; (8000e84 <HAL_ADC_Init+0x314>)
 8000cde:	e000      	b.n	8000ce2 <HAL_ADC_Init+0x172>
 8000ce0:	4b69      	ldr	r3, [pc, #420]	; (8000e88 <HAL_ADC_Init+0x318>)
 8000ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cec:	d102      	bne.n	8000cf4 <HAL_ADC_Init+0x184>
 8000cee:	4b64      	ldr	r3, [pc, #400]	; (8000e80 <HAL_ADC_Init+0x310>)
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e01a      	b.n	8000d2a <HAL_ADC_Init+0x1ba>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a61      	ldr	r2, [pc, #388]	; (8000e80 <HAL_ADC_Init+0x310>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d103      	bne.n	8000d06 <HAL_ADC_Init+0x196>
 8000cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e011      	b.n	8000d2a <HAL_ADC_Init+0x1ba>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a60      	ldr	r2, [pc, #384]	; (8000e8c <HAL_ADC_Init+0x31c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d102      	bne.n	8000d16 <HAL_ADC_Init+0x1a6>
 8000d10:	4b5f      	ldr	r3, [pc, #380]	; (8000e90 <HAL_ADC_Init+0x320>)
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e009      	b.n	8000d2a <HAL_ADC_Init+0x1ba>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a5d      	ldr	r2, [pc, #372]	; (8000e90 <HAL_ADC_Init+0x320>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d102      	bne.n	8000d26 <HAL_ADC_Init+0x1b6>
 8000d20:	4b5a      	ldr	r3, [pc, #360]	; (8000e8c <HAL_ADC_Init+0x31c>)
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	e001      	b.n	8000d2a <HAL_ADC_Init+0x1ba>
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d108      	bne.n	8000d4a <HAL_ADC_Init+0x1da>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d101      	bne.n	8000d4a <HAL_ADC_Init+0x1da>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_ADC_Init+0x1dc>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d11c      	bne.n	8000d8a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d50:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d010      	beq.n	8000d78 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d107      	bne.n	8000d72 <HAL_ADC_Init+0x202>
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d101      	bne.n	8000d72 <HAL_ADC_Init+0x202>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <HAL_ADC_Init+0x204>
 8000d72:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d108      	bne.n	8000d8a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d88:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7e5b      	ldrb	r3, [r3, #25]
 8000d8e:	035b      	lsls	r3, r3, #13
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d94:	2a01      	cmp	r2, #1
 8000d96:	d002      	beq.n	8000d9e <HAL_ADC_Init+0x22e>
 8000d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d9c:	e000      	b.n	8000da0 <HAL_ADC_Init+0x230>
 8000d9e:	2200      	movs	r2, #0
 8000da0:	431a      	orrs	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000db0:	4313      	orrs	r3, r2
 8000db2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d11b      	bne.n	8000df6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7e5b      	ldrb	r3, [r3, #25]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d109      	bne.n	8000dda <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	045a      	lsls	r2, r3, #17
 8000dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8000dd8:	e00d      	b.n	8000df6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000de2:	f043 0220 	orr.w	r2, r3, #32
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f043 0201 	orr.w	r2, r3, #1
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d054      	beq.n	8000ea8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <HAL_ADC_Init+0x31c>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d004      	beq.n	8000e12 <HAL_ADC_Init+0x2a2>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <HAL_ADC_Init+0x320>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d140      	bne.n	8000e94 <HAL_ADC_Init+0x324>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000e1a:	d02a      	beq.n	8000e72 <HAL_ADC_Init+0x302>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e24:	d022      	beq.n	8000e6c <HAL_ADC_Init+0x2fc>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000e2e:	d01a      	beq.n	8000e66 <HAL_ADC_Init+0x2f6>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e34:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000e38:	d012      	beq.n	8000e60 <HAL_ADC_Init+0x2f0>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000e42:	d00a      	beq.n	8000e5a <HAL_ADC_Init+0x2ea>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000e4c:	d002      	beq.n	8000e54 <HAL_ADC_Init+0x2e4>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	e023      	b.n	8000e9c <HAL_ADC_Init+0x32c>
 8000e54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e58:	e020      	b.n	8000e9c <HAL_ADC_Init+0x32c>
 8000e5a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e5e:	e01d      	b.n	8000e9c <HAL_ADC_Init+0x32c>
 8000e60:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e64:	e01a      	b.n	8000e9c <HAL_ADC_Init+0x32c>
 8000e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6a:	e017      	b.n	8000e9c <HAL_ADC_Init+0x32c>
 8000e6c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000e70:	e014      	b.n	8000e9c <HAL_ADC_Init+0x32c>
 8000e72:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e76:	e011      	b.n	8000e9c <HAL_ADC_Init+0x32c>
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	431bde83 	.word	0x431bde83
 8000e80:	50000100 	.word	0x50000100
 8000e84:	50000300 	.word	0x50000300
 8000e88:	50000700 	.word	0x50000700
 8000e8c:	50000400 	.word	0x50000400
 8000e90:	50000500 	.word	0x50000500
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d114      	bne.n	8000ee0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ec4:	f023 0302 	bic.w	r3, r3, #2
 8000ec8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7e1b      	ldrb	r3, [r3, #24]
 8000ece:	039a      	lsls	r2, r3, #14
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000edc:	4313      	orrs	r3, r2
 8000ede:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <HAL_ADC_Init+0x3f0>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000ef0:	430b      	orrs	r3, r1
 8000ef2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d10c      	bne.n	8000f16 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f023 010f 	bic.w	r1, r3, #15
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
 8000f14:	e007      	b.n	8000f26 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 020f 	bic.w	r2, r2, #15
 8000f24:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f023 0303 	bic.w	r3, r3, #3
 8000f34:	f043 0201 	orr.w	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f3c:	e00a      	b.n	8000f54 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f023 0312 	bic.w	r3, r3, #18
 8000f46:	f043 0210 	orr.w	r2, r3, #16
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f4e:	2301      	movs	r3, #1
 8000f50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3768      	adds	r7, #104	; 0x68
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	fff0c007 	.word	0xfff0c007

08000f64 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f040 80f9 	bne.w	8001172 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d101      	bne.n	8000f8e <HAL_ADC_Start+0x2a>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e0f4      	b.n	8001178 <HAL_ADC_Start+0x214>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 fd58 	bl	8001a4c <ADC_Enable>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 80e0 	bne.w	8001168 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fc4:	d004      	beq.n	8000fd0 <HAL_ADC_Start+0x6c>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a6d      	ldr	r2, [pc, #436]	; (8001180 <HAL_ADC_Start+0x21c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d106      	bne.n	8000fde <HAL_ADC_Start+0x7a>
 8000fd0:	4b6c      	ldr	r3, [pc, #432]	; (8001184 <HAL_ADC_Start+0x220>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d010      	beq.n	8000ffe <HAL_ADC_Start+0x9a>
 8000fdc:	e005      	b.n	8000fea <HAL_ADC_Start+0x86>
 8000fde:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <HAL_ADC_Start+0x224>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 031f 	and.w	r3, r3, #31
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d009      	beq.n	8000ffe <HAL_ADC_Start+0x9a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ff2:	d004      	beq.n	8000ffe <HAL_ADC_Start+0x9a>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a64      	ldr	r2, [pc, #400]	; (800118c <HAL_ADC_Start+0x228>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d115      	bne.n	800102a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d036      	beq.n	8001086 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001020:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001028:	e02d      	b.n	8001086 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800103e:	d004      	beq.n	800104a <HAL_ADC_Start+0xe6>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a4e      	ldr	r2, [pc, #312]	; (8001180 <HAL_ADC_Start+0x21c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10a      	bne.n	8001060 <HAL_ADC_Start+0xfc>
 800104a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	e008      	b.n	8001072 <HAL_ADC_Start+0x10e>
 8001060:	4b4a      	ldr	r3, [pc, #296]	; (800118c <HAL_ADC_Start+0x228>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800107e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001092:	d106      	bne.n	80010a2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001098:	f023 0206 	bic.w	r2, r3, #6
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	645a      	str	r2, [r3, #68]	; 0x44
 80010a0:	e002      	b.n	80010a8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	221c      	movs	r2, #28
 80010b6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010c0:	d004      	beq.n	80010cc <HAL_ADC_Start+0x168>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a2e      	ldr	r2, [pc, #184]	; (8001180 <HAL_ADC_Start+0x21c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d106      	bne.n	80010da <HAL_ADC_Start+0x176>
 80010cc:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_ADC_Start+0x220>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d03e      	beq.n	8001156 <HAL_ADC_Start+0x1f2>
 80010d8:	e005      	b.n	80010e6 <HAL_ADC_Start+0x182>
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_ADC_Start+0x224>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d037      	beq.n	8001156 <HAL_ADC_Start+0x1f2>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ee:	d004      	beq.n	80010fa <HAL_ADC_Start+0x196>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a22      	ldr	r2, [pc, #136]	; (8001180 <HAL_ADC_Start+0x21c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d106      	bne.n	8001108 <HAL_ADC_Start+0x1a4>
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_ADC_Start+0x220>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	2b05      	cmp	r3, #5
 8001104:	d027      	beq.n	8001156 <HAL_ADC_Start+0x1f2>
 8001106:	e005      	b.n	8001114 <HAL_ADC_Start+0x1b0>
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <HAL_ADC_Start+0x224>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	2b05      	cmp	r3, #5
 8001112:	d020      	beq.n	8001156 <HAL_ADC_Start+0x1f2>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800111c:	d004      	beq.n	8001128 <HAL_ADC_Start+0x1c4>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_ADC_Start+0x21c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d106      	bne.n	8001136 <HAL_ADC_Start+0x1d2>
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_ADC_Start+0x220>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	2b09      	cmp	r3, #9
 8001132:	d010      	beq.n	8001156 <HAL_ADC_Start+0x1f2>
 8001134:	e005      	b.n	8001142 <HAL_ADC_Start+0x1de>
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_ADC_Start+0x224>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	2b09      	cmp	r3, #9
 8001140:	d009      	beq.n	8001156 <HAL_ADC_Start+0x1f2>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800114a:	d004      	beq.n	8001156 <HAL_ADC_Start+0x1f2>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_ADC_Start+0x228>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d10f      	bne.n	8001176 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0204 	orr.w	r2, r2, #4
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	e006      	b.n	8001176 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001170:	e001      	b.n	8001176 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001172:	2302      	movs	r3, #2
 8001174:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	50000100 	.word	0x50000100
 8001184:	50000300 	.word	0x50000300
 8001188:	50000700 	.word	0x50000700
 800118c:	50000400 	.word	0x50000400

08001190 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d102      	bne.n	80011ac <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80011a6:	2308      	movs	r3, #8
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e03a      	b.n	8001222 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011b4:	d004      	beq.n	80011c0 <HAL_ADC_PollForConversion+0x30>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a6e      	ldr	r2, [pc, #440]	; (8001374 <HAL_ADC_PollForConversion+0x1e4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d101      	bne.n	80011c4 <HAL_ADC_PollForConversion+0x34>
 80011c0:	4b6d      	ldr	r3, [pc, #436]	; (8001378 <HAL_ADC_PollForConversion+0x1e8>)
 80011c2:	e000      	b.n	80011c6 <HAL_ADC_PollForConversion+0x36>
 80011c4:	4b6d      	ldr	r3, [pc, #436]	; (800137c <HAL_ADC_PollForConversion+0x1ec>)
 80011c6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d112      	bne.n	80011fa <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d11d      	bne.n	800121e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f043 0220 	orr.w	r2, r3, #32
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e0b8      	b.n	800136c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00b      	beq.n	800121e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f043 0220 	orr.w	r2, r3, #32
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e0a6      	b.n	800136c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800121e:	230c      	movs	r3, #12
 8001220:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800122a:	d004      	beq.n	8001236 <HAL_ADC_PollForConversion+0xa6>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a50      	ldr	r2, [pc, #320]	; (8001374 <HAL_ADC_PollForConversion+0x1e4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d106      	bne.n	8001244 <HAL_ADC_PollForConversion+0xb4>
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_ADC_PollForConversion+0x1e8>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	2b00      	cmp	r3, #0
 8001240:	d010      	beq.n	8001264 <HAL_ADC_PollForConversion+0xd4>
 8001242:	e005      	b.n	8001250 <HAL_ADC_PollForConversion+0xc0>
 8001244:	4b4d      	ldr	r3, [pc, #308]	; (800137c <HAL_ADC_PollForConversion+0x1ec>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2b00      	cmp	r3, #0
 800124e:	d009      	beq.n	8001264 <HAL_ADC_PollForConversion+0xd4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001258:	d004      	beq.n	8001264 <HAL_ADC_PollForConversion+0xd4>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a48      	ldr	r2, [pc, #288]	; (8001380 <HAL_ADC_PollForConversion+0x1f0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d104      	bne.n	800126e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	e00f      	b.n	800128e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001276:	d004      	beq.n	8001282 <HAL_ADC_PollForConversion+0xf2>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a3d      	ldr	r2, [pc, #244]	; (8001374 <HAL_ADC_PollForConversion+0x1e4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d102      	bne.n	8001288 <HAL_ADC_PollForConversion+0xf8>
 8001282:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001286:	e000      	b.n	800128a <HAL_ADC_PollForConversion+0xfa>
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HAL_ADC_PollForConversion+0x1f0>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800128e:	f7ff fc41 	bl	8000b14 <HAL_GetTick>
 8001292:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001294:	e01a      	b.n	80012cc <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800129c:	d016      	beq.n	80012cc <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_ADC_PollForConversion+0x124>
 80012a4:	f7ff fc36 	bl	8000b14 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d20b      	bcs.n	80012cc <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f043 0204 	orr.w	r2, r3, #4
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e04f      	b.n	800136c <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0dd      	beq.n	8001296 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d131      	bne.n	8001358 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d12c      	bne.n	8001358 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b08      	cmp	r3, #8
 800130a:	d125      	bne.n	8001358 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d112      	bne.n	8001340 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d112      	bne.n	8001358 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
 800133e:	e00b      	b.n	8001358 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f043 0220 	orr.w	r2, r3, #32
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	f043 0201 	orr.w	r2, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d103      	bne.n	800136a <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	50000100 	.word	0x50000100
 8001378:	50000300 	.word	0x50000300
 800137c:	50000700 	.word	0x50000700
 8001380:	50000400 	.word	0x50000400

08001384 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d101      	bne.n	80013ba <HAL_ADCEx_Calibration_Start+0x1c>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e057      	b.n	800146a <HAL_ADCEx_Calibration_Start+0xcc>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fba0 	bl	8001b08 <ADC_Disable>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d146      	bne.n	8001460 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80013e6:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d107      	bne.n	80013fe <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013fc:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800140c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800140e:	f7ff fb81 	bl	8000b14 <HAL_GetTick>
 8001412:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001414:	e014      	b.n	8001440 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001416:	f7ff fb7d 	bl	8000b14 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b0a      	cmp	r3, #10
 8001422:	d90d      	bls.n	8001440 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f023 0312 	bic.w	r3, r3, #18
 800142c:	f043 0210 	orr.w	r2, r3, #16
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e014      	b.n	800146a <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800144a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800144e:	d0e2      	beq.n	8001416 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f023 0303 	bic.w	r3, r3, #3
 8001458:	f043 0201 	orr.w	r2, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001468:	7bfb      	ldrb	r3, [r7, #15]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001474:	b480      	push	{r7}
 8001476:	b09b      	sub	sp, #108	; 0x6c
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x22>
 8001492:	2302      	movs	r3, #2
 8001494:	e2cb      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x5ba>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f040 82af 	bne.w	8001a0c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d81c      	bhi.n	80014f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	461a      	mov	r2, r3
 80014ca:	231f      	movs	r3, #31
 80014cc:	4093      	lsls	r3, r2
 80014ce:	43db      	mvns	r3, r3
 80014d0:	4019      	ands	r1, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa00 f203 	lsl.w	r2, r0, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	631a      	str	r2, [r3, #48]	; 0x30
 80014ee:	e063      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b09      	cmp	r3, #9
 80014f6:	d81e      	bhi.n	8001536 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	3b1e      	subs	r3, #30
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	4019      	ands	r1, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	3b1e      	subs	r3, #30
 8001528:	fa00 f203 	lsl.w	r2, r0, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	635a      	str	r2, [r3, #52]	; 0x34
 8001534:	e040      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b0e      	cmp	r3, #14
 800153c:	d81e      	bhi.n	800157c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	3b3c      	subs	r3, #60	; 0x3c
 8001552:	221f      	movs	r2, #31
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	4019      	ands	r1, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	3b3c      	subs	r3, #60	; 0x3c
 800156e:	fa00 f203 	lsl.w	r2, r0, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	639a      	str	r2, [r3, #56]	; 0x38
 800157a:	e01d      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	3b5a      	subs	r3, #90	; 0x5a
 8001590:	221f      	movs	r2, #31
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	4019      	ands	r1, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	3b5a      	subs	r3, #90	; 0x5a
 80015ac:	fa00 f203 	lsl.w	r2, r0, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 80e5 	bne.w	8001792 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d91c      	bls.n	800160a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6999      	ldr	r1, [r3, #24]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	3b1e      	subs	r3, #30
 80015e2:	2207      	movs	r2, #7
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4019      	ands	r1, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6898      	ldr	r0, [r3, #8]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	3b1e      	subs	r3, #30
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	619a      	str	r2, [r3, #24]
 8001608:	e019      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6959      	ldr	r1, [r3, #20]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	2207      	movs	r2, #7
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	4019      	ands	r1, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	6898      	ldr	r0, [r3, #8]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	3b01      	subs	r3, #1
 800165c:	2b03      	cmp	r3, #3
 800165e:	d84f      	bhi.n	8001700 <HAL_ADC_ConfigChannel+0x28c>
 8001660:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <HAL_ADC_ConfigChannel+0x1f4>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	08001679 	.word	0x08001679
 800166c:	0800169b 	.word	0x0800169b
 8001670:	080016bd 	.word	0x080016bd
 8001674:	080016df 	.word	0x080016df
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800167e:	4b9f      	ldr	r3, [pc, #636]	; (80018fc <HAL_ADC_ConfigChannel+0x488>)
 8001680:	4013      	ands	r3, r2
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	0691      	lsls	r1, r2, #26
 8001688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800168a:	430a      	orrs	r2, r1
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001696:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001698:	e07e      	b.n	8001798 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016a0:	4b96      	ldr	r3, [pc, #600]	; (80018fc <HAL_ADC_ConfigChannel+0x488>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	0691      	lsls	r1, r2, #26
 80016aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016ac:	430a      	orrs	r2, r1
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016b8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016ba:	e06d      	b.n	8001798 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016c2:	4b8e      	ldr	r3, [pc, #568]	; (80018fc <HAL_ADC_ConfigChannel+0x488>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	0691      	lsls	r1, r2, #26
 80016cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016ce:	430a      	orrs	r2, r1
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016da:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016dc:	e05c      	b.n	8001798 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016e4:	4b85      	ldr	r3, [pc, #532]	; (80018fc <HAL_ADC_ConfigChannel+0x488>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	0691      	lsls	r1, r2, #26
 80016ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016f0:	430a      	orrs	r2, r1
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016fc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016fe:	e04b      	b.n	8001798 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	069b      	lsls	r3, r3, #26
 8001710:	429a      	cmp	r2, r3
 8001712:	d107      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001722:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800172a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	069b      	lsls	r3, r3, #26
 8001734:	429a      	cmp	r2, r3
 8001736:	d107      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001746:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800174e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	069b      	lsls	r3, r3, #26
 8001758:	429a      	cmp	r2, r3
 800175a:	d107      	bne.n	800176c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800176a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001772:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	069b      	lsls	r3, r3, #26
 800177c:	429a      	cmp	r2, r3
 800177e:	d10a      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800178e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001790:	e001      	b.n	8001796 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001792:	bf00      	nop
 8001794:	e000      	b.n	8001798 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001796:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d108      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x344>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x344>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_ADC_ConfigChannel+0x346>
 80017b8:	2300      	movs	r3, #0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 8131 	bne.w	8001a22 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d00f      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	400a      	ands	r2, r1
 80017e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80017e6:	e049      	b.n	800187c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b09      	cmp	r3, #9
 8001808:	d91c      	bls.n	8001844 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6999      	ldr	r1, [r3, #24]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	3b1b      	subs	r3, #27
 800181c:	2207      	movs	r2, #7
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	4019      	ands	r1, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6898      	ldr	r0, [r3, #8]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	3b1b      	subs	r3, #27
 8001836:	fa00 f203 	lsl.w	r2, r0, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	619a      	str	r2, [r3, #24]
 8001842:	e01b      	b.n	800187c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6959      	ldr	r1, [r3, #20]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	2207      	movs	r2, #7
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	4019      	ands	r1, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6898      	ldr	r0, [r3, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	fa00 f203 	lsl.w	r2, r0, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001884:	d004      	beq.n	8001890 <HAL_ADC_ConfigChannel+0x41c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <HAL_ADC_ConfigChannel+0x48c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x420>
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_ADC_ConfigChannel+0x490>)
 8001892:	e000      	b.n	8001896 <HAL_ADC_ConfigChannel+0x422>
 8001894:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_ADC_ConfigChannel+0x494>)
 8001896:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b10      	cmp	r3, #16
 800189e:	d105      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80018a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d015      	beq.n	80018d8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80018b0:	2b11      	cmp	r3, #17
 80018b2:	d105      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80018b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00b      	beq.n	80018d8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80018c4:	2b12      	cmp	r3, #18
 80018c6:	f040 80ac 	bne.w	8001a22 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80018ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 80a5 	bne.w	8001a22 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e0:	d102      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x474>
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_ADC_ConfigChannel+0x48c>)
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e023      	b.n	8001930 <HAL_ADC_ConfigChannel+0x4bc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_ADC_ConfigChannel+0x48c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10c      	bne.n	800190c <HAL_ADC_ConfigChannel+0x498>
 80018f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	e01a      	b.n	8001930 <HAL_ADC_ConfigChannel+0x4bc>
 80018fa:	bf00      	nop
 80018fc:	83fff000 	.word	0x83fff000
 8001900:	50000100 	.word	0x50000100
 8001904:	50000300 	.word	0x50000300
 8001908:	50000700 	.word	0x50000700
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_ADC_ConfigChannel+0x5c8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d102      	bne.n	800191c <HAL_ADC_ConfigChannel+0x4a8>
 8001916:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <HAL_ADC_ConfigChannel+0x5cc>)
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e009      	b.n	8001930 <HAL_ADC_ConfigChannel+0x4bc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a47      	ldr	r2, [pc, #284]	; (8001a40 <HAL_ADC_ConfigChannel+0x5cc>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d102      	bne.n	800192c <HAL_ADC_ConfigChannel+0x4b8>
 8001926:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <HAL_ADC_ConfigChannel+0x5c8>)
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	e001      	b.n	8001930 <HAL_ADC_ConfigChannel+0x4bc>
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x4dc>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x4dc>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_ADC_ConfigChannel+0x4de>
 8001950:	2300      	movs	r3, #0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d150      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001956:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001958:	2b00      	cmp	r3, #0
 800195a:	d010      	beq.n	800197e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d107      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x504>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x504>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_ADC_ConfigChannel+0x506>
 8001978:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800197a:	2b00      	cmp	r3, #0
 800197c:	d13c      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b10      	cmp	r3, #16
 8001984:	d11d      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x54e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800198e:	d118      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800199a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_ADC_ConfigChannel+0x5d0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <HAL_ADC_ConfigChannel+0x5d4>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0c9a      	lsrs	r2, r3, #18
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019b2:	e002      	b.n	80019ba <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f9      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019c0:	e02e      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b11      	cmp	r3, #17
 80019c8:	d10b      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x56e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d2:	d106      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80019d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80019dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019de:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019e0:	e01e      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d11a      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80019ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019f6:	e013      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f043 0220 	orr.w	r2, r3, #32
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a0a:	e00a      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f043 0220 	orr.w	r2, r3, #32
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a1e:	e000      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a20:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	376c      	adds	r7, #108	; 0x6c
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	50000400 	.word	0x50000400
 8001a40:	50000500 	.word	0x50000500
 8001a44:	20000000 	.word	0x20000000
 8001a48:	431bde83 	.word	0x431bde83

08001a4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <ADC_Enable+0x2c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <ADC_Enable+0x2c>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <ADC_Enable+0x2e>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d13c      	bne.n	8001af8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <ADC_Enable+0xb8>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00d      	beq.n	8001aa8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f043 0210 	orr.w	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e028      	b.n	8001afa <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001ab8:	f7ff f82c 	bl	8000b14 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001abe:	e014      	b.n	8001aea <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ac0:	f7ff f828 	bl	8000b14 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d90d      	bls.n	8001aea <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f043 0210 	orr.w	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f043 0201 	orr.w	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e007      	b.n	8001afa <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d1e3      	bne.n	8001ac0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	8000003f 	.word	0x8000003f

08001b08 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d108      	bne.n	8001b34 <ADC_Disable+0x2c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <ADC_Disable+0x2c>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <ADC_Disable+0x2e>
 8001b34:	2300      	movs	r3, #0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d040      	beq.n	8001bbc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030d 	and.w	r3, r3, #13
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10f      	bne.n	8001b68 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0202 	orr.w	r2, r2, #2
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b60:	f7fe ffd8 	bl	8000b14 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b66:	e022      	b.n	8001bae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f043 0210 	orr.w	r2, r3, #16
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e01c      	b.n	8001bbe <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b84:	f7fe ffc6 	bl	8000b14 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d90d      	bls.n	8001bae <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f043 0210 	orr.w	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e007      	b.n	8001bbe <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d0e3      	beq.n	8001b84 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff47 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff5c 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffb0 	bl	8001ce8 <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da2:	e160      	b.n	8002066 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8152 	beq.w	8002060 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x38>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b12      	cmp	r3, #18
 8001dca:	d123      	bne.n	8001e14 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	6939      	ldr	r1, [r7, #16]
 8001e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0203 	and.w	r2, r3, #3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d00b      	beq.n	8001e68 <HAL_GPIO_Init+0xd4>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d007      	beq.n	8001e68 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e5c:	2b11      	cmp	r3, #17
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b12      	cmp	r3, #18
 8001e66:	d130      	bne.n	8001eca <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 0201 	and.w	r2, r3, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80ac 	beq.w	8002060 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f08:	4b5e      	ldr	r3, [pc, #376]	; (8002084 <HAL_GPIO_Init+0x2f0>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a5d      	ldr	r2, [pc, #372]	; (8002084 <HAL_GPIO_Init+0x2f0>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b5b      	ldr	r3, [pc, #364]	; (8002084 <HAL_GPIO_Init+0x2f0>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f20:	4a59      	ldr	r2, [pc, #356]	; (8002088 <HAL_GPIO_Init+0x2f4>)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	220f      	movs	r2, #15
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f4a:	d025      	beq.n	8001f98 <HAL_GPIO_Init+0x204>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a4f      	ldr	r2, [pc, #316]	; (800208c <HAL_GPIO_Init+0x2f8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d01f      	beq.n	8001f94 <HAL_GPIO_Init+0x200>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a4e      	ldr	r2, [pc, #312]	; (8002090 <HAL_GPIO_Init+0x2fc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d019      	beq.n	8001f90 <HAL_GPIO_Init+0x1fc>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a4d      	ldr	r2, [pc, #308]	; (8002094 <HAL_GPIO_Init+0x300>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d013      	beq.n	8001f8c <HAL_GPIO_Init+0x1f8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a4c      	ldr	r2, [pc, #304]	; (8002098 <HAL_GPIO_Init+0x304>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00d      	beq.n	8001f88 <HAL_GPIO_Init+0x1f4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a4b      	ldr	r2, [pc, #300]	; (800209c <HAL_GPIO_Init+0x308>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <HAL_GPIO_Init+0x1f0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a4a      	ldr	r2, [pc, #296]	; (80020a0 <HAL_GPIO_Init+0x30c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_GPIO_Init+0x1ec>
 8001f7c:	2306      	movs	r3, #6
 8001f7e:	e00c      	b.n	8001f9a <HAL_GPIO_Init+0x206>
 8001f80:	2307      	movs	r3, #7
 8001f82:	e00a      	b.n	8001f9a <HAL_GPIO_Init+0x206>
 8001f84:	2305      	movs	r3, #5
 8001f86:	e008      	b.n	8001f9a <HAL_GPIO_Init+0x206>
 8001f88:	2304      	movs	r3, #4
 8001f8a:	e006      	b.n	8001f9a <HAL_GPIO_Init+0x206>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e004      	b.n	8001f9a <HAL_GPIO_Init+0x206>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x206>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_GPIO_Init+0x206>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	f002 0203 	and.w	r2, r2, #3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001faa:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_GPIO_Init+0x2f4>)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_GPIO_Init+0x310>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fdc:	4a31      	ldr	r2, [pc, #196]	; (80020a4 <HAL_GPIO_Init+0x310>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fe2:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_GPIO_Init+0x310>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002006:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_GPIO_Init+0x310>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <HAL_GPIO_Init+0x310>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002030:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_GPIO_Init+0x310>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_GPIO_Init+0x310>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <HAL_GPIO_Init+0x310>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	f47f ae97 	bne.w	8001da4 <HAL_GPIO_Init+0x10>
  }
}
 8002076:	bf00      	nop
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	40010000 	.word	0x40010000
 800208c:	48000400 	.word	0x48000400
 8002090:	48000800 	.word	0x48000800
 8002094:	48000c00 	.word	0x48000c00
 8002098:	48001000 	.word	0x48001000
 800209c:	48001400 	.word	0x48001400
 80020a0:	48001800 	.word	0x48001800
 80020a4:	40010400 	.word	0x40010400

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	f000 bf01 	b.w	8002ec4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 8160 	beq.w	8002392 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020d2:	4bae      	ldr	r3, [pc, #696]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d00c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020de:	4bab      	ldr	r3, [pc, #684]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d159      	bne.n	800219e <HAL_RCC_OscConfig+0xf6>
 80020ea:	4ba8      	ldr	r3, [pc, #672]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f6:	d152      	bne.n	800219e <HAL_RCC_OscConfig+0xf6>
 80020f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 800210c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d102      	bne.n	800212a <HAL_RCC_OscConfig+0x82>
 8002124:	4b99      	ldr	r3, [pc, #612]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0xae>
 800212a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800213e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002142:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002146:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002152:	4b8e      	ldr	r3, [pc, #568]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800215a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800215e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002162:	fa92 f2a2 	rbit	r2, r2
 8002166:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800216a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800216e:	fab2 f282 	clz	r2, r2
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f042 0220 	orr.w	r2, r2, #32
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f002 021f 	and.w	r2, r2, #31
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f202 	lsl.w	r2, r1, r2
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8102 	beq.w	8002390 <HAL_RCC_OscConfig+0x2e8>
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 80fc 	bne.w	8002390 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f000 be93 	b.w	8002ec4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0x110>
 80021aa:	4b78      	ldr	r3, [pc, #480]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a77      	ldr	r2, [pc, #476]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e030      	b.n	800221a <HAL_RCC_OscConfig+0x172>
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x134>
 80021c2:	4b72      	ldr	r3, [pc, #456]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a71      	ldr	r2, [pc, #452]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80021c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b6f      	ldr	r3, [pc, #444]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6e      	ldr	r2, [pc, #440]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80021d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e01e      	b.n	800221a <HAL_RCC_OscConfig+0x172>
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e6:	d10c      	bne.n	8002202 <HAL_RCC_OscConfig+0x15a>
 80021e8:	4b68      	ldr	r3, [pc, #416]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a67      	ldr	r2, [pc, #412]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80021ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b65      	ldr	r3, [pc, #404]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a64      	ldr	r2, [pc, #400]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e00b      	b.n	800221a <HAL_RCC_OscConfig+0x172>
 8002202:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a61      	ldr	r2, [pc, #388]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b5f      	ldr	r3, [pc, #380]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a5e      	ldr	r2, [pc, #376]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d059      	beq.n	80022d8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe fc76 	bl	8000b14 <HAL_GetTick>
 8002228:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222e:	f7fe fc71 	bl	8000b14 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d902      	bls.n	8002244 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	f000 be40 	b.w	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 8002244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002248:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002258:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0x1ce>
 8002270:	4b46      	ldr	r3, [pc, #280]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x1fa>
 8002276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800228a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002292:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800229e:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022a6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80022aa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80022ae:	fa92 f2a2 	rbit	r2, r2
 80022b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80022b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022ba:	fab2 f282 	clz	r2, r2
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f042 0220 	orr.w	r2, r2, #32
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	f002 021f 	and.w	r2, r2, #31
 80022ca:	2101      	movs	r1, #1
 80022cc:	fa01 f202 	lsl.w	r2, r1, r2
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0ab      	beq.n	800222e <HAL_RCC_OscConfig+0x186>
 80022d6:	e05c      	b.n	8002392 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fc1c 	bl	8000b14 <HAL_GetTick>
 80022dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e2:	f7fe fc17 	bl	8000b14 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d902      	bls.n	80022f8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	f000 bde6 	b.w	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 80022f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800230c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d102      	bne.n	800232a <HAL_RCC_OscConfig+0x282>
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x2ae>
 800232a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800232e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800233e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002342:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002346:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_RCC_OscConfig+0x2e4>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800235a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800235e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002362:	fa92 f2a2 	rbit	r2, r2
 8002366:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800236a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800236e:	fab2 f282 	clz	r2, r2
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	f042 0220 	orr.w	r2, r2, #32
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	f002 021f 	and.w	r2, r2, #31
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f202 	lsl.w	r2, r1, r2
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ab      	bne.n	80022e2 <HAL_RCC_OscConfig+0x23a>
 800238a:	e002      	b.n	8002392 <HAL_RCC_OscConfig+0x2ea>
 800238c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8170 	beq.w	8002682 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023a2:	4bd0      	ldr	r3, [pc, #832]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023ae:	4bcd      	ldr	r3, [pc, #820]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d16d      	bne.n	8002496 <HAL_RCC_OscConfig+0x3ee>
 80023ba:	4bca      	ldr	r3, [pc, #808]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80023c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c6:	d166      	bne.n	8002496 <HAL_RCC_OscConfig+0x3ee>
 80023c8:	2302      	movs	r3, #2
 80023ca:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80023da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <HAL_RCC_OscConfig+0x350>
 80023f2:	4bbc      	ldr	r3, [pc, #752]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e013      	b.n	8002420 <HAL_RCC_OscConfig+0x378>
 80023f8:	2302      	movs	r3, #2
 80023fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800240a:	2302      	movs	r3, #2
 800240c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002410:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800241c:	4bb1      	ldr	r3, [pc, #708]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2202      	movs	r2, #2
 8002422:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002426:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800242a:	fa92 f2a2 	rbit	r2, r2
 800242e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002432:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <HAL_RCC_OscConfig+0x3ba>
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d002      	beq.n	8002462 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	f000 bd31 	b.w	8002ec4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4ba0      	ldr	r3, [pc, #640]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	21f8      	movs	r1, #248	; 0xf8
 8002472:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800247a:	fa91 f1a1 	rbit	r1, r1
 800247e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002482:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002486:	fab1 f181 	clz	r1, r1
 800248a:	b2c9      	uxtb	r1, r1
 800248c:	408b      	lsls	r3, r1
 800248e:	4995      	ldr	r1, [pc, #596]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002494:	e0f5      	b.n	8002682 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8085 	beq.w	80025ac <HAL_RCC_OscConfig+0x504>
 80024a2:	2301      	movs	r3, #1
 80024a4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80024b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	461a      	mov	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7fe fb21 	bl	8000b14 <HAL_GetTick>
 80024d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d8:	f7fe fb1c 	bl	8000b14 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d902      	bls.n	80024ee <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	f000 bceb 	b.w	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 80024ee:	2302      	movs	r3, #2
 80024f0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002500:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d102      	bne.n	800251e <HAL_RCC_OscConfig+0x476>
 8002518:	4b72      	ldr	r3, [pc, #456]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	e013      	b.n	8002546 <HAL_RCC_OscConfig+0x49e>
 800251e:	2302      	movs	r3, #2
 8002520:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002530:	2302      	movs	r3, #2
 8002532:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002536:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002542:	4b68      	ldr	r3, [pc, #416]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2202      	movs	r2, #2
 8002548:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800254c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002550:	fa92 f2a2 	rbit	r2, r2
 8002554:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002558:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800255c:	fab2 f282 	clz	r2, r2
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f002 021f 	and.w	r2, r2, #31
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0af      	beq.n	80024d8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b5a      	ldr	r3, [pc, #360]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	21f8      	movs	r1, #248	; 0xf8
 8002588:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002590:	fa91 f1a1 	rbit	r1, r1
 8002594:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002598:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800259c:	fab1 f181 	clz	r1, r1
 80025a0:	b2c9      	uxtb	r1, r1
 80025a2:	408b      	lsls	r3, r1
 80025a4:	494f      	ldr	r1, [pc, #316]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
 80025aa:	e06a      	b.n	8002682 <HAL_RCC_OscConfig+0x5da>
 80025ac:	2301      	movs	r3, #1
 80025ae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80025be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	461a      	mov	r2, r3
 80025d4:	2300      	movs	r3, #0
 80025d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fa9c 	bl	8000b14 <HAL_GetTick>
 80025dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e2:	f7fe fa97 	bl	8000b14 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d902      	bls.n	80025f8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	f000 bc66 	b.w	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 80025f8:	2302      	movs	r3, #2
 80025fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800260a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_RCC_OscConfig+0x580>
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	e013      	b.n	8002650 <HAL_RCC_OscConfig+0x5a8>
 8002628:	2302      	movs	r3, #2
 800262a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800263a:	2302      	movs	r3, #2
 800263c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002640:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_RCC_OscConfig+0x63c>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2202      	movs	r2, #2
 8002652:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002656:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800265a:	fa92 f2a2 	rbit	r2, r2
 800265e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002662:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002666:	fab2 f282 	clz	r2, r2
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f042 0220 	orr.w	r2, r2, #32
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f002 021f 	and.w	r2, r2, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1af      	bne.n	80025e2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80da 	beq.w	8002846 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d069      	beq.n	8002770 <HAL_RCC_OscConfig+0x6c8>
 800269c:	2301      	movs	r3, #1
 800269e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80026ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_OscConfig+0x640>)
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	461a      	mov	r2, r3
 80026c2:	2301      	movs	r3, #1
 80026c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c6:	f7fe fa25 	bl	8000b14 <HAL_GetTick>
 80026ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	e00d      	b.n	80026ec <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fa20 	bl	8000b14 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d905      	bls.n	80026ec <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e3ef      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 80026e4:	40021000 	.word	0x40021000
 80026e8:	10908120 	.word	0x10908120
 80026ec:	2302      	movs	r3, #2
 80026ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026f6:	fa93 f2a3 	rbit	r2, r3
 80026fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002704:	2202      	movs	r2, #2
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800271c:	2202      	movs	r2, #2
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fa93 f2a3 	rbit	r2, r3
 800272a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800272e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002730:	4ba4      	ldr	r3, [pc, #656]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 8002732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002734:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002738:	2102      	movs	r1, #2
 800273a:	6019      	str	r1, [r3, #0]
 800273c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	fa93 f1a3 	rbit	r1, r3
 8002746:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800274a:	6019      	str	r1, [r3, #0]
  return result;
 800274c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0b0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x628>
 800276e:	e06a      	b.n	8002846 <HAL_RCC_OscConfig+0x79e>
 8002770:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002786:	601a      	str	r2, [r3, #0]
  return result;
 8002788:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800278c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	4b8c      	ldr	r3, [pc, #560]	; (80029c8 <HAL_RCC_OscConfig+0x920>)
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	461a      	mov	r2, r3
 800279e:	2300      	movs	r3, #0
 80027a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe f9b7 	bl	8000b14 <HAL_GetTick>
 80027a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027aa:	e009      	b.n	80027c0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe f9b2 	bl	8000b14 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e381      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 80027c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027c4:	2202      	movs	r2, #2
 80027c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027f4:	2202      	movs	r2, #2
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002806:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	4b6e      	ldr	r3, [pc, #440]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 800280a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800280c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002810:	2102      	movs	r1, #2
 8002812:	6019      	str	r1, [r3, #0]
 8002814:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f1a3 	rbit	r1, r3
 800281e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002822:	6019      	str	r1, [r3, #0]
  return result;
 8002824:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1b2      	bne.n	80027ac <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8157 	beq.w	8002b04 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d112      	bne.n	800288e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002868:	4b56      	ldr	r3, [pc, #344]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	4a55      	ldr	r2, [pc, #340]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002872:	61d3      	str	r3, [r2, #28]
 8002874:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002888:	2301      	movs	r3, #1
 800288a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <HAL_RCC_OscConfig+0x924>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11a      	bne.n	80028d0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <HAL_RCC_OscConfig+0x924>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a4b      	ldr	r2, [pc, #300]	; (80029cc <HAL_RCC_OscConfig+0x924>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7fe f935 	bl	8000b14 <HAL_GetTick>
 80028aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	e009      	b.n	80028c4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b0:	f7fe f930 	bl	8000b14 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b64      	cmp	r3, #100	; 0x64
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e2ff      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_RCC_OscConfig+0x924>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ef      	beq.n	80028b0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x840>
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a39      	ldr	r2, [pc, #228]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	e02f      	b.n	8002948 <HAL_RCC_OscConfig+0x8a0>
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x864>
 80028f2:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a33      	ldr	r2, [pc, #204]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a30      	ldr	r2, [pc, #192]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0x8a0>
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b05      	cmp	r3, #5
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x888>
 8002916:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6213      	str	r3, [r2, #32]
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6213      	str	r3, [r2, #32]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0x8a0>
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 8002942:	f023 0304 	bic.w	r3, r3, #4
 8002946:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d06a      	beq.n	8002a28 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7fe f8df 	bl	8000b14 <HAL_GetTick>
 8002956:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7fe f8da 	bl	8000b14 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	; 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e2a7      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 8002974:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002978:	2202      	movs	r2, #2
 800297a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	fa93 f2a3 	rbit	r2, r3
 8002986:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002990:	2202      	movs	r2, #2
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029a2:	601a      	str	r2, [r3, #0]
  return result;
 80029a4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d108      	bne.n	80029d0 <HAL_RCC_OscConfig+0x928>
 80029be:	4b01      	ldr	r3, [pc, #4]	; (80029c4 <HAL_RCC_OscConfig+0x91c>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	e013      	b.n	80029ec <HAL_RCC_OscConfig+0x944>
 80029c4:	40021000 	.word	0x40021000
 80029c8:	10908120 	.word	0x10908120
 80029cc:	40007000 	.word	0x40007000
 80029d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029d4:	2202      	movs	r2, #2
 80029d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	fa93 f2a3 	rbit	r2, r3
 80029e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	4bc0      	ldr	r3, [pc, #768]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80029f0:	2102      	movs	r1, #2
 80029f2:	6011      	str	r1, [r2, #0]
 80029f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	fa92 f1a2 	rbit	r1, r2
 80029fe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a02:	6011      	str	r1, [r2, #0]
  return result;
 8002a04:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f002 021f 	and.w	r2, r2, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d09a      	beq.n	800295c <HAL_RCC_OscConfig+0x8b4>
 8002a26:	e063      	b.n	8002af0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a28:	f7fe f874 	bl	8000b14 <HAL_GetTick>
 8002a2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	e00b      	b.n	8002a4a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe f86f 	bl	8000b14 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e23c      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 8002a4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a4e:	2202      	movs	r2, #2
 8002a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	fa93 f2a3 	rbit	r2, r3
 8002a5c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a66:	2202      	movs	r2, #2
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a78:	601a      	str	r2, [r3, #0]
  return result;
 8002a7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d102      	bne.n	8002a9a <HAL_RCC_OscConfig+0x9f2>
 8002a94:	4b95      	ldr	r3, [pc, #596]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	e00d      	b.n	8002ab6 <HAL_RCC_OscConfig+0xa0e>
 8002a9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	fa93 f2a3 	rbit	r2, r3
 8002aac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	4b8e      	ldr	r3, [pc, #568]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002aba:	2102      	movs	r1, #2
 8002abc:	6011      	str	r1, [r2, #0]
 8002abe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	fa92 f1a2 	rbit	r1, r2
 8002ac8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002acc:	6011      	str	r1, [r2, #0]
  return result;
 8002ace:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	fab2 f282 	clz	r2, r2
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	f002 021f 	and.w	r2, r2, #31
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1a0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002af0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af8:	4b7c      	ldr	r3, [pc, #496]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	4a7b      	ldr	r2, [pc, #492]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 81d9 	beq.w	8002ec2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b10:	4b76      	ldr	r3, [pc, #472]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	f000 81a6 	beq.w	8002e6a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	f040 811e 	bne.w	8002d66 <HAL_RCC_OscConfig+0xcbe>
 8002b2a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b42:	601a      	str	r2, [r3, #0]
  return result;
 8002b44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b48:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fd ffd8 	bl	8000b14 <HAL_GetTick>
 8002b64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b68:	e009      	b.n	8002b7e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fd ffd3 	bl	8000b14 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1a2      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 8002b7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b96:	601a      	str	r2, [r3, #0]
  return result;
 8002b98:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xb10>
 8002bb2:	4b4e      	ldr	r3, [pc, #312]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e01b      	b.n	8002bf0 <HAL_RCC_OscConfig+0xb48>
 8002bb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002bf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bf8:	6011      	str	r1, [r2, #0]
 8002bfa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	fa92 f1a2 	rbit	r1, r2
 8002c04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c08:	6011      	str	r1, [r2, #0]
  return result;
 8002c0a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f042 0220 	orr.w	r2, r2, #32
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f002 021f 	and.w	r2, r2, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f202 	lsl.w	r2, r1, r2
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d19e      	bne.n	8002b6a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	f023 020f 	bic.w	r2, r3, #15
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	492c      	ldr	r1, [pc, #176]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002c40:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6a19      	ldr	r1, [r3, #32]
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	4925      	ldr	r1, [pc, #148]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
 8002c5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	fa93 f2a3 	rbit	r2, r3
 8002c70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c74:	601a      	str	r2, [r3, #0]
  return result;
 8002c76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c7a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2301      	movs	r3, #1
 8002c90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fd ff3f 	bl	8000b14 <HAL_GetTick>
 8002c96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9a:	e009      	b.n	8002cb0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fd ff3a 	bl	8000b14 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e109      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 8002cb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fa93 f2a3 	rbit	r2, r3
 8002cc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cc8:	601a      	str	r2, [r3, #0]
  return result;
 8002cca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xc48>
 8002ce4:	4b01      	ldr	r3, [pc, #4]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	e01e      	b.n	8002d28 <HAL_RCC_OscConfig+0xc80>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fa93 f2a3 	rbit	r2, r3
 8002d04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	fa93 f2a3 	rbit	r2, r3
 8002d1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <HAL_RCC_OscConfig+0xe28>)
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d30:	6011      	str	r1, [r2, #0]
 8002d32:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	fa92 f1a2 	rbit	r1, r2
 8002d3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d40:	6011      	str	r1, [r2, #0]
  return result;
 8002d42:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	fab2 f282 	clz	r2, r2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f002 021f 	and.w	r2, r2, #31
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d09b      	beq.n	8002c9c <HAL_RCC_OscConfig+0xbf4>
 8002d64:	e0ad      	b.n	8002ec2 <HAL_RCC_OscConfig+0xe1a>
 8002d66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d7e:	601a      	str	r2, [r3, #0]
  return result;
 8002d80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	461a      	mov	r2, r3
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fd feba 	bl	8000b14 <HAL_GetTick>
 8002da0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da4:	e009      	b.n	8002dba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fd feb5 	bl	8000b14 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e084      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe1c>
 8002dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	fa93 f2a3 	rbit	r2, r3
 8002dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd2:	601a      	str	r2, [r3, #0]
  return result;
 8002dd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_RCC_OscConfig+0xd4c>
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <HAL_RCC_OscConfig+0xe28>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	e01b      	b.n	8002e2c <HAL_RCC_OscConfig+0xd84>
 8002df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f107 0320 	add.w	r3, r7, #32
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f107 031c 	add.w	r3, r7, #28
 8002e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f107 031c 	add.w	r3, r7, #28
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f107 0318 	add.w	r3, r7, #24
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <HAL_RCC_OscConfig+0xe28>)
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	f107 0214 	add.w	r2, r7, #20
 8002e30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e34:	6011      	str	r1, [r2, #0]
 8002e36:	f107 0214 	add.w	r2, r7, #20
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	fa92 f1a2 	rbit	r1, r2
 8002e40:	f107 0210 	add.w	r2, r7, #16
 8002e44:	6011      	str	r1, [r2, #0]
  return result;
 8002e46:	f107 0210 	add.w	r2, r7, #16
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	fab2 f282 	clz	r2, r2
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f042 0220 	orr.w	r2, r2, #32
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	f002 021f 	and.w	r2, r2, #31
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d19e      	bne.n	8002da6 <HAL_RCC_OscConfig+0xcfe>
 8002e68:	e02b      	b.n	8002ec2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e025      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_RCC_OscConfig+0xe28>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002e80:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCC_OscConfig+0xe28>)
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002e8c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d111      	bne.n	8002ebe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e9a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002e9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d108      	bne.n	8002ebe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eb0:	f003 020f 	and.w	r2, r3, #15
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b09e      	sub	sp, #120	; 0x78
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e162      	b.n	80031b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b90      	ldr	r3, [pc, #576]	; (8003130 <HAL_RCC_ClockConfig+0x25c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d910      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b8d      	ldr	r3, [pc, #564]	; (8003130 <HAL_RCC_ClockConfig+0x25c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	498b      	ldr	r1, [pc, #556]	; (8003130 <HAL_RCC_ClockConfig+0x25c>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b89      	ldr	r3, [pc, #548]	; (8003130 <HAL_RCC_ClockConfig+0x25c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e14a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b82      	ldr	r3, [pc, #520]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	497f      	ldr	r1, [pc, #508]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80dc 	beq.w	8003100 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d13c      	bne.n	8002fca <HAL_RCC_ClockConfig+0xf6>
 8002f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d102      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xa6>
 8002f74:	4b6f      	ldr	r3, [pc, #444]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	e00f      	b.n	8002f9a <HAL_RCC_ClockConfig+0xc6>
 8002f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	667b      	str	r3, [r7, #100]	; 0x64
 8002f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f96:	4b67      	ldr	r3, [pc, #412]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fa2:	fa92 f2a2 	rbit	r2, r2
 8002fa6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002faa:	fab2 f282 	clz	r2, r2
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f002 021f 	and.w	r2, r2, #31
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d17b      	bne.n	80030be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0f3      	b.n	80031b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d13c      	bne.n	800304c <HAL_RCC_ClockConfig+0x178>
 8002fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x128>
 8002ff6:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	e00f      	b.n	800301c <HAL_RCC_ClockConfig+0x148>
 8002ffc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	647b      	str	r3, [r7, #68]	; 0x44
 800300a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800300e:	643b      	str	r3, [r7, #64]	; 0x40
 8003010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003018:	4b46      	ldr	r3, [pc, #280]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003020:	63ba      	str	r2, [r7, #56]	; 0x38
 8003022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003024:	fa92 f2a2 	rbit	r2, r2
 8003028:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800302a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800302c:	fab2 f282 	clz	r2, r2
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	f042 0220 	orr.w	r2, r2, #32
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	f002 021f 	and.w	r2, r2, #31
 800303c:	2101      	movs	r1, #1
 800303e:	fa01 f202 	lsl.w	r2, r1, r2
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d13a      	bne.n	80030be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0b2      	b.n	80031b2 <HAL_RCC_ClockConfig+0x2de>
 800304c:	2302      	movs	r3, #2
 800304e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d102      	bne.n	8003074 <HAL_RCC_ClockConfig+0x1a0>
 800306e:	4b31      	ldr	r3, [pc, #196]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	e00d      	b.n	8003090 <HAL_RCC_ClockConfig+0x1bc>
 8003074:	2302      	movs	r3, #2
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
 8003080:	2302      	movs	r3, #2
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	61fb      	str	r3, [r7, #28]
 800308c:	4b29      	ldr	r3, [pc, #164]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2202      	movs	r2, #2
 8003092:	61ba      	str	r2, [r7, #24]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	fa92 f2a2 	rbit	r2, r2
 800309a:	617a      	str	r2, [r7, #20]
  return result;
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	fab2 f282 	clz	r2, r2
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	f042 0220 	orr.w	r2, r2, #32
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f002 021f 	and.w	r2, r2, #31
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f202 	lsl.w	r2, r1, r2
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e079      	b.n	80031b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030be:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f023 0203 	bic.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	491a      	ldr	r1, [pc, #104]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d0:	f7fd fd20 	bl	8000b14 <HAL_GetTick>
 80030d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d8:	f7fd fd1c 	bl	8000b14 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e061      	b.n	80031b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_RCC_ClockConfig+0x260>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 020c 	and.w	r2, r3, #12
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d1eb      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_ClockConfig+0x25c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d214      	bcs.n	8003138 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <HAL_RCC_ClockConfig+0x25c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 0207 	bic.w	r2, r3, #7
 8003116:	4906      	ldr	r1, [pc, #24]	; (8003130 <HAL_RCC_ClockConfig+0x25c>)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b04      	ldr	r3, [pc, #16]	; (8003130 <HAL_RCC_ClockConfig+0x25c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e040      	b.n	80031b2 <HAL_RCC_ClockConfig+0x2de>
 8003130:	40022000 	.word	0x40022000
 8003134:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_RCC_ClockConfig+0x2e8>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	491a      	ldr	r1, [pc, #104]	; (80031bc <HAL_RCC_ClockConfig+0x2e8>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_RCC_ClockConfig+0x2e8>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4912      	ldr	r1, [pc, #72]	; (80031bc <HAL_RCC_ClockConfig+0x2e8>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003176:	f000 f829 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800317a:	4601      	mov	r1, r0
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_RCC_ClockConfig+0x2e8>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003184:	22f0      	movs	r2, #240	; 0xf0
 8003186:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	fa92 f2a2 	rbit	r2, r2
 800318e:	60fa      	str	r2, [r7, #12]
  return result;
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	fab2 f282 	clz	r2, r2
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	40d3      	lsrs	r3, r2
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <HAL_RCC_ClockConfig+0x2ec>)
 800319c:	5cd3      	ldrb	r3, [r2, r3]
 800319e:	fa21 f303 	lsr.w	r3, r1, r3
 80031a2:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <HAL_RCC_ClockConfig+0x2f0>)
 80031a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <HAL_RCC_ClockConfig+0x2f4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fc6e 	bl	8000a8c <HAL_InitTick>
  
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3778      	adds	r7, #120	; 0x78
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	08004968 	.word	0x08004968
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b08b      	sub	sp, #44	; 0x2c
 80031d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031e6:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d002      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x30>
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x36>
 80031fa:	e03f      	b.n	800327c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031fc:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_RCC_GetSysClockFreq+0xc8>)
 80031fe:	623b      	str	r3, [r7, #32]
      break;
 8003200:	e03f      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003208:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800320c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	fa92 f2a2 	rbit	r2, r2
 8003214:	607a      	str	r2, [r7, #4]
  return result;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	fab2 f282 	clz	r2, r2
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	40d3      	lsrs	r3, r2
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003222:	5cd3      	ldrb	r3, [r2, r3]
 8003224:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	220f      	movs	r2, #15
 8003230:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	fa92 f2a2 	rbit	r2, r2
 8003238:	60fa      	str	r2, [r7, #12]
  return result;
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	fab2 f282 	clz	r2, r2
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	40d3      	lsrs	r3, r2
 8003244:	4a15      	ldr	r2, [pc, #84]	; (800329c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003254:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	fbb2 f2f3 	udiv	r2, r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
 8003264:	e007      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	fbb2 f2f3 	udiv	r2, r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	fb02 f303 	mul.w	r3, r2, r3
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	623b      	str	r3, [r7, #32]
      break;
 800327a:	e002      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetSysClockFreq+0xc8>)
 800327e:	623b      	str	r3, [r7, #32]
      break;
 8003280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003282:	6a3b      	ldr	r3, [r7, #32]
}
 8003284:	4618      	mov	r0, r3
 8003286:	372c      	adds	r7, #44	; 0x2c
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40021000 	.word	0x40021000
 8003294:	007a1200 	.word	0x007a1200
 8003298:	08004980 	.word	0x08004980
 800329c:	08004990 	.word	0x08004990

080032a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000000 	.word	0x20000000

080032b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032be:	f7ff ffef 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032c2:	4601      	mov	r1, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	fa92 f2a2 	rbit	r2, r2
 80032d8:	603a      	str	r2, [r7, #0]
  return result;
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	fab2 f282 	clz	r2, r2
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	40d3      	lsrs	r3, r2
 80032e4:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08004978 	.word	0x08004978

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003302:	f7ff ffcd 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 8003306:	4601      	mov	r1, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003310:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003314:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	fa92 f2a2 	rbit	r2, r2
 800331c:	603a      	str	r2, [r7, #0]
  return result;
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	fab2 f282 	clz	r2, r2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	40d3      	lsrs	r3, r2
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_RCC_GetPCLK2Freq+0x40>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	08004978 	.word	0x08004978

08003340 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b092      	sub	sp, #72	; 0x48
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80d7 	beq.w	800350c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003364:	4b4e      	ldr	r3, [pc, #312]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10e      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4a4a      	ldr	r2, [pc, #296]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337a:	61d3      	str	r3, [r2, #28]
 800337c:	4b48      	ldr	r3, [pc, #288]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338e:	4b45      	ldr	r3, [pc, #276]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d118      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339a:	4b42      	ldr	r3, [pc, #264]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a41      	ldr	r2, [pc, #260]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a6:	f7fd fbb5 	bl	8000b14 <HAL_GetTick>
 80033aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ac:	e008      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ae:	f7fd fbb1 	bl	8000b14 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b64      	cmp	r3, #100	; 0x64
 80033ba:	d901      	bls.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e1d6      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	4b38      	ldr	r3, [pc, #224]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033cc:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8084 	beq.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d07c      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ec:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	461a      	mov	r2, r3
 8003416:	2301      	movs	r3, #1
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	461a      	mov	r2, r3
 800343a:	2300      	movs	r3, #0
 800343c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800343e:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003442:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d04b      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fd fb61 	bl	8000b14 <HAL_GetTick>
 8003452:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fd fb5d 	bl	8000b14 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e180      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800346c:	2302      	movs	r3, #2
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
 8003478:	2302      	movs	r3, #2
 800347a:	623b      	str	r3, [r7, #32]
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	61fb      	str	r3, [r7, #28]
  return result;
 8003484:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f043 0302 	orr.w	r3, r3, #2
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d108      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800349a:	4b01      	ldr	r3, [pc, #4]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	e00d      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40007000 	.word	0x40007000
 80034a8:	10908100 	.word	0x10908100
 80034ac:	2302      	movs	r3, #2
 80034ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	4ba0      	ldr	r3, [pc, #640]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2202      	movs	r2, #2
 80034be:	613a      	str	r2, [r7, #16]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	fa92 f2a2 	rbit	r2, r2
 80034c6:	60fa      	str	r2, [r7, #12]
  return result;
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	fab2 f282 	clz	r2, r2
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f002 021f 	and.w	r2, r2, #31
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0b7      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034e6:	4b95      	ldr	r3, [pc, #596]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4992      	ldr	r1, [pc, #584]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	4b8e      	ldr	r3, [pc, #568]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	4a8d      	ldr	r2, [pc, #564]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003518:	4b88      	ldr	r3, [pc, #544]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	f023 0203 	bic.w	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4985      	ldr	r1, [pc, #532]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003536:	4b81      	ldr	r3, [pc, #516]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	497e      	ldr	r1, [pc, #504]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003554:	4b79      	ldr	r3, [pc, #484]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	4976      	ldr	r1, [pc, #472]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003572:	4b72      	ldr	r3, [pc, #456]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f023 0210 	bic.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	496f      	ldr	r1, [pc, #444]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003590:	4b6a      	ldr	r3, [pc, #424]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	4967      	ldr	r1, [pc, #412]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ae:	4b63      	ldr	r3, [pc, #396]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f023 0220 	bic.w	r2, r3, #32
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4960      	ldr	r1, [pc, #384]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035cc:	4b5b      	ldr	r3, [pc, #364]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	4958      	ldr	r1, [pc, #352]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ea:	4b54      	ldr	r3, [pc, #336]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	4951      	ldr	r1, [pc, #324]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003608:	4b4c      	ldr	r3, [pc, #304]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	4949      	ldr	r1, [pc, #292]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003626:	4b45      	ldr	r3, [pc, #276]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4942      	ldr	r1, [pc, #264]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003644:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	493a      	ldr	r1, [pc, #232]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	4933      	ldr	r1, [pc, #204]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003680:	4b2e      	ldr	r3, [pc, #184]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	492b      	ldr	r1, [pc, #172]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800369e:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4924      	ldr	r1, [pc, #144]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80036bc:	4b1f      	ldr	r3, [pc, #124]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	491c      	ldr	r1, [pc, #112]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80036da:	4b18      	ldr	r3, [pc, #96]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	4915      	ldr	r1, [pc, #84]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036f8:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	490d      	ldr	r1, [pc, #52]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003722:	4906      	ldr	r1, [pc, #24]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00c      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003734:	4b01      	ldr	r3, [pc, #4]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	e002      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003748:	490b      	ldr	r1, [pc, #44]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800374a:	4313      	orrs	r3, r2
 800374c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800375a:	4b07      	ldr	r3, [pc, #28]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	4904      	ldr	r1, [pc, #16]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003768:	4313      	orrs	r3, r2
 800376a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3748      	adds	r7, #72	; 0x48
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e01d      	b.n	80037ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd f8a0 	bl	80008e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f000 f80a 	bl	80037d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a42      	ldr	r2, [pc, #264]	; (80038f0 <TIM_Base_SetConfig+0x11c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f2:	d00f      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3f      	ldr	r2, [pc, #252]	; (80038f4 <TIM_Base_SetConfig+0x120>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00b      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3e      	ldr	r2, [pc, #248]	; (80038f8 <TIM_Base_SetConfig+0x124>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d007      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3d      	ldr	r2, [pc, #244]	; (80038fc <TIM_Base_SetConfig+0x128>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3c      	ldr	r2, [pc, #240]	; (8003900 <TIM_Base_SetConfig+0x12c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d108      	bne.n	8003826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a31      	ldr	r2, [pc, #196]	; (80038f0 <TIM_Base_SetConfig+0x11c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01f      	beq.n	800386e <TIM_Base_SetConfig+0x9a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003834:	d01b      	beq.n	800386e <TIM_Base_SetConfig+0x9a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2e      	ldr	r2, [pc, #184]	; (80038f4 <TIM_Base_SetConfig+0x120>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d017      	beq.n	800386e <TIM_Base_SetConfig+0x9a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <TIM_Base_SetConfig+0x124>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <TIM_Base_SetConfig+0x9a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <TIM_Base_SetConfig+0x128>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00f      	beq.n	800386e <TIM_Base_SetConfig+0x9a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2c      	ldr	r2, [pc, #176]	; (8003904 <TIM_Base_SetConfig+0x130>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00b      	beq.n	800386e <TIM_Base_SetConfig+0x9a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2b      	ldr	r2, [pc, #172]	; (8003908 <TIM_Base_SetConfig+0x134>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <TIM_Base_SetConfig+0x9a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2a      	ldr	r2, [pc, #168]	; (800390c <TIM_Base_SetConfig+0x138>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_Base_SetConfig+0x9a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a25      	ldr	r2, [pc, #148]	; (8003900 <TIM_Base_SetConfig+0x12c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d108      	bne.n	8003880 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <TIM_Base_SetConfig+0x11c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <TIM_Base_SetConfig+0x100>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a13      	ldr	r2, [pc, #76]	; (80038fc <TIM_Base_SetConfig+0x128>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00f      	beq.n	80038d4 <TIM_Base_SetConfig+0x100>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <TIM_Base_SetConfig+0x130>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00b      	beq.n	80038d4 <TIM_Base_SetConfig+0x100>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <TIM_Base_SetConfig+0x134>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d007      	beq.n	80038d4 <TIM_Base_SetConfig+0x100>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a11      	ldr	r2, [pc, #68]	; (800390c <TIM_Base_SetConfig+0x138>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <TIM_Base_SetConfig+0x100>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a0c      	ldr	r2, [pc, #48]	; (8003900 <TIM_Base_SetConfig+0x12c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d103      	bne.n	80038dc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	615a      	str	r2, [r3, #20]
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800
 80038fc:	40013400 	.word	0x40013400
 8003900:	40015000 	.word	0x40015000
 8003904:	40014000 	.word	0x40014000
 8003908:	40014400 	.word	0x40014400
 800390c:	40014800 	.word	0x40014800

08003910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e040      	b.n	80039a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd f828 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	; 0x24
 800393c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8c0 	bl	8003ad4 <UART_SetConfig>
 8003954:	4603      	mov	r3, r0
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e022      	b.n	80039a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 face 	bl	8003f08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800397a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800398a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fb55 	bl	800404c <UART_CheckIdleState>
 80039a2:	4603      	mov	r3, r0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	f040 8081 	bne.w	8003ac8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_UART_Transmit+0x26>
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e079      	b.n	8003aca <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_UART_Transmit+0x38>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e072      	b.n	8003aca <HAL_UART_Transmit+0x11e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2221      	movs	r2, #33	; 0x21
 80039f6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80039f8:	f7fd f88c 	bl	8000b14 <HAL_GetTick>
 80039fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	88fa      	ldrh	r2, [r7, #6]
 8003a02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a16:	d108      	bne.n	8003a2a <HAL_UART_Transmit+0x7e>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	e003      	b.n	8003a32 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a32:	e02d      	b.n	8003a90 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fb49 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e03d      	b.n	8003aca <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	881a      	ldrh	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a60:	b292      	uxth	r2, r2
 8003a62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	3302      	adds	r3, #2
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	e008      	b.n	8003a7e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	b292      	uxth	r2, r2
 8003a76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1cb      	bne.n	8003a34 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2140      	movs	r1, #64	; 0x40
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fb15 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e009      	b.n	8003aca <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4bac      	ldr	r3, [pc, #688]	; (8003db4 <UART_SetConfig+0x2e0>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	6939      	ldr	r1, [r7, #16]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a9a      	ldr	r2, [pc, #616]	; (8003db8 <UART_SetConfig+0x2e4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d121      	bne.n	8003b98 <UART_SetConfig+0xc4>
 8003b54:	4b99      	ldr	r3, [pc, #612]	; (8003dbc <UART_SetConfig+0x2e8>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d817      	bhi.n	8003b90 <UART_SetConfig+0xbc>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <UART_SetConfig+0x94>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b85 	.word	0x08003b85
 8003b70:	08003b8b 	.word	0x08003b8b
 8003b74:	08003b7f 	.word	0x08003b7f
 8003b78:	2301      	movs	r3, #1
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e0b2      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e0af      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003b84:	2304      	movs	r3, #4
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e0ac      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e0a9      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003b90:	2310      	movs	r3, #16
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	bf00      	nop
 8003b96:	e0a5      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a88      	ldr	r2, [pc, #544]	; (8003dc0 <UART_SetConfig+0x2ec>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d123      	bne.n	8003bea <UART_SetConfig+0x116>
 8003ba2:	4b86      	ldr	r3, [pc, #536]	; (8003dbc <UART_SetConfig+0x2e8>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bae:	d012      	beq.n	8003bd6 <UART_SetConfig+0x102>
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb4:	d802      	bhi.n	8003bbc <UART_SetConfig+0xe8>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <UART_SetConfig+0xf6>
 8003bba:	e012      	b.n	8003be2 <UART_SetConfig+0x10e>
 8003bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc0:	d00c      	beq.n	8003bdc <UART_SetConfig+0x108>
 8003bc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bc6:	d003      	beq.n	8003bd0 <UART_SetConfig+0xfc>
 8003bc8:	e00b      	b.n	8003be2 <UART_SetConfig+0x10e>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e089      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e086      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	77fb      	strb	r3, [r7, #31]
 8003bda:	e083      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003bdc:	2308      	movs	r3, #8
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e080      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003be2:	2310      	movs	r3, #16
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	bf00      	nop
 8003be8:	e07c      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a75      	ldr	r2, [pc, #468]	; (8003dc4 <UART_SetConfig+0x2f0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d123      	bne.n	8003c3c <UART_SetConfig+0x168>
 8003bf4:	4b71      	ldr	r3, [pc, #452]	; (8003dbc <UART_SetConfig+0x2e8>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c00:	d012      	beq.n	8003c28 <UART_SetConfig+0x154>
 8003c02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c06:	d802      	bhi.n	8003c0e <UART_SetConfig+0x13a>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <UART_SetConfig+0x148>
 8003c0c:	e012      	b.n	8003c34 <UART_SetConfig+0x160>
 8003c0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c12:	d00c      	beq.n	8003c2e <UART_SetConfig+0x15a>
 8003c14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c18:	d003      	beq.n	8003c22 <UART_SetConfig+0x14e>
 8003c1a:	e00b      	b.n	8003c34 <UART_SetConfig+0x160>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e060      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c22:	2302      	movs	r3, #2
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	e05d      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e05a      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c2e:	2308      	movs	r3, #8
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e057      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c34:	2310      	movs	r3, #16
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	bf00      	nop
 8003c3a:	e053      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a61      	ldr	r2, [pc, #388]	; (8003dc8 <UART_SetConfig+0x2f4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d123      	bne.n	8003c8e <UART_SetConfig+0x1ba>
 8003c46:	4b5d      	ldr	r3, [pc, #372]	; (8003dbc <UART_SetConfig+0x2e8>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c52:	d012      	beq.n	8003c7a <UART_SetConfig+0x1a6>
 8003c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c58:	d802      	bhi.n	8003c60 <UART_SetConfig+0x18c>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <UART_SetConfig+0x19a>
 8003c5e:	e012      	b.n	8003c86 <UART_SetConfig+0x1b2>
 8003c60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c64:	d00c      	beq.n	8003c80 <UART_SetConfig+0x1ac>
 8003c66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c6a:	d003      	beq.n	8003c74 <UART_SetConfig+0x1a0>
 8003c6c:	e00b      	b.n	8003c86 <UART_SetConfig+0x1b2>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e037      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c74:	2302      	movs	r3, #2
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e034      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c7a:	2304      	movs	r3, #4
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e031      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c80:	2308      	movs	r3, #8
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e02e      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c86:	2310      	movs	r3, #16
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	bf00      	nop
 8003c8c:	e02a      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a4e      	ldr	r2, [pc, #312]	; (8003dcc <UART_SetConfig+0x2f8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d123      	bne.n	8003ce0 <UART_SetConfig+0x20c>
 8003c98:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <UART_SetConfig+0x2e8>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca4:	d012      	beq.n	8003ccc <UART_SetConfig+0x1f8>
 8003ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003caa:	d802      	bhi.n	8003cb2 <UART_SetConfig+0x1de>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <UART_SetConfig+0x1ec>
 8003cb0:	e012      	b.n	8003cd8 <UART_SetConfig+0x204>
 8003cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cb6:	d00c      	beq.n	8003cd2 <UART_SetConfig+0x1fe>
 8003cb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cbc:	d003      	beq.n	8003cc6 <UART_SetConfig+0x1f2>
 8003cbe:	e00b      	b.n	8003cd8 <UART_SetConfig+0x204>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e00e      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e00b      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e008      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e005      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	bf00      	nop
 8003cde:	e001      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cec:	f040 8090 	bne.w	8003e10 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003cf0:	7ffb      	ldrb	r3, [r7, #31]
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d86c      	bhi.n	8003dd0 <UART_SetConfig+0x2fc>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <UART_SetConfig+0x228>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d21 	.word	0x08003d21
 8003d00:	08003d41 	.word	0x08003d41
 8003d04:	08003d61 	.word	0x08003d61
 8003d08:	08003dd1 	.word	0x08003dd1
 8003d0c:	08003d7d 	.word	0x08003d7d
 8003d10:	08003dd1 	.word	0x08003dd1
 8003d14:	08003dd1 	.word	0x08003dd1
 8003d18:	08003dd1 	.word	0x08003dd1
 8003d1c:	08003d9d 	.word	0x08003d9d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d20:	f7ff faca 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8003d24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	005a      	lsls	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	085b      	lsrs	r3, r3, #1
 8003d30:	441a      	add	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	61bb      	str	r3, [r7, #24]
        break;
 8003d3e:	e04a      	b.n	8003dd6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d40:	f7ff fadc 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8003d44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	005a      	lsls	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	441a      	add	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	61bb      	str	r3, [r7, #24]
        break;
 8003d5e:	e03a      	b.n	8003dd6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003d6a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6852      	ldr	r2, [r2, #4]
 8003d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	61bb      	str	r3, [r7, #24]
        break;
 8003d7a:	e02c      	b.n	8003dd6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7c:	f7ff fa26 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8003d80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	005a      	lsls	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	441a      	add	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	61bb      	str	r3, [r7, #24]
        break;
 8003d9a:	e01c      	b.n	8003dd6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	61bb      	str	r3, [r7, #24]
        break;
 8003db2:	e010      	b.n	8003dd6 <UART_SetConfig+0x302>
 8003db4:	efff69f3 	.word	0xefff69f3
 8003db8:	40013800 	.word	0x40013800
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40004400 	.word	0x40004400
 8003dc4:	40004800 	.word	0x40004800
 8003dc8:	40004c00 	.word	0x40004c00
 8003dcc:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75fb      	strb	r3, [r7, #23]
        break;
 8003dd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	d916      	bls.n	8003e0a <UART_SetConfig+0x336>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de2:	d212      	bcs.n	8003e0a <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f023 030f 	bic.w	r3, r3, #15
 8003dec:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	897b      	ldrh	r3, [r7, #10]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	897a      	ldrh	r2, [r7, #10]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	e072      	b.n	8003ef0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
 8003e0e:	e06f      	b.n	8003ef0 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003e10:	7ffb      	ldrb	r3, [r7, #31]
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d85b      	bhi.n	8003ece <UART_SetConfig+0x3fa>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0x348>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e5f 	.word	0x08003e5f
 8003e24:	08003e7d 	.word	0x08003e7d
 8003e28:	08003ecf 	.word	0x08003ecf
 8003e2c:	08003e99 	.word	0x08003e99
 8003e30:	08003ecf 	.word	0x08003ecf
 8003e34:	08003ecf 	.word	0x08003ecf
 8003e38:	08003ecf 	.word	0x08003ecf
 8003e3c:	08003eb7 	.word	0x08003eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7ff fa3a 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8003e44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	085a      	lsrs	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	61bb      	str	r3, [r7, #24]
        break;
 8003e5c:	e03a      	b.n	8003ed4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e5e:	f7ff fa4d 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8003e62:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	085a      	lsrs	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	441a      	add	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	61bb      	str	r3, [r7, #24]
        break;
 8003e7a:	e02b      	b.n	8003ed4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003e86:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6852      	ldr	r2, [r2, #4]
 8003e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	61bb      	str	r3, [r7, #24]
        break;
 8003e96:	e01d      	b.n	8003ed4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e98:	f7ff f998 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8003e9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	085a      	lsrs	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	441a      	add	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	61bb      	str	r3, [r7, #24]
        break;
 8003eb4:	e00e      	b.n	8003ed4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	61bb      	str	r3, [r7, #24]
        break;
 8003ecc:	e002      	b.n	8003ed4 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]
        break;
 8003ed2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b0f      	cmp	r3, #15
 8003ed8:	d908      	bls.n	8003eec <UART_SetConfig+0x418>
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d204      	bcs.n	8003eec <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	e001      	b.n	8003ef0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop

08003f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d01a      	beq.n	800401e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004006:	d10a      	bne.n	800401e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]
  }
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af02      	add	r7, sp, #8
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800405a:	f7fc fd5b 	bl	8000b14 <HAL_GetTick>
 800405e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b08      	cmp	r3, #8
 800406c:	d10e      	bne.n	800408c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800406e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f82a 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e020      	b.n	80040ce <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d10e      	bne.n	80040b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800409a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f814 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e00a      	b.n	80040ce <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e6:	e05d      	b.n	80041a4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ee:	d059      	beq.n	80041a4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f0:	f7fc fd10 	bl	8000b14 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d302      	bcc.n	8004106 <UART_WaitOnFlagUntilTimeout+0x30>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11b      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004114:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e042      	b.n	80041c4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d02b      	beq.n	80041a4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415a:	d123      	bne.n	80041a4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004164:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004174:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e00f      	b.n	80041c4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d092      	beq.n	80040e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <LL_EXTI_EnableIT_0_31+0x20>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4904      	ldr	r1, [pc, #16]	; (80041ec <LL_EXTI_EnableIT_0_31+0x20>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4313      	orrs	r3, r2
 80041de:	600b      	str	r3, [r1, #0]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40010400 	.word	0x40010400

080041f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <LL_EXTI_EnableIT_32_63+0x20>)
 80041fa:	6a1a      	ldr	r2, [r3, #32]
 80041fc:	4904      	ldr	r1, [pc, #16]	; (8004210 <LL_EXTI_EnableIT_32_63+0x20>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4313      	orrs	r3, r2
 8004202:	620b      	str	r3, [r1, #32]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	40010400 	.word	0x40010400

08004214 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <LL_EXTI_DisableIT_0_31+0x24>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	43db      	mvns	r3, r3
 8004224:	4904      	ldr	r1, [pc, #16]	; (8004238 <LL_EXTI_DisableIT_0_31+0x24>)
 8004226:	4013      	ands	r3, r2
 8004228:	600b      	str	r3, [r1, #0]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40010400 	.word	0x40010400

0800423c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <LL_EXTI_DisableIT_32_63+0x24>)
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	43db      	mvns	r3, r3
 800424c:	4904      	ldr	r1, [pc, #16]	; (8004260 <LL_EXTI_DisableIT_32_63+0x24>)
 800424e:	4013      	ands	r3, r2
 8004250:	620b      	str	r3, [r1, #32]
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40010400 	.word	0x40010400

08004264 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <LL_EXTI_EnableEvent_0_31+0x20>)
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	4904      	ldr	r1, [pc, #16]	; (8004284 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]

}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40010400 	.word	0x40010400

08004288 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004294:	4904      	ldr	r1, [pc, #16]	; (80042a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4313      	orrs	r3, r2
 800429a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40010400 	.word	0x40010400

080042ac <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	43db      	mvns	r3, r3
 80042bc:	4904      	ldr	r1, [pc, #16]	; (80042d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80042be:	4013      	ands	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40010400 	.word	0x40010400

080042d4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80042de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	43db      	mvns	r3, r3
 80042e4:	4904      	ldr	r1, [pc, #16]	; (80042f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010400 	.word	0x40010400

080042fc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	4904      	ldr	r1, [pc, #16]	; (800431c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]

}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40010400 	.word	0x40010400

08004320 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800432a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432c:	4904      	ldr	r1, [pc, #16]	; (8004340 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4313      	orrs	r3, r2
 8004332:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40010400 	.word	0x40010400

08004344 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	43db      	mvns	r3, r3
 8004354:	4904      	ldr	r1, [pc, #16]	; (8004368 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004356:	4013      	ands	r3, r2
 8004358:	608b      	str	r3, [r1, #8]

}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010400 	.word	0x40010400

0800436c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	43db      	mvns	r3, r3
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800437e:	4013      	ands	r3, r2
 8004380:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40010400 	.word	0x40010400

08004394 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	4904      	ldr	r1, [pc, #16]	; (80043b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60cb      	str	r3, [r1, #12]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40010400 	.word	0x40010400

080043b8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	4904      	ldr	r1, [pc, #16]	; (80043d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	40010400 	.word	0x40010400

080043dc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	4904      	ldr	r1, [pc, #16]	; (8004400 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	60cb      	str	r3, [r1, #12]
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010400 	.word	0x40010400

08004404 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	43db      	mvns	r3, r3
 8004414:	4904      	ldr	r1, [pc, #16]	; (8004428 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004416:	4013      	ands	r3, r2
 8004418:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010400 	.word	0x40010400

0800442c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	7a1b      	ldrb	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80c2 	beq.w	80045c6 <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d05b      	beq.n	8004502 <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7a5b      	ldrb	r3, [r3, #9]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d00e      	beq.n	8004470 <LL_EXTI_Init+0x44>
 8004452:	2b02      	cmp	r3, #2
 8004454:	d017      	beq.n	8004486 <LL_EXTI_Init+0x5a>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d120      	bne.n	800449c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ff24 	bl	80042ac <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff feaf 	bl	80041cc <LL_EXTI_EnableIT_0_31>
          break;
 800446e:	e018      	b.n	80044a2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fecd 	bl	8004214 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fef0 	bl	8004264 <LL_EXTI_EnableEvent_0_31>
          break;
 8004484:	e00d      	b.n	80044a2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fe9e 	bl	80041cc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fee5 	bl	8004264 <LL_EXTI_EnableEvent_0_31>
          break;
 800449a:	e002      	b.n	80044a2 <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
          break;
 80044a0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	7a9b      	ldrb	r3, [r3, #10]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02b      	beq.n	8004502 <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	7a9b      	ldrb	r3, [r3, #10]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d00e      	beq.n	80044d0 <LL_EXTI_Init+0xa4>
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d017      	beq.n	80044e6 <LL_EXTI_Init+0xba>
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d120      	bne.n	80044fc <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff ff8c 	bl	80043dc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff17 	bl	80042fc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80044ce:	e019      	b.n	8004504 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff ff35 	bl	8004344 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff ff58 	bl	8004394 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80044e4:	e00e      	b.n	8004504 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff06 	bl	80042fc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff4d 	bl	8004394 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80044fa:	e003      	b.n	8004504 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
            break;
 8004500:	e000      	b.n	8004504 <LL_EXTI_Init+0xd8>
        }
      }
 8004502:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d071      	beq.n	80045f0 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7a5b      	ldrb	r3, [r3, #9]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d00e      	beq.n	8004532 <LL_EXTI_Init+0x106>
 8004514:	2b02      	cmp	r3, #2
 8004516:	d017      	beq.n	8004548 <LL_EXTI_Init+0x11c>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d120      	bne.n	800455e <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fed7 	bl	80042d4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fe60 	bl	80041f0 <LL_EXTI_EnableIT_32_63>
          break;
 8004530:	e018      	b.n	8004564 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fe80 	bl	800423c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fea1 	bl	8004288 <LL_EXTI_EnableEvent_32_63>
          break;
 8004546:	e00d      	b.n	8004564 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fe4f 	bl	80041f0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fe96 	bl	8004288 <LL_EXTI_EnableEvent_32_63>
          break;
 800455c:	e002      	b.n	8004564 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	73fb      	strb	r3, [r7, #15]
          break;
 8004562:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7a9b      	ldrb	r3, [r3, #10]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d041      	beq.n	80045f0 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	7a9b      	ldrb	r3, [r3, #10]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d00e      	beq.n	8004592 <LL_EXTI_Init+0x166>
 8004574:	2b03      	cmp	r3, #3
 8004576:	d017      	beq.n	80045a8 <LL_EXTI_Init+0x17c>
 8004578:	2b01      	cmp	r3, #1
 800457a:	d120      	bne.n	80045be <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff ff3f 	bl	8004404 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fec8 	bl	8004320 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004590:	e02f      	b.n	80045f2 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fee8 	bl	800436c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff09 	bl	80043b8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80045a6:	e024      	b.n	80045f2 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff feb7 	bl	8004320 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fefe 	bl	80043b8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80045bc:	e019      	b.n	80045f2 <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
            break;
 80045c2:	bf00      	nop
 80045c4:	e015      	b.n	80045f2 <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fe22 	bl	8004214 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fe69 	bl	80042ac <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fe2c 	bl	800423c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fe73 	bl	80042d4 <LL_EXTI_DisableEvent_32_63>
 80045ee:	e000      	b.n	80045f2 <LL_EXTI_Init+0x1c6>
      }
 80045f0:	bf00      	nop
#endif
  }
  return status;
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <LL_GPIO_SetPinMode>:
{
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	; 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	613b      	str	r3, [r7, #16]
  return result;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	2103      	movs	r1, #3
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	401a      	ands	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	61bb      	str	r3, [r7, #24]
  return result;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	fab3 f383 	clz	r3, r3
 800463e:	b2db      	uxtb	r3, r3
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	fa01 f303 	lsl.w	r3, r1, r3
 8004648:	431a      	orrs	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	601a      	str	r2, [r3, #0]
}
 800464e:	bf00      	nop
 8004650:	3724      	adds	r7, #36	; 0x24
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <LL_GPIO_SetPinOutputType>:
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	43db      	mvns	r3, r3
 800466e:	401a      	ands	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	431a      	orrs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	605a      	str	r2, [r3, #4]
}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_GPIO_SetPinSpeed>:
{
 800468a:	b480      	push	{r7}
 800468c:	b089      	sub	sp, #36	; 0x24
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	613b      	str	r3, [r7, #16]
  return result;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	fab3 f383 	clz	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	2103      	movs	r1, #3
 80046b2:	fa01 f303 	lsl.w	r3, r1, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	401a      	ands	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	fa93 f3a3 	rbit	r3, r3
 80046c4:	61bb      	str	r3, [r7, #24]
  return result;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	fab3 f383 	clz	r3, r3
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
 80046d6:	431a      	orrs	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	609a      	str	r2, [r3, #8]
}
 80046dc:	bf00      	nop
 80046de:	3724      	adds	r7, #36	; 0x24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <LL_GPIO_SetPinPull>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	fa93 f3a3 	rbit	r3, r3
 8004702:	613b      	str	r3, [r7, #16]
  return result;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	fab3 f383 	clz	r3, r3
 800470a:	b2db      	uxtb	r3, r3
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	2103      	movs	r1, #3
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	401a      	ands	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	fa93 f3a3 	rbit	r3, r3
 8004722:	61bb      	str	r3, [r7, #24]
  return result;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	fa01 f303 	lsl.w	r3, r1, r3
 8004734:	431a      	orrs	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	60da      	str	r2, [r3, #12]
}
 800473a:	bf00      	nop
 800473c:	3724      	adds	r7, #36	; 0x24
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_GPIO_SetAFPin_0_7>:
{
 8004746:	b480      	push	{r7}
 8004748:	b089      	sub	sp, #36	; 0x24
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1a      	ldr	r2, [r3, #32]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	fa93 f3a3 	rbit	r3, r3
 8004760:	613b      	str	r3, [r7, #16]
  return result;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	b2db      	uxtb	r3, r3
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	210f      	movs	r1, #15
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	401a      	ands	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	61bb      	str	r3, [r7, #24]
  return result;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	fab3 f383 	clz	r3, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	fa01 f303 	lsl.w	r3, r1, r3
 8004792:	431a      	orrs	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	621a      	str	r2, [r3, #32]
}
 8004798:	bf00      	nop
 800479a:	3724      	adds	r7, #36	; 0x24
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <LL_GPIO_SetAFPin_8_15>:
{
 80047a4:	b480      	push	{r7}
 80047a6:	b089      	sub	sp, #36	; 0x24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	613b      	str	r3, [r7, #16]
  return result;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	fab3 f383 	clz	r3, r3
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	210f      	movs	r1, #15
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	401a      	ands	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	fa93 f3a3 	rbit	r3, r3
 80047e2:	61bb      	str	r3, [r7, #24]
  return result;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80047fa:	bf00      	nop
 80047fc:	3724      	adds	r7, #36	; 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b088      	sub	sp, #32
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	fa93 f3a3 	rbit	r3, r3
 800481c:	613b      	str	r3, [r7, #16]
  return result;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004828:	e049      	b.n	80048be <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	2101      	movs	r1, #1
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	fa01 f303 	lsl.w	r3, r1, r3
 8004836:	4013      	ands	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d03b      	beq.n	80048b8 <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	461a      	mov	r2, r3
 8004846:	69b9      	ldr	r1, [r7, #24]
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff fed7 	bl	80045fc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d003      	beq.n	800485e <LL_GPIO_Init+0x58>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d106      	bne.n	800486c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	461a      	mov	r2, r3
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ff0f 	bl	800468a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	461a      	mov	r2, r3
 8004872:	69b9      	ldr	r1, [r7, #24]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff37 	bl	80046e8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d11a      	bne.n	80048b8 <LL_GPIO_Init+0xb2>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	60bb      	str	r3, [r7, #8]
  return result;
 800488e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b07      	cmp	r3, #7
 8004898:	d807      	bhi.n	80048aa <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	461a      	mov	r2, r3
 80048a0:	69b9      	ldr	r1, [r7, #24]
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff ff4f 	bl	8004746 <LL_GPIO_SetAFPin_0_7>
 80048a8:	e006      	b.n	80048b8 <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	461a      	mov	r2, r3
 80048b0:	69b9      	ldr	r1, [r7, #24]
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ff76 	bl	80047a4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	3301      	adds	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1ae      	bne.n	800482a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d003      	beq.n	80048dc <LL_GPIO_Init+0xd6>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d107      	bne.n	80048ec <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff feb7 	bl	800465a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <__libc_init_array>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	4e0d      	ldr	r6, [pc, #52]	; (8004930 <__libc_init_array+0x38>)
 80048fc:	4c0d      	ldr	r4, [pc, #52]	; (8004934 <__libc_init_array+0x3c>)
 80048fe:	1ba4      	subs	r4, r4, r6
 8004900:	10a4      	asrs	r4, r4, #2
 8004902:	2500      	movs	r5, #0
 8004904:	42a5      	cmp	r5, r4
 8004906:	d109      	bne.n	800491c <__libc_init_array+0x24>
 8004908:	4e0b      	ldr	r6, [pc, #44]	; (8004938 <__libc_init_array+0x40>)
 800490a:	4c0c      	ldr	r4, [pc, #48]	; (800493c <__libc_init_array+0x44>)
 800490c:	f000 f820 	bl	8004950 <_init>
 8004910:	1ba4      	subs	r4, r4, r6
 8004912:	10a4      	asrs	r4, r4, #2
 8004914:	2500      	movs	r5, #0
 8004916:	42a5      	cmp	r5, r4
 8004918:	d105      	bne.n	8004926 <__libc_init_array+0x2e>
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004920:	4798      	blx	r3
 8004922:	3501      	adds	r5, #1
 8004924:	e7ee      	b.n	8004904 <__libc_init_array+0xc>
 8004926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800492a:	4798      	blx	r3
 800492c:	3501      	adds	r5, #1
 800492e:	e7f2      	b.n	8004916 <__libc_init_array+0x1e>
 8004930:	080049a0 	.word	0x080049a0
 8004934:	080049a0 	.word	0x080049a0
 8004938:	080049a0 	.word	0x080049a0
 800493c:	080049a4 	.word	0x080049a4

08004940 <memset>:
 8004940:	4402      	add	r2, r0
 8004942:	4603      	mov	r3, r0
 8004944:	4293      	cmp	r3, r2
 8004946:	d100      	bne.n	800494a <memset+0xa>
 8004948:	4770      	bx	lr
 800494a:	f803 1b01 	strb.w	r1, [r3], #1
 800494e:	e7f9      	b.n	8004944 <memset+0x4>

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
