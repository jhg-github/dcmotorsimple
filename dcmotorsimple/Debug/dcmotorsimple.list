
dcmotorsimple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005230  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053fc  080053fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080053fc  080053fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053fc  080053fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08005410  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08005410  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002553  00000000  00000000  00030026  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  00032580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  00033518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002cd0  00000000  00000000  00034368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0cf  00000000  00000000  00037038  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bed76  00000000  00000000  00045107  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103e7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e8  00000000  00000000  00103ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080053ac 	.word	0x080053ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080053ac 	.word	0x080053ac

080001d4 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	463b      	mov	r3, r7
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80001ea:	4b28      	ldr	r3, [pc, #160]	; (800028c <MX_ADC2_Init+0xb8>)
 80001ec:	4a28      	ldr	r2, [pc, #160]	; (8000290 <MX_ADC2_Init+0xbc>)
 80001ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80001f0:	4b26      	ldr	r3, [pc, #152]	; (800028c <MX_ADC2_Init+0xb8>)
 80001f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80001f6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80001f8:	4b24      	ldr	r3, [pc, #144]	; (800028c <MX_ADC2_Init+0xb8>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001fe:	4b23      	ldr	r3, [pc, #140]	; (800028c <MX_ADC2_Init+0xb8>)
 8000200:	2200      	movs	r2, #0
 8000202:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000204:	4b21      	ldr	r3, [pc, #132]	; (800028c <MX_ADC2_Init+0xb8>)
 8000206:	2200      	movs	r2, #0
 8000208:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800020a:	4b20      	ldr	r3, [pc, #128]	; (800028c <MX_ADC2_Init+0xb8>)
 800020c:	2200      	movs	r2, #0
 800020e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000212:	4b1e      	ldr	r3, [pc, #120]	; (800028c <MX_ADC2_Init+0xb8>)
 8000214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000218:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800021a:	4b1c      	ldr	r3, [pc, #112]	; (800028c <MX_ADC2_Init+0xb8>)
 800021c:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8000220:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000222:	4b1a      	ldr	r3, [pc, #104]	; (800028c <MX_ADC2_Init+0xb8>)
 8000224:	2200      	movs	r2, #0
 8000226:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <MX_ADC2_Init+0xb8>)
 800022a:	2201      	movs	r2, #1
 800022c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <MX_ADC2_Init+0xb8>)
 8000230:	2200      	movs	r2, #0
 8000232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_ADC2_Init+0xb8>)
 8000238:	2204      	movs	r2, #4
 800023a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800023c:	4b13      	ldr	r3, [pc, #76]	; (800028c <MX_ADC2_Init+0xb8>)
 800023e:	2200      	movs	r2, #0
 8000240:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <MX_ADC2_Init+0xb8>)
 8000244:	2200      	movs	r2, #0
 8000246:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000248:	4810      	ldr	r0, [pc, #64]	; (800028c <MX_ADC2_Init+0xb8>)
 800024a:	f000 fca9 	bl	8000ba0 <HAL_ADC_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000254:	f000 fa52 	bl	80006fc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000258:	2301      	movs	r3, #1
 800025a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800025c:	2301      	movs	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000264:	2301      	movs	r3, #1
 8000266:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000270:	463b      	mov	r3, r7
 8000272:	4619      	mov	r1, r3
 8000274:	4805      	ldr	r0, [pc, #20]	; (800028c <MX_ADC2_Init+0xb8>)
 8000276:	f001 f9c1 	bl	80015fc <HAL_ADC_ConfigChannel>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000280:	f000 fa3c 	bl	80006fc <Error_Handler>
  }

}
 8000284:	bf00      	nop
 8000286:	3718      	adds	r7, #24
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000028 	.word	0x20000028
 8000290:	50000100 	.word	0x50000100

08000294 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a19      	ldr	r2, [pc, #100]	; (8000318 <HAL_ADC_MspInit+0x84>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d12c      	bne.n	8000310 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <HAL_ADC_MspInit+0x88>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a18      	ldr	r2, [pc, #96]	; (800031c <HAL_ADC_MspInit+0x88>)
 80002bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c0:	6153      	str	r3, [r2, #20]
 80002c2:	4b16      	ldr	r3, [pc, #88]	; (800031c <HAL_ADC_MspInit+0x88>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <HAL_ADC_MspInit+0x88>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a12      	ldr	r2, [pc, #72]	; (800031c <HAL_ADC_MspInit+0x88>)
 80002d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d8:	6153      	str	r3, [r2, #20]
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <HAL_ADC_MspInit+0x88>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80002e6:	2310      	movs	r3, #16
 80002e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ea:	2303      	movs	r3, #3
 80002ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4619      	mov	r1, r3
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fc:	f001 fddc 	bl	8001eb8 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	2100      	movs	r1, #0
 8000304:	2012      	movs	r0, #18
 8000306:	f001 fda0 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800030a:	2012      	movs	r0, #18
 800030c:	f001 fdb9 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000310:	bf00      	nop
 8000312:	3728      	adds	r7, #40	; 0x28
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	50000100 	.word	0x50000100
 800031c:	40021000 	.word	0x40021000

08000320 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800032a:	4a13      	ldr	r2, [pc, #76]	; (8000378 <LL_SYSCFG_SetEXTISource+0x58>)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	3302      	adds	r3, #2
 8000332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	0c1b      	lsrs	r3, r3, #16
 800033a:	43db      	mvns	r3, r3
 800033c:	ea02 0103 	and.w	r1, r2, r3
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	0c1b      	lsrs	r3, r3, #16
 8000344:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	fa93 f3a3 	rbit	r3, r3
 800034c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	fab3 f383 	clz	r3, r3
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	fa03 f202 	lsl.w	r2, r3, r2
 800035e:	4806      	ldr	r0, [pc, #24]	; (8000378 <LL_SYSCFG_SetEXTISource+0x58>)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	430a      	orrs	r2, r1
 8000366:	3302      	adds	r3, #2
 8000368:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800036c:	bf00      	nop
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40010000 	.word	0x40010000

0800037c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800037c:	b480      	push	{r7}
 800037e:	b089      	sub	sp, #36	; 0x24
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa93 f3a3 	rbit	r3, r3
 8000396:	613b      	str	r3, [r7, #16]
  return result;
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	fab3 f383 	clz	r3, r3
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	2103      	movs	r1, #3
 80003a4:	fa01 f303 	lsl.w	r3, r1, r3
 80003a8:	43db      	mvns	r3, r3
 80003aa:	401a      	ands	r2, r3
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	fa93 f3a3 	rbit	r3, r3
 80003b6:	61bb      	str	r3, [r7, #24]
  return result;
 80003b8:	69bb      	ldr	r3, [r7, #24]
 80003ba:	fab3 f383 	clz	r3, r3
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	6879      	ldr	r1, [r7, #4]
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	431a      	orrs	r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	bf00      	nop
 80003d0:	3724      	adds	r7, #36	; 0x24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003da:	b480      	push	{r7}
 80003dc:	b089      	sub	sp, #36	; 0x24
 80003de:	af00      	add	r7, sp, #0
 80003e0:	60f8      	str	r0, [r7, #12]
 80003e2:	60b9      	str	r1, [r7, #8]
 80003e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	68da      	ldr	r2, [r3, #12]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	fa93 f3a3 	rbit	r3, r3
 80003f4:	613b      	str	r3, [r7, #16]
  return result;
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	fab3 f383 	clz	r3, r3
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	2103      	movs	r1, #3
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	43db      	mvns	r3, r3
 8000408:	401a      	ands	r2, r3
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	fa93 f3a3 	rbit	r3, r3
 8000414:	61bb      	str	r3, [r7, #24]
  return result;
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	fab3 f383 	clz	r3, r3
 800041c:	b2db      	uxtb	r3, r3
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	6879      	ldr	r1, [r7, #4]
 8000422:	fa01 f303 	lsl.w	r3, r1, r3
 8000426:	431a      	orrs	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	60da      	str	r2, [r3, #12]
}
 800042c:	bf00      	nop
 800042e:	3724      	adds	r7, #36	; 0x24
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	683a      	ldr	r2, [r7, #0]
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	4907      	ldr	r1, [pc, #28]	; (8000480 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4313      	orrs	r3, r2
 8000466:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4013      	ands	r3, r2
 8000470:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000472:	68fb      	ldr	r3, [r7, #12]
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800048a:	f107 031c 	add.w	r3, r7, #28
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
 80004a2:	611a      	str	r2, [r3, #16]
 80004a4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80004a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80004aa:	f7ff ffd3 	bl	8000454 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80004ae:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80004b2:	f7ff ffcf 	bl	8000454 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004ba:	f7ff ffcb 	bl	8000454 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80004be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80004c2:	f7ff ffc7 	bl	8000454 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(EN_B_GPIO_Port, EN_B_Pin);
 80004c6:	2102      	movs	r1, #2
 80004c8:	4827      	ldr	r0, [pc, #156]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004ca:	f7ff ffb5 	bl	8000438 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LD2_Pin|DEBUG_PIN_Pin);
 80004ce:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f7ff ffaf 	bl	8000438 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80004da:	4924      	ldr	r1, [pc, #144]	; (800056c <MX_GPIO_Init+0xe8>)
 80004dc:	2002      	movs	r0, #2
 80004de:	f7ff ff1f 	bl	8000320 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e8:	481f      	ldr	r0, [pc, #124]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004ea:	f7ff ff76 	bl	80003da <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	481c      	ldr	r0, [pc, #112]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004f6:	f7ff ff41 	bl	800037c <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80004fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004fe:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000500:	2300      	movs	r3, #0
 8000502:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000504:	2301      	movs	r3, #1
 8000506:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800050a:	2300      	movs	r3, #0
 800050c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000510:	2302      	movs	r3, #2
 8000512:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fcb4 	bl	8004e88 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = EN_B_Pin;
 8000520:	2302      	movs	r3, #2
 8000522:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000524:	2301      	movs	r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EN_B_GPIO_Port, &GPIO_InitStruct);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4619      	mov	r1, r3
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <MX_GPIO_Init+0xe4>)
 800053a:	f004 fe92 	bl	8005262 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin|DEBUG_PIN_Pin;
 800053e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000542:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000544:	2301      	movs	r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4619      	mov	r1, r3
 8000558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055c:	f004 fe81 	bl	8005262 <LL_GPIO_Init>

}
 8000560:	bf00      	nop
 8000562:	3728      	adds	r7, #40	; 0x28
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	48000800 	.word	0x48000800
 800056c:	00f00003 	.word	0x00f00003

08000570 <LL_GPIO_SetOutputPin>:
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	619a      	str	r2, [r3, #24]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <LL_GPIO_ResetOutputPin>:
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <test_pulsePWM>:
//		LL_GPIO_ResetOutputPin(DEBUG_PIN_GPIO_Port,DEBUG_PIN_Pin);
//		LL_GPIO_ResetOutputPin(IN1_B_GPIO_Port, IN1_B_Pin);
//	}
//}

void test_pulsePWM(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(EN_B_GPIO_Port, EN_B_Pin);
 80005ac:	2102      	movs	r1, #2
 80005ae:	4817      	ldr	r0, [pc, #92]	; (800060c <test_pulsePWM+0x64>)
 80005b0:	f7ff ffde 	bl	8000570 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(IN1_B_GPIO_Port, IN1_B_Pin);
 80005b4:	2101      	movs	r1, #1
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f7ff ffe7 	bl	800058c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(IN2_B_GPIO_Port, IN2_B_Pin);
 80005be:	2102      	movs	r1, #2
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f7ff ffe2 	bl	800058c <LL_GPIO_ResetOutputPin>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <test_pulsePWM+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <test_pulsePWM+0x68>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2200      	movs	r2, #0
 80005d6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005d8:	2100      	movs	r1, #0
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <test_pulsePWM+0x68>)
 80005dc:	f003 f98c 	bl	80038f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005e0:	2104      	movs	r1, #4
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <test_pulsePWM+0x68>)
 80005e4:	f003 f988 	bl	80038f8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1100);
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <test_pulsePWM+0x68>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f240 424c 	movw	r2, #1100	; 0x44c
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1100);
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <test_pulsePWM+0x68>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f240 424c 	movw	r2, #1100	; 0x44c
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38
	LL_GPIO_SetOutputPin(DEBUG_PIN_GPIO_Port,DEBUG_PIN_Pin);
 80005fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f7ff ffb4 	bl	8000570 <LL_GPIO_SetOutputPin>
//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 900);
//		LL_GPIO_ResetOutputPin(IN1_B_GPIO_Port, IN1_B_Pin);
//		LL_GPIO_ResetOutputPin(IN2_B_GPIO_Port, IN2_B_Pin);
//		LL_GPIO_ResetOutputPin(DEBUG_PIN_GPIO_Port,DEBUG_PIN_Pin);
//	}
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	48000800 	.word	0x48000800
 8000610:	20000078 	.word	0x20000078

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fa3e 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f80c 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f7ff ff30 	bl	8000484 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000624:	f000 f99c 	bl	8000960 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000628:	f7ff fdd4 	bl	80001d4 <MX_ADC2_Init>
  MX_TIM2_Init();
 800062c:	f000 f8e0 	bl	80007f0 <MX_TIM2_Init>
  //test_PwmSimple();
  //test_PwmADCSimple();
//  test_pid();
//  test_PWMBipolar();
//  test_pulse();
  test_pulsePWM();
 8000630:	f7ff ffba 	bl	80005a8 <test_pulsePWM>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while(1){
 8000634:	e7fe      	b.n	8000634 <main+0x20>
	...

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b0a6      	sub	sp, #152	; 0x98
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000642:	2228      	movs	r2, #40	; 0x28
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fea8 	bl	800539c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2258      	movs	r2, #88	; 0x58
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fe9a 	bl	800539c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000680:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000684:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fd98 	bl	80021cc <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006a2:	f000 f82b 	bl	80006fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fc98 	bl	8002ff8 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ce:	f000 f815 	bl	80006fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <SystemClock_Config+0xc0>)
 80006d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80006da:	2300      	movs	r3, #0
 80006dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 febf 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006ec:	f000 f806 	bl	80006fc <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3798      	adds	r7, #152	; 0x98
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	00100002 	.word	0x00100002

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x44>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x44>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6193      	str	r3, [r2, #24]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x44>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x44>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x44>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	61d3      	str	r3, [r2, #28]
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x44>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a8:	f000 f9bc 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
//	ADCValue = HAL_ADC_GetValue(&hadc2);
//	pid(ADCValue);
//	LL_GPIO_ResetOutputPin(DEBUG_PIN_GPIO_Port,DEBUG_PIN_Pin);

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <ADC1_2_IRQHandler+0x10>)
 80007b6:	f000 fbed 	bl	8000f94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000028 	.word	0x20000028

080007c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <SystemInit+0x28>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ce:	4a07      	ldr	r2, [pc, #28]	; (80007ec <SystemInit+0x28>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <SystemInit+0x28>)
 80007da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007de:	609a      	str	r2, [r3, #8]
#endif
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
 8000810:	615a      	str	r2, [r3, #20]
 8000812:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <MX_TIM2_Init+0xc8>)
 8000816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800081c:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_TIM2_Init+0xc8>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <MX_TIM2_Init+0xc8>)
 8000824:	2220      	movs	r2, #32
 8000826:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1800-1;
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_TIM2_Init+0xc8>)
 800082a:	f240 7207 	movw	r2, #1799	; 0x707
 800082e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_TIM2_Init+0xc8>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_TIM2_Init+0xc8>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800083c:	481e      	ldr	r0, [pc, #120]	; (80008b8 <MX_TIM2_Init+0xc8>)
 800083e:	f003 f82f 	bl	80038a0 <HAL_TIM_PWM_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000848:	f7ff ff58 	bl	80006fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800084c:	2320      	movs	r3, #32
 800084e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <MX_TIM2_Init+0xc8>)
 800085c:	f003 fd8e 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000866:	f7ff ff49 	bl	80006fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086a:	2360      	movs	r3, #96	; 0x60
 800086c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_TIM2_Init+0xc8>)
 8000882:	f003 f899 	bl	80039b8 <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800088c:	f7ff ff36 	bl	80006fc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000890:	2302      	movs	r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	2204      	movs	r2, #4
 8000898:	4619      	mov	r1, r3
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <MX_TIM2_Init+0xc8>)
 800089c:	f003 f88c 	bl	80039b8 <HAL_TIM_PWM_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80008a6:	f7ff ff29 	bl	80006fc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80008aa:	4803      	ldr	r0, [pc, #12]	; (80008b8 <MX_TIM2_Init+0xc8>)
 80008ac:	f000 f824 	bl	80008f8 <HAL_TIM_MspPostInit>

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000078 	.word	0x20000078

080008bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008cc:	d10b      	bne.n	80008e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_TIM_PWM_MspInit+0x38>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_TIM_PWM_MspInit+0x38>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_TIM_PWM_MspInit+0x38>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000918:	d11c      	bne.n	8000954 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_TIM_MspPostInit+0x64>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_TIM_MspPostInit+0x64>)
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_TIM_MspPostInit+0x64>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000932:	2303      	movs	r3, #3
 8000934:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f001 fab2 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000

08000960 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <MX_USART2_UART_Init+0x5c>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 80009a4:	f003 fd76 	bl	8004494 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ae:	f7ff fea5 	bl	80006fc <Error_Handler>
  }

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000b8 	.word	0x200000b8
 80009bc:	40004400 	.word	0x40004400

080009c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <HAL_UART_MspInit+0x7c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d128      	bne.n	8000a34 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_UART_MspInit+0x80>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <HAL_UART_MspInit+0x80>)
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_UART_MspInit+0x80>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_UART_MspInit+0x80>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <HAL_UART_MspInit+0x80>)
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	6153      	str	r3, [r2, #20]
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_UART_MspInit+0x80>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a12:	230c      	movs	r3, #12
 8000a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a22:	2307      	movs	r3, #7
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f001 fa42 	bl	8001eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40004400 	.word	0x40004400
 8000a40:	40021000 	.word	0x40021000

08000a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a4a:	e003      	b.n	8000a54 <LoopCopyDataInit>

08000a4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a52:	3104      	adds	r1, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a54:	480b      	ldr	r0, [pc, #44]	; (8000a84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a5c:	d3f6      	bcc.n	8000a4c <CopyDataInit>
	ldr	r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a60:	e002      	b.n	8000a68 <LoopFillZerobss>

08000a62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a64:	f842 3b04 	str.w	r3, [r2], #4

08000a68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <LoopForever+0x16>)
	cmp	r2, r3
 8000a6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a6c:	d3f9      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a6e:	f7ff fea9 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f004 fc6f 	bl	8005354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a76:	f7ff fdcd 	bl	8000614 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a7c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000a80:	08005404 	.word	0x08005404
	ldr	r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a88:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a8c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a90:	2000013c 	.word	0x2000013c

08000a94 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC3_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x28>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x28>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f001 f9c3 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff fe2a 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 f9db 	bl	8001e9e <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b00:	f001 f9a3 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000138 	.word	0x20000138

08000b4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000138 	.word	0x20000138

08000b64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09a      	sub	sp, #104	; 0x68
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e1e3      	b.n	8000f88 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d176      	bne.n	8000cc0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d152      	bne.n	8000c80 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fb4d 	bl	8000294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d13b      	bne.n	8000c80 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 ffe3 	bl	8001bd4 <ADC_Disable>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d12f      	bne.n	8000c80 <HAL_ADC_Init+0xe0>
 8000c20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d12b      	bne.n	8000c80 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c30:	f023 0302 	bic.w	r3, r3, #2
 8000c34:	f043 0202 	orr.w	r2, r3, #2
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c4a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c5a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c5c:	4b92      	ldr	r3, [pc, #584]	; (8000ea8 <HAL_ADC_Init+0x308>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a92      	ldr	r2, [pc, #584]	; (8000eac <HAL_ADC_Init+0x30c>)
 8000c62:	fba2 2303 	umull	r2, r3, r2, r3
 8000c66:	0c9a      	lsrs	r2, r3, #18
 8000c68:	4613      	mov	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c72:	e002      	b.n	8000c7a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f9      	bne.n	8000c74 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c9c:	d110      	bne.n	8000cc0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f023 0312 	bic.w	r3, r3, #18
 8000ca6:	f043 0210 	orr.w	r2, r3, #16
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f043 0201 	orr.w	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f040 8150 	bne.w	8000f6e <HAL_ADC_Init+0x3ce>
 8000cce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 814b 	bne.w	8000f6e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8143 	bne.w	8000f6e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cf0:	f043 0202 	orr.w	r2, r3, #2
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d00:	d004      	beq.n	8000d0c <HAL_ADC_Init+0x16c>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a6a      	ldr	r2, [pc, #424]	; (8000eb0 <HAL_ADC_Init+0x310>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d101      	bne.n	8000d10 <HAL_ADC_Init+0x170>
 8000d0c:	4b69      	ldr	r3, [pc, #420]	; (8000eb4 <HAL_ADC_Init+0x314>)
 8000d0e:	e000      	b.n	8000d12 <HAL_ADC_Init+0x172>
 8000d10:	4b69      	ldr	r3, [pc, #420]	; (8000eb8 <HAL_ADC_Init+0x318>)
 8000d12:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d1c:	d102      	bne.n	8000d24 <HAL_ADC_Init+0x184>
 8000d1e:	4b64      	ldr	r3, [pc, #400]	; (8000eb0 <HAL_ADC_Init+0x310>)
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e01a      	b.n	8000d5a <HAL_ADC_Init+0x1ba>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a61      	ldr	r2, [pc, #388]	; (8000eb0 <HAL_ADC_Init+0x310>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d103      	bne.n	8000d36 <HAL_ADC_Init+0x196>
 8000d2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	e011      	b.n	8000d5a <HAL_ADC_Init+0x1ba>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a60      	ldr	r2, [pc, #384]	; (8000ebc <HAL_ADC_Init+0x31c>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d102      	bne.n	8000d46 <HAL_ADC_Init+0x1a6>
 8000d40:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <HAL_ADC_Init+0x320>)
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	e009      	b.n	8000d5a <HAL_ADC_Init+0x1ba>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a5d      	ldr	r2, [pc, #372]	; (8000ec0 <HAL_ADC_Init+0x320>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d102      	bne.n	8000d56 <HAL_ADC_Init+0x1b6>
 8000d50:	4b5a      	ldr	r3, [pc, #360]	; (8000ebc <HAL_ADC_Init+0x31c>)
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e001      	b.n	8000d5a <HAL_ADC_Init+0x1ba>
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d108      	bne.n	8000d7a <HAL_ADC_Init+0x1da>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_ADC_Init+0x1da>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <HAL_ADC_Init+0x1dc>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d11c      	bne.n	8000dba <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d80:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d010      	beq.n	8000da8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d107      	bne.n	8000da2 <HAL_ADC_Init+0x202>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <HAL_ADC_Init+0x202>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_ADC_Init+0x204>
 8000da2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d108      	bne.n	8000dba <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	431a      	orrs	r2, r3
 8000db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000db8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7e5b      	ldrb	r3, [r3, #25]
 8000dbe:	035b      	lsls	r3, r3, #13
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000dc4:	2a01      	cmp	r2, #1
 8000dc6:	d002      	beq.n	8000dce <HAL_ADC_Init+0x22e>
 8000dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dcc:	e000      	b.n	8000dd0 <HAL_ADC_Init+0x230>
 8000dce:	2200      	movs	r2, #0
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000de0:	4313      	orrs	r3, r2
 8000de2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d11b      	bne.n	8000e26 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7e5b      	ldrb	r3, [r3, #25]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d109      	bne.n	8000e0a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	045a      	lsls	r2, r3, #17
 8000dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e00:	4313      	orrs	r3, r2
 8000e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e06:	663b      	str	r3, [r7, #96]	; 0x60
 8000e08:	e00d      	b.n	8000e26 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e12:	f043 0220 	orr.w	r2, r3, #32
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f043 0201 	orr.w	r2, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d054      	beq.n	8000ed8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <HAL_ADC_Init+0x31c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d004      	beq.n	8000e42 <HAL_ADC_Init+0x2a2>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a20      	ldr	r2, [pc, #128]	; (8000ec0 <HAL_ADC_Init+0x320>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d140      	bne.n	8000ec4 <HAL_ADC_Init+0x324>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000e4a:	d02a      	beq.n	8000ea2 <HAL_ADC_Init+0x302>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e54:	d022      	beq.n	8000e9c <HAL_ADC_Init+0x2fc>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000e5e:	d01a      	beq.n	8000e96 <HAL_ADC_Init+0x2f6>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e64:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000e68:	d012      	beq.n	8000e90 <HAL_ADC_Init+0x2f0>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000e72:	d00a      	beq.n	8000e8a <HAL_ADC_Init+0x2ea>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000e7c:	d002      	beq.n	8000e84 <HAL_ADC_Init+0x2e4>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e82:	e023      	b.n	8000ecc <HAL_ADC_Init+0x32c>
 8000e84:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e88:	e020      	b.n	8000ecc <HAL_ADC_Init+0x32c>
 8000e8a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e8e:	e01d      	b.n	8000ecc <HAL_ADC_Init+0x32c>
 8000e90:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e94:	e01a      	b.n	8000ecc <HAL_ADC_Init+0x32c>
 8000e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9a:	e017      	b.n	8000ecc <HAL_ADC_Init+0x32c>
 8000e9c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000ea0:	e014      	b.n	8000ecc <HAL_ADC_Init+0x32c>
 8000ea2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ea6:	e011      	b.n	8000ecc <HAL_ADC_Init+0x32c>
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	431bde83 	.word	0x431bde83
 8000eb0:	50000100 	.word	0x50000100
 8000eb4:	50000300 	.word	0x50000300
 8000eb8:	50000700 	.word	0x50000700
 8000ebc:	50000400 	.word	0x50000400
 8000ec0:	50000500 	.word	0x50000500
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d114      	bne.n	8000f10 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ef4:	f023 0302 	bic.w	r3, r3, #2
 8000ef8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7e1b      	ldrb	r3, [r3, #24]
 8000efe:	039a      	lsls	r2, r3, #14
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <HAL_ADC_Init+0x3f0>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f20:	430b      	orrs	r3, r1
 8000f22:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10c      	bne.n	8000f46 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f023 010f 	bic.w	r1, r3, #15
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	631a      	str	r2, [r3, #48]	; 0x30
 8000f44:	e007      	b.n	8000f56 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 020f 	bic.w	r2, r2, #15
 8000f54:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f023 0303 	bic.w	r3, r3, #3
 8000f64:	f043 0201 	orr.w	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f6c:	e00a      	b.n	8000f84 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f023 0312 	bic.w	r3, r3, #18
 8000f76:	f043 0210 	orr.w	r2, r3, #16
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3768      	adds	r7, #104	; 0x68
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	fff0c007 	.word	0xfff0c007

08000f94 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d106      	bne.n	8000fc4 <HAL_ADC_IRQHandler+0x30>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d00f      	beq.n	8000fe4 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	f040 80c0 	bne.w	8001154 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	f040 80b8 	bne.w	8001154 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d105      	bne.n	8000ffc <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001004:	d004      	beq.n	8001010 <HAL_ADC_IRQHandler+0x7c>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a95      	ldr	r2, [pc, #596]	; (8001260 <HAL_ADC_IRQHandler+0x2cc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d106      	bne.n	800101e <HAL_ADC_IRQHandler+0x8a>
 8001010:	4b94      	ldr	r3, [pc, #592]	; (8001264 <HAL_ADC_IRQHandler+0x2d0>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 031f 	and.w	r3, r3, #31
 8001018:	2b00      	cmp	r3, #0
 800101a:	d03e      	beq.n	800109a <HAL_ADC_IRQHandler+0x106>
 800101c:	e005      	b.n	800102a <HAL_ADC_IRQHandler+0x96>
 800101e:	4b92      	ldr	r3, [pc, #584]	; (8001268 <HAL_ADC_IRQHandler+0x2d4>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 031f 	and.w	r3, r3, #31
 8001026:	2b00      	cmp	r3, #0
 8001028:	d037      	beq.n	800109a <HAL_ADC_IRQHandler+0x106>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001032:	d004      	beq.n	800103e <HAL_ADC_IRQHandler+0xaa>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a89      	ldr	r2, [pc, #548]	; (8001260 <HAL_ADC_IRQHandler+0x2cc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d106      	bne.n	800104c <HAL_ADC_IRQHandler+0xb8>
 800103e:	4b89      	ldr	r3, [pc, #548]	; (8001264 <HAL_ADC_IRQHandler+0x2d0>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 031f 	and.w	r3, r3, #31
 8001046:	2b05      	cmp	r3, #5
 8001048:	d027      	beq.n	800109a <HAL_ADC_IRQHandler+0x106>
 800104a:	e005      	b.n	8001058 <HAL_ADC_IRQHandler+0xc4>
 800104c:	4b86      	ldr	r3, [pc, #536]	; (8001268 <HAL_ADC_IRQHandler+0x2d4>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 031f 	and.w	r3, r3, #31
 8001054:	2b05      	cmp	r3, #5
 8001056:	d020      	beq.n	800109a <HAL_ADC_IRQHandler+0x106>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001060:	d004      	beq.n	800106c <HAL_ADC_IRQHandler+0xd8>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a7e      	ldr	r2, [pc, #504]	; (8001260 <HAL_ADC_IRQHandler+0x2cc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d106      	bne.n	800107a <HAL_ADC_IRQHandler+0xe6>
 800106c:	4b7d      	ldr	r3, [pc, #500]	; (8001264 <HAL_ADC_IRQHandler+0x2d0>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	2b09      	cmp	r3, #9
 8001076:	d010      	beq.n	800109a <HAL_ADC_IRQHandler+0x106>
 8001078:	e005      	b.n	8001086 <HAL_ADC_IRQHandler+0xf2>
 800107a:	4b7b      	ldr	r3, [pc, #492]	; (8001268 <HAL_ADC_IRQHandler+0x2d4>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	2b09      	cmp	r3, #9
 8001084:	d009      	beq.n	800109a <HAL_ADC_IRQHandler+0x106>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800108e:	d004      	beq.n	800109a <HAL_ADC_IRQHandler+0x106>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a75      	ldr	r2, [pc, #468]	; (800126c <HAL_ADC_IRQHandler+0x2d8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d104      	bne.n	80010a4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	e00f      	b.n	80010c4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ac:	d004      	beq.n	80010b8 <HAL_ADC_IRQHandler+0x124>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a6b      	ldr	r2, [pc, #428]	; (8001260 <HAL_ADC_IRQHandler+0x2cc>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d102      	bne.n	80010be <HAL_ADC_IRQHandler+0x12a>
 80010b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010bc:	e000      	b.n	80010c0 <HAL_ADC_IRQHandler+0x12c>
 80010be:	4b6b      	ldr	r3, [pc, #428]	; (800126c <HAL_ADC_IRQHandler+0x2d8>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d139      	bne.n	8001146 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d134      	bne.n	8001146 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d12d      	bne.n	8001146 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d11a      	bne.n	800112e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 020c 	bic.w	r2, r2, #12
 8001106:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d112      	bne.n	8001146 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f043 0201 	orr.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
 800112c:	e00b      	b.n	8001146 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f043 0210 	orr.w	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fd0c 	bl	8000b64 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	220c      	movs	r2, #12
 8001152:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	2b20      	cmp	r3, #32
 8001160:	d106      	bne.n	8001170 <HAL_ADC_IRQHandler+0x1dc>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	2b20      	cmp	r3, #32
 800116e:	d00f      	beq.n	8001190 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800117a:	2b40      	cmp	r3, #64	; 0x40
 800117c:	f040 813c 	bne.w	80013f8 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118a:	2b40      	cmp	r3, #64	; 0x40
 800118c:	f040 8134 	bne.w	80013f8 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011a4:	d004      	beq.n	80011b0 <HAL_ADC_IRQHandler+0x21c>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a2d      	ldr	r2, [pc, #180]	; (8001260 <HAL_ADC_IRQHandler+0x2cc>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d106      	bne.n	80011be <HAL_ADC_IRQHandler+0x22a>
 80011b0:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <HAL_ADC_IRQHandler+0x2d0>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d03e      	beq.n	800123a <HAL_ADC_IRQHandler+0x2a6>
 80011bc:	e005      	b.n	80011ca <HAL_ADC_IRQHandler+0x236>
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <HAL_ADC_IRQHandler+0x2d4>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d037      	beq.n	800123a <HAL_ADC_IRQHandler+0x2a6>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d2:	d004      	beq.n	80011de <HAL_ADC_IRQHandler+0x24a>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <HAL_ADC_IRQHandler+0x2cc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d106      	bne.n	80011ec <HAL_ADC_IRQHandler+0x258>
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <HAL_ADC_IRQHandler+0x2d0>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d027      	beq.n	800123a <HAL_ADC_IRQHandler+0x2a6>
 80011ea:	e005      	b.n	80011f8 <HAL_ADC_IRQHandler+0x264>
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <HAL_ADC_IRQHandler+0x2d4>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d020      	beq.n	800123a <HAL_ADC_IRQHandler+0x2a6>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001200:	d004      	beq.n	800120c <HAL_ADC_IRQHandler+0x278>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <HAL_ADC_IRQHandler+0x2cc>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d106      	bne.n	800121a <HAL_ADC_IRQHandler+0x286>
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_ADC_IRQHandler+0x2d0>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 031f 	and.w	r3, r3, #31
 8001214:	2b09      	cmp	r3, #9
 8001216:	d010      	beq.n	800123a <HAL_ADC_IRQHandler+0x2a6>
 8001218:	e005      	b.n	8001226 <HAL_ADC_IRQHandler+0x292>
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_ADC_IRQHandler+0x2d4>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 031f 	and.w	r3, r3, #31
 8001222:	2b09      	cmp	r3, #9
 8001224:	d009      	beq.n	800123a <HAL_ADC_IRQHandler+0x2a6>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800122e:	d004      	beq.n	800123a <HAL_ADC_IRQHandler+0x2a6>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <HAL_ADC_IRQHandler+0x2d8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d104      	bne.n	8001244 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	e018      	b.n	8001276 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800124c:	d004      	beq.n	8001258 <HAL_ADC_IRQHandler+0x2c4>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a03      	ldr	r2, [pc, #12]	; (8001260 <HAL_ADC_IRQHandler+0x2cc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d10b      	bne.n	8001270 <HAL_ADC_IRQHandler+0x2dc>
 8001258:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800125c:	e009      	b.n	8001272 <HAL_ADC_IRQHandler+0x2de>
 800125e:	bf00      	nop
 8001260:	50000100 	.word	0x50000100
 8001264:	50000300 	.word	0x50000300
 8001268:	50000700 	.word	0x50000700
 800126c:	50000400 	.word	0x50000400
 8001270:	4b9d      	ldr	r3, [pc, #628]	; (80014e8 <HAL_ADC_IRQHandler+0x554>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 80ad 	bne.w	80013ea <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 80a5 	bne.w	80013ea <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 809f 	bne.w	80013ea <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b6:	2b40      	cmp	r3, #64	; 0x40
 80012b8:	f040 8097 	bne.w	80013ea <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c4:	d004      	beq.n	80012d0 <HAL_ADC_IRQHandler+0x33c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a88      	ldr	r2, [pc, #544]	; (80014ec <HAL_ADC_IRQHandler+0x558>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d106      	bne.n	80012de <HAL_ADC_IRQHandler+0x34a>
 80012d0:	4b87      	ldr	r3, [pc, #540]	; (80014f0 <HAL_ADC_IRQHandler+0x55c>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d03e      	beq.n	800135a <HAL_ADC_IRQHandler+0x3c6>
 80012dc:	e005      	b.n	80012ea <HAL_ADC_IRQHandler+0x356>
 80012de:	4b85      	ldr	r3, [pc, #532]	; (80014f4 <HAL_ADC_IRQHandler+0x560>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d037      	beq.n	800135a <HAL_ADC_IRQHandler+0x3c6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f2:	d004      	beq.n	80012fe <HAL_ADC_IRQHandler+0x36a>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a7c      	ldr	r2, [pc, #496]	; (80014ec <HAL_ADC_IRQHandler+0x558>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d106      	bne.n	800130c <HAL_ADC_IRQHandler+0x378>
 80012fe:	4b7c      	ldr	r3, [pc, #496]	; (80014f0 <HAL_ADC_IRQHandler+0x55c>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 031f 	and.w	r3, r3, #31
 8001306:	2b06      	cmp	r3, #6
 8001308:	d027      	beq.n	800135a <HAL_ADC_IRQHandler+0x3c6>
 800130a:	e005      	b.n	8001318 <HAL_ADC_IRQHandler+0x384>
 800130c:	4b79      	ldr	r3, [pc, #484]	; (80014f4 <HAL_ADC_IRQHandler+0x560>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	2b06      	cmp	r3, #6
 8001316:	d020      	beq.n	800135a <HAL_ADC_IRQHandler+0x3c6>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001320:	d004      	beq.n	800132c <HAL_ADC_IRQHandler+0x398>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a71      	ldr	r2, [pc, #452]	; (80014ec <HAL_ADC_IRQHandler+0x558>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d106      	bne.n	800133a <HAL_ADC_IRQHandler+0x3a6>
 800132c:	4b70      	ldr	r3, [pc, #448]	; (80014f0 <HAL_ADC_IRQHandler+0x55c>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	2b07      	cmp	r3, #7
 8001336:	d010      	beq.n	800135a <HAL_ADC_IRQHandler+0x3c6>
 8001338:	e005      	b.n	8001346 <HAL_ADC_IRQHandler+0x3b2>
 800133a:	4b6e      	ldr	r3, [pc, #440]	; (80014f4 <HAL_ADC_IRQHandler+0x560>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	2b07      	cmp	r3, #7
 8001344:	d009      	beq.n	800135a <HAL_ADC_IRQHandler+0x3c6>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134e:	d004      	beq.n	800135a <HAL_ADC_IRQHandler+0x3c6>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a64      	ldr	r2, [pc, #400]	; (80014e8 <HAL_ADC_IRQHandler+0x554>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d104      	bne.n	8001364 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	e00f      	b.n	8001384 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800136c:	d004      	beq.n	8001378 <HAL_ADC_IRQHandler+0x3e4>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a5e      	ldr	r2, [pc, #376]	; (80014ec <HAL_ADC_IRQHandler+0x558>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d102      	bne.n	800137e <HAL_ADC_IRQHandler+0x3ea>
 8001378:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800137c:	e000      	b.n	8001380 <HAL_ADC_IRQHandler+0x3ec>
 800137e:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <HAL_ADC_IRQHandler+0x554>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d12d      	bne.n	80013ea <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d11a      	bne.n	80013d2 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013aa:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d112      	bne.n	80013ea <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40
 80013d0:	e00b      	b.n	80013ea <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f043 0210 	orr.w	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f043 0201 	orr.w	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f8de 	bl	80015ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2260      	movs	r2, #96	; 0x60
 80013f6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	2b80      	cmp	r3, #128	; 0x80
 8001404:	d113      	bne.n	800142e <HAL_ADC_IRQHandler+0x49a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001410:	2b80      	cmp	r3, #128	; 0x80
 8001412:	d10c      	bne.n	800142e <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fba9 	bl	8000b78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800143c:	d115      	bne.n	800146a <HAL_ADC_IRQHandler+0x4d6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800144c:	d10d      	bne.n	800146a <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f8ba 	bl	80015d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001468:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001478:	d115      	bne.n	80014a6 <HAL_ADC_IRQHandler+0x512>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001488:	d10d      	bne.n	80014a6 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f8a6 	bl	80015e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	2b10      	cmp	r3, #16
 80014b2:	d151      	bne.n	8001558 <HAL_ADC_IRQHandler+0x5c4>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b10      	cmp	r3, #16
 80014c0:	d14a      	bne.n	8001558 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e02d      	b.n	800152c <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d8:	d004      	beq.n	80014e4 <HAL_ADC_IRQHandler+0x550>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_ADC_IRQHandler+0x558>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d109      	bne.n	80014f8 <HAL_ADC_IRQHandler+0x564>
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_ADC_IRQHandler+0x55c>)
 80014e6:	e008      	b.n	80014fa <HAL_ADC_IRQHandler+0x566>
 80014e8:	50000400 	.word	0x50000400
 80014ec:	50000100 	.word	0x50000100
 80014f0:	50000300 	.word	0x50000300
 80014f4:	50000700 	.word	0x50000700
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_ADC_IRQHandler+0x614>)
 80014fa:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	2b00      	cmp	r3, #0
 8001506:	d109      	bne.n	800151c <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b01      	cmp	r3, #1
 8001514:	d10a      	bne.n	800152c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8001516:	2301      	movs	r3, #1
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e007      	b.n	800152c <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8001528:	2301      	movs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10e      	bne.n	8001550 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f043 0202 	orr.w	r2, r3, #2
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fb1e 	bl	8000b8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2210      	movs	r2, #16
 8001556:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001566:	d11b      	bne.n	80015a0 <HAL_ADC_IRQHandler+0x60c>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d113      	bne.n	80015a0 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	f043 0208 	orr.w	r2, r3, #8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001598:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f810 	bl	80015c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	50000700 	.word	0x50000700

080015ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b09b      	sub	sp, #108	; 0x6c
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_ADC_ConfigChannel+0x22>
 800161a:	2302      	movs	r3, #2
 800161c:	e2cb      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x5ba>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	f040 82af 	bne.w	8001b94 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b04      	cmp	r3, #4
 800163c:	d81c      	bhi.n	8001678 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	461a      	mov	r2, r3
 8001652:	231f      	movs	r3, #31
 8001654:	4093      	lsls	r3, r2
 8001656:	43db      	mvns	r3, r3
 8001658:	4019      	ands	r1, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fa00 f203 	lsl.w	r2, r0, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	631a      	str	r2, [r3, #48]	; 0x30
 8001676:	e063      	b.n	8001740 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b09      	cmp	r3, #9
 800167e:	d81e      	bhi.n	80016be <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	3b1e      	subs	r3, #30
 8001694:	221f      	movs	r2, #31
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	4019      	ands	r1, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	3b1e      	subs	r3, #30
 80016b0:	fa00 f203 	lsl.w	r2, r0, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	635a      	str	r2, [r3, #52]	; 0x34
 80016bc:	e040      	b.n	8001740 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b0e      	cmp	r3, #14
 80016c4:	d81e      	bhi.n	8001704 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	3b3c      	subs	r3, #60	; 0x3c
 80016da:	221f      	movs	r2, #31
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	4019      	ands	r1, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	3b3c      	subs	r3, #60	; 0x3c
 80016f6:	fa00 f203 	lsl.w	r2, r0, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	639a      	str	r2, [r3, #56]	; 0x38
 8001702:	e01d      	b.n	8001740 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	3b5a      	subs	r3, #90	; 0x5a
 8001718:	221f      	movs	r2, #31
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	4019      	ands	r1, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	3b5a      	subs	r3, #90	; 0x5a
 8001734:	fa00 f203 	lsl.w	r2, r0, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 80e5 	bne.w	800191a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b09      	cmp	r3, #9
 8001756:	d91c      	bls.n	8001792 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6999      	ldr	r1, [r3, #24]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	3b1e      	subs	r3, #30
 800176a:	2207      	movs	r2, #7
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	4019      	ands	r1, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6898      	ldr	r0, [r3, #8]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	3b1e      	subs	r3, #30
 8001784:	fa00 f203 	lsl.w	r2, r0, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	619a      	str	r2, [r3, #24]
 8001790:	e019      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6959      	ldr	r1, [r3, #20]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	2207      	movs	r2, #7
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4019      	ands	r1, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6898      	ldr	r0, [r3, #8]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	fa00 f203 	lsl.w	r2, r0, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d84f      	bhi.n	8001888 <HAL_ADC_ConfigChannel+0x28c>
 80017e8:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <HAL_ADC_ConfigChannel+0x1f4>)
 80017ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ee:	bf00      	nop
 80017f0:	08001801 	.word	0x08001801
 80017f4:	08001823 	.word	0x08001823
 80017f8:	08001845 	.word	0x08001845
 80017fc:	08001867 	.word	0x08001867
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001806:	4b9f      	ldr	r3, [pc, #636]	; (8001a84 <HAL_ADC_ConfigChannel+0x488>)
 8001808:	4013      	ands	r3, r2
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	0691      	lsls	r1, r2, #26
 8001810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001812:	430a      	orrs	r2, r1
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800181e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001820:	e07e      	b.n	8001920 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001828:	4b96      	ldr	r3, [pc, #600]	; (8001a84 <HAL_ADC_ConfigChannel+0x488>)
 800182a:	4013      	ands	r3, r2
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	0691      	lsls	r1, r2, #26
 8001832:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001834:	430a      	orrs	r2, r1
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001840:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001842:	e06d      	b.n	8001920 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800184a:	4b8e      	ldr	r3, [pc, #568]	; (8001a84 <HAL_ADC_ConfigChannel+0x488>)
 800184c:	4013      	ands	r3, r2
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	0691      	lsls	r1, r2, #26
 8001854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001856:	430a      	orrs	r2, r1
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001862:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001864:	e05c      	b.n	8001920 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800186c:	4b85      	ldr	r3, [pc, #532]	; (8001a84 <HAL_ADC_ConfigChannel+0x488>)
 800186e:	4013      	ands	r3, r2
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	0691      	lsls	r1, r2, #26
 8001876:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001878:	430a      	orrs	r2, r1
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001884:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001886:	e04b      	b.n	8001920 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	069b      	lsls	r3, r3, #26
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018aa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	069b      	lsls	r3, r3, #26
 80018bc:	429a      	cmp	r2, r3
 80018be:	d107      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ce:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	069b      	lsls	r3, r3, #26
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d107      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018f2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	069b      	lsls	r3, r3, #26
 8001904:	429a      	cmp	r2, r3
 8001906:	d10a      	bne.n	800191e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001916:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001918:	e001      	b.n	800191e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800191a:	bf00      	nop
 800191c:	e000      	b.n	8001920 <HAL_ADC_ConfigChannel+0x324>
      break;
 800191e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d108      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x344>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x344>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_ADC_ConfigChannel+0x346>
 8001940:	2300      	movs	r3, #0
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 8131 	bne.w	8001baa <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d00f      	beq.n	8001970 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	400a      	ands	r2, r1
 800196a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800196e:	e049      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2201      	movs	r2, #1
 800197e:	409a      	lsls	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b09      	cmp	r3, #9
 8001990:	d91c      	bls.n	80019cc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6999      	ldr	r1, [r3, #24]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	3b1b      	subs	r3, #27
 80019a4:	2207      	movs	r2, #7
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	4019      	ands	r1, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6898      	ldr	r0, [r3, #8]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	3b1b      	subs	r3, #27
 80019be:	fa00 f203 	lsl.w	r2, r0, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	619a      	str	r2, [r3, #24]
 80019ca:	e01b      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6959      	ldr	r1, [r3, #20]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	2207      	movs	r2, #7
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6898      	ldr	r0, [r3, #8]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	fa00 f203 	lsl.w	r2, r0, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a0c:	d004      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x41c>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <HAL_ADC_ConfigChannel+0x48c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x420>
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_ADC_ConfigChannel+0x490>)
 8001a1a:	e000      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x422>
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <HAL_ADC_ConfigChannel+0x494>)
 8001a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	d105      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d015      	beq.n	8001a60 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a38:	2b11      	cmp	r3, #17
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00b      	beq.n	8001a60 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a4c:	2b12      	cmp	r3, #18
 8001a4e:	f040 80ac 	bne.w	8001baa <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 80a5 	bne.w	8001baa <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a68:	d102      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x474>
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_ADC_ConfigChannel+0x48c>)
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e023      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x4bc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_ADC_ConfigChannel+0x48c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10c      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x498>
 8001a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e01a      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x4bc>
 8001a82:	bf00      	nop
 8001a84:	83fff000 	.word	0x83fff000
 8001a88:	50000100 	.word	0x50000100
 8001a8c:	50000300 	.word	0x50000300
 8001a90:	50000700 	.word	0x50000700
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a4a      	ldr	r2, [pc, #296]	; (8001bc4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d102      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x4a8>
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_ADC_ConfigChannel+0x5cc>)
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e009      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x4bc>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a47      	ldr	r2, [pc, #284]	; (8001bc8 <HAL_ADC_ConfigChannel+0x5cc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d102      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x4b8>
 8001aae:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	e001      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x4bc>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d108      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x4dc>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x4dc>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_ADC_ConfigChannel+0x4de>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d150      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d107      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x504>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x504>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x506>
 8001b00:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d13c      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d11d      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x54e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b16:	d118      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b22:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_ADC_ConfigChannel+0x5d0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <HAL_ADC_ConfigChannel+0x5d4>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0c9a      	lsrs	r2, r3, #18
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b3a:	e002      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f9      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b48:	e02e      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b11      	cmp	r3, #17
 8001b50:	d10b      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x56e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b5a:	d106      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b66:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b68:	e01e      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d11a      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b7c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b7e:	e013      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f043 0220 	orr.w	r2, r3, #32
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b92:	e00a      	b.n	8001baa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f043 0220 	orr.w	r2, r3, #32
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ba6:	e000      	b.n	8001baa <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ba8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001bb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	376c      	adds	r7, #108	; 0x6c
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	50000400 	.word	0x50000400
 8001bc8:	50000500 	.word	0x50000500
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	431bde83 	.word	0x431bde83

08001bd4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d108      	bne.n	8001c00 <ADC_Disable+0x2c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <ADC_Disable+0x2c>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <ADC_Disable+0x2e>
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d040      	beq.n	8001c88 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030d 	and.w	r3, r3, #13
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d10f      	bne.n	8001c34 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0202 	orr.w	r2, r2, #2
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c2c:	f7fe ff8e 	bl	8000b4c <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c32:	e022      	b.n	8001c7a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f043 0210 	orr.w	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e01c      	b.n	8001c8a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c50:	f7fe ff7c 	bl	8000b4c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d90d      	bls.n	8001c7a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f043 0210 	orr.w	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f043 0201 	orr.w	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e007      	b.n	8001c8a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d0e3      	beq.n	8001c50 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff3e 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff31 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	e160      	b.n	800218a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8152 	beq.w	8002184 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x38>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b12      	cmp	r3, #18
 8001eee:	d123      	bne.n	8001f38 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	220f      	movs	r2, #15
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	6939      	ldr	r1, [r7, #16]
 8001f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0203 	and.w	r2, r3, #3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d00b      	beq.n	8001f8c <HAL_GPIO_Init+0xd4>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d007      	beq.n	8001f8c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f80:	2b11      	cmp	r3, #17
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b12      	cmp	r3, #18
 8001f8a:	d130      	bne.n	8001fee <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	f003 0201 	and.w	r2, r3, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80ac 	beq.w	8002184 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202c:	4b5e      	ldr	r3, [pc, #376]	; (80021a8 <HAL_GPIO_Init+0x2f0>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a5d      	ldr	r2, [pc, #372]	; (80021a8 <HAL_GPIO_Init+0x2f0>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b5b      	ldr	r3, [pc, #364]	; (80021a8 <HAL_GPIO_Init+0x2f0>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002044:	4a59      	ldr	r2, [pc, #356]	; (80021ac <HAL_GPIO_Init+0x2f4>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800206e:	d025      	beq.n	80020bc <HAL_GPIO_Init+0x204>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a4f      	ldr	r2, [pc, #316]	; (80021b0 <HAL_GPIO_Init+0x2f8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d01f      	beq.n	80020b8 <HAL_GPIO_Init+0x200>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a4e      	ldr	r2, [pc, #312]	; (80021b4 <HAL_GPIO_Init+0x2fc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d019      	beq.n	80020b4 <HAL_GPIO_Init+0x1fc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <HAL_GPIO_Init+0x300>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_GPIO_Init+0x1f8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <HAL_GPIO_Init+0x304>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00d      	beq.n	80020ac <HAL_GPIO_Init+0x1f4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a4b      	ldr	r2, [pc, #300]	; (80021c0 <HAL_GPIO_Init+0x308>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <HAL_GPIO_Init+0x1f0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a4a      	ldr	r2, [pc, #296]	; (80021c4 <HAL_GPIO_Init+0x30c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_GPIO_Init+0x1ec>
 80020a0:	2306      	movs	r3, #6
 80020a2:	e00c      	b.n	80020be <HAL_GPIO_Init+0x206>
 80020a4:	2307      	movs	r3, #7
 80020a6:	e00a      	b.n	80020be <HAL_GPIO_Init+0x206>
 80020a8:	2305      	movs	r3, #5
 80020aa:	e008      	b.n	80020be <HAL_GPIO_Init+0x206>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e006      	b.n	80020be <HAL_GPIO_Init+0x206>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e004      	b.n	80020be <HAL_GPIO_Init+0x206>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e002      	b.n	80020be <HAL_GPIO_Init+0x206>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_GPIO_Init+0x206>
 80020bc:	2300      	movs	r3, #0
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	f002 0203 	and.w	r2, r2, #3
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4093      	lsls	r3, r2
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ce:	4937      	ldr	r1, [pc, #220]	; (80021ac <HAL_GPIO_Init+0x2f4>)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020dc:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <HAL_GPIO_Init+0x310>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002100:	4a31      	ldr	r2, [pc, #196]	; (80021c8 <HAL_GPIO_Init+0x310>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002106:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <HAL_GPIO_Init+0x310>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800212a:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <HAL_GPIO_Init+0x310>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_GPIO_Init+0x310>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <HAL_GPIO_Init+0x310>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_GPIO_Init+0x310>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <HAL_GPIO_Init+0x310>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	f47f ae97 	bne.w	8001ec8 <HAL_GPIO_Init+0x10>
  }
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	48000400 	.word	0x48000400
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00
 80021bc:	48001000 	.word	0x48001000
 80021c0:	48001400 	.word	0x48001400
 80021c4:	48001800 	.word	0x48001800
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f000 bf01 	b.w	8002fe8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8160 	beq.w	80024b6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021f6:	4bae      	ldr	r3, [pc, #696]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d00c      	beq.n	800221c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002202:	4bab      	ldr	r3, [pc, #684]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d159      	bne.n	80022c2 <HAL_RCC_OscConfig+0xf6>
 800220e:	4ba8      	ldr	r3, [pc, #672]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221a:	d152      	bne.n	80022c2 <HAL_RCC_OscConfig+0xf6>
 800221c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002220:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8002230:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d102      	bne.n	800224e <HAL_RCC_OscConfig+0x82>
 8002248:	4b99      	ldr	r3, [pc, #612]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	e015      	b.n	800227a <HAL_RCC_OscConfig+0xae>
 800224e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002252:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002266:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800226a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002276:	4b8e      	ldr	r3, [pc, #568]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800227e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002282:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002286:	fa92 f2a2 	rbit	r2, r2
 800228a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800228e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002292:	fab2 f282 	clz	r2, r2
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f002 021f 	and.w	r2, r2, #31
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8102 	beq.w	80024b4 <HAL_RCC_OscConfig+0x2e8>
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 80fc 	bne.w	80024b4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	f000 be93 	b.w	8002fe8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_OscConfig+0x110>
 80022ce:	4b78      	ldr	r3, [pc, #480]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a77      	ldr	r2, [pc, #476]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e030      	b.n	800233e <HAL_RCC_OscConfig+0x172>
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x134>
 80022e6:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a71      	ldr	r2, [pc, #452]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 80022ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b6f      	ldr	r3, [pc, #444]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6e      	ldr	r2, [pc, #440]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 80022f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e01e      	b.n	800233e <HAL_RCC_OscConfig+0x172>
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_OscConfig+0x15a>
 800230c:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a67      	ldr	r2, [pc, #412]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 8002312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b65      	ldr	r3, [pc, #404]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a64      	ldr	r2, [pc, #400]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e00b      	b.n	800233e <HAL_RCC_OscConfig+0x172>
 8002326:	4b62      	ldr	r3, [pc, #392]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a61      	ldr	r2, [pc, #388]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 800232c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a5e      	ldr	r2, [pc, #376]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 8002338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d059      	beq.n	80023fc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fc00 	bl	8000b4c <HAL_GetTick>
 800234c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002352:	f7fe fbfb 	bl	8000b4c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d902      	bls.n	8002368 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	f000 be40 	b.w	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 8002368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800237c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_RCC_OscConfig+0x1ce>
 8002394:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x1fa>
 800239a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800239e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80023ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ca:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80023ce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80023d2:	fa92 f2a2 	rbit	r2, r2
 80023d6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80023da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023de:	fab2 f282 	clz	r2, r2
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f002 021f 	and.w	r2, r2, #31
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0ab      	beq.n	8002352 <HAL_RCC_OscConfig+0x186>
 80023fa:	e05c      	b.n	80024b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fba6 	bl	8000b4c <HAL_GetTick>
 8002400:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002406:	f7fe fba1 	bl	8000b4c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	; 0x64
 8002414:	d902      	bls.n	800241c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	f000 bde6 	b.w	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 800241c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002420:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002430:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d102      	bne.n	800244e <HAL_RCC_OscConfig+0x282>
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x2ae>
 800244e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002452:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002466:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800246a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_RCC_OscConfig+0x2e4>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800247e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002482:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002486:	fa92 f2a2 	rbit	r2, r2
 800248a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800248e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002492:	fab2 f282 	clz	r2, r2
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f042 0220 	orr.w	r2, r2, #32
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	f002 021f 	and.w	r2, r2, #31
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f202 	lsl.w	r2, r1, r2
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ab      	bne.n	8002406 <HAL_RCC_OscConfig+0x23a>
 80024ae:	e002      	b.n	80024b6 <HAL_RCC_OscConfig+0x2ea>
 80024b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8170 	beq.w	80027a6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024c6:	4bd0      	ldr	r3, [pc, #832]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024d2:	4bcd      	ldr	r3, [pc, #820]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d16d      	bne.n	80025ba <HAL_RCC_OscConfig+0x3ee>
 80024de:	4bca      	ldr	r3, [pc, #808]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80024e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ea:	d166      	bne.n	80025ba <HAL_RCC_OscConfig+0x3ee>
 80024ec:	2302      	movs	r3, #2
 80024ee:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80024fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <HAL_RCC_OscConfig+0x350>
 8002516:	4bbc      	ldr	r3, [pc, #752]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	e013      	b.n	8002544 <HAL_RCC_OscConfig+0x378>
 800251c:	2302      	movs	r3, #2
 800251e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800252e:	2302      	movs	r3, #2
 8002530:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002534:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002540:	4bb1      	ldr	r3, [pc, #708]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2202      	movs	r2, #2
 8002546:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800254a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800254e:	fa92 f2a2 	rbit	r2, r2
 8002552:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002556:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800255a:	fab2 f282 	clz	r2, r2
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f042 0220 	orr.w	r2, r2, #32
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f002 021f 	and.w	r2, r2, #31
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_RCC_OscConfig+0x3ba>
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d002      	beq.n	8002586 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f000 bd31 	b.w	8002fe8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4ba0      	ldr	r3, [pc, #640]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	21f8      	movs	r1, #248	; 0xf8
 8002596:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800259e:	fa91 f1a1 	rbit	r1, r1
 80025a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80025a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025aa:	fab1 f181 	clz	r1, r1
 80025ae:	b2c9      	uxtb	r1, r1
 80025b0:	408b      	lsls	r3, r1
 80025b2:	4995      	ldr	r1, [pc, #596]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b8:	e0f5      	b.n	80027a6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8085 	beq.w	80026d0 <HAL_RCC_OscConfig+0x504>
 80025c6:	2301      	movs	r3, #1
 80025c8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80025d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	461a      	mov	r2, r3
 80025ee:	2301      	movs	r3, #1
 80025f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7fe faab 	bl	8000b4c <HAL_GetTick>
 80025f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fc:	f7fe faa6 	bl	8000b4c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d902      	bls.n	8002612 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	f000 bceb 	b.w	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 8002612:	2302      	movs	r3, #2
 8002614:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002624:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d102      	bne.n	8002642 <HAL_RCC_OscConfig+0x476>
 800263c:	4b72      	ldr	r3, [pc, #456]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	e013      	b.n	800266a <HAL_RCC_OscConfig+0x49e>
 8002642:	2302      	movs	r3, #2
 8002644:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002654:	2302      	movs	r3, #2
 8002656:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800265a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002666:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2202      	movs	r2, #2
 800266c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002670:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002674:	fa92 f2a2 	rbit	r2, r2
 8002678:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800267c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002680:	fab2 f282 	clz	r2, r2
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f042 0220 	orr.w	r2, r2, #32
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	f002 021f 	and.w	r2, r2, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0af      	beq.n	80025fc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b5a      	ldr	r3, [pc, #360]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	21f8      	movs	r1, #248	; 0xf8
 80026ac:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80026b4:	fa91 f1a1 	rbit	r1, r1
 80026b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80026bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026c0:	fab1 f181 	clz	r1, r1
 80026c4:	b2c9      	uxtb	r1, r1
 80026c6:	408b      	lsls	r3, r1
 80026c8:	494f      	ldr	r1, [pc, #316]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
 80026ce:	e06a      	b.n	80027a6 <HAL_RCC_OscConfig+0x5da>
 80026d0:	2301      	movs	r3, #1
 80026d2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80026e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	461a      	mov	r2, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fa26 	bl	8000b4c <HAL_GetTick>
 8002700:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002706:	f7fe fa21 	bl	8000b4c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d902      	bls.n	800271c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	f000 bc66 	b.w	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800272e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d102      	bne.n	800274c <HAL_RCC_OscConfig+0x580>
 8002746:	4b30      	ldr	r3, [pc, #192]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	e013      	b.n	8002774 <HAL_RCC_OscConfig+0x5a8>
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800275e:	2302      	movs	r3, #2
 8002760:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002764:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_RCC_OscConfig+0x63c>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2202      	movs	r2, #2
 8002776:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800277a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800277e:	fa92 f2a2 	rbit	r2, r2
 8002782:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002786:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f042 0220 	orr.w	r2, r2, #32
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	f002 021f 	and.w	r2, r2, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1af      	bne.n	8002706 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80da 	beq.w	800296a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d069      	beq.n	8002894 <HAL_RCC_OscConfig+0x6c8>
 80027c0:	2301      	movs	r3, #1
 80027c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80027d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_OscConfig+0x640>)
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	461a      	mov	r2, r3
 80027e6:	2301      	movs	r3, #1
 80027e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7fe f9af 	bl	8000b4c <HAL_GetTick>
 80027ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	e00d      	b.n	8002810 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f4:	f7fe f9aa 	bl	8000b4c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d905      	bls.n	8002810 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e3ef      	b.n	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 8002808:	40021000 	.word	0x40021000
 800280c:	10908120 	.word	0x10908120
 8002810:	2302      	movs	r3, #2
 8002812:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002828:	2202      	movs	r2, #2
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	fa93 f2a3 	rbit	r2, r3
 8002836:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002840:	2202      	movs	r2, #2
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	fa93 f2a3 	rbit	r2, r3
 800284e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002852:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002854:	4ba4      	ldr	r3, [pc, #656]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002858:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800285c:	2102      	movs	r1, #2
 800285e:	6019      	str	r1, [r3, #0]
 8002860:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f1a3 	rbit	r1, r3
 800286a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800286e:	6019      	str	r1, [r3, #0]
  return result;
 8002870:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0b0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x628>
 8002892:	e06a      	b.n	800296a <HAL_RCC_OscConfig+0x79e>
 8002894:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f2a3 	rbit	r2, r3
 80028a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028aa:	601a      	str	r2, [r3, #0]
  return result;
 80028ac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028b0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b8c      	ldr	r3, [pc, #560]	; (8002aec <HAL_RCC_OscConfig+0x920>)
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	461a      	mov	r2, r3
 80028c2:	2300      	movs	r3, #0
 80028c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7fe f941 	bl	8000b4c <HAL_GetTick>
 80028ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ce:	e009      	b.n	80028e4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d0:	f7fe f93c 	bl	8000b4c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e381      	b.n	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 80028e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028e8:	2202      	movs	r2, #2
 80028ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	fa93 f2a3 	rbit	r2, r3
 80028f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002900:	2202      	movs	r2, #2
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	fa93 f2a3 	rbit	r2, r3
 800290e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002918:	2202      	movs	r2, #2
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f2a3 	rbit	r2, r3
 8002926:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800292a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	4b6e      	ldr	r3, [pc, #440]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 800292e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002930:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002934:	2102      	movs	r1, #2
 8002936:	6019      	str	r1, [r3, #0]
 8002938:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f1a3 	rbit	r1, r3
 8002942:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002946:	6019      	str	r1, [r3, #0]
  return result;
 8002948:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2101      	movs	r1, #1
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1b2      	bne.n	80028d0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8157 	beq.w	8002c28 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002980:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d112      	bne.n	80029b2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298c:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4a55      	ldr	r2, [pc, #340]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002996:	61d3      	str	r3, [r2, #28]
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b2:	4b4f      	ldr	r3, [pc, #316]	; (8002af0 <HAL_RCC_OscConfig+0x924>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11a      	bne.n	80029f4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029be:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <HAL_RCC_OscConfig+0x924>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a4b      	ldr	r2, [pc, #300]	; (8002af0 <HAL_RCC_OscConfig+0x924>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ca:	f7fe f8bf 	bl	8000b4c <HAL_GetTick>
 80029ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d2:	e009      	b.n	80029e8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d4:	f7fe f8ba 	bl	8000b4c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	; 0x64
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e2ff      	b.n	8002fe8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_OscConfig+0x924>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ef      	beq.n	80029d4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x840>
 80029fe:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4a39      	ldr	r2, [pc, #228]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6213      	str	r3, [r2, #32]
 8002a0a:	e02f      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a0>
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x864>
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6213      	str	r3, [r2, #32]
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4a30      	ldr	r2, [pc, #192]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	6213      	str	r3, [r2, #32]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a0>
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x888>
 8002a3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	6213      	str	r3, [r2, #32]
 8002a46:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6213      	str	r3, [r2, #32]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a0>
 8002a54:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a23      	ldr	r2, [pc, #140]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002a66:	f023 0304 	bic.w	r3, r3, #4
 8002a6a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d06a      	beq.n	8002b4c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe f869 	bl	8000b4c <HAL_GetTick>
 8002a7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe f864 	bl	8000b4c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e2a7      	b.n	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 8002a98:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	fa93 f2a3 	rbit	r2, r3
 8002aaa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	fa93 f2a3 	rbit	r2, r3
 8002ac2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ac6:	601a      	str	r2, [r3, #0]
  return result;
 8002ac8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002acc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x928>
 8002ae2:	4b01      	ldr	r3, [pc, #4]	; (8002ae8 <HAL_RCC_OscConfig+0x91c>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	e013      	b.n	8002b10 <HAL_RCC_OscConfig+0x944>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	10908120 	.word	0x10908120
 8002af0:	40007000 	.word	0x40007000
 8002af4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002af8:	2202      	movs	r2, #2
 8002afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	4bc0      	ldr	r3, [pc, #768]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002b14:	2102      	movs	r1, #2
 8002b16:	6011      	str	r1, [r2, #0]
 8002b18:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	fa92 f1a2 	rbit	r1, r2
 8002b22:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b26:	6011      	str	r1, [r2, #0]
  return result;
 8002b28:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f002 021f 	and.w	r2, r2, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f202 	lsl.w	r2, r1, r2
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d09a      	beq.n	8002a80 <HAL_RCC_OscConfig+0x8b4>
 8002b4a:	e063      	b.n	8002c14 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4c:	f7fd fffe 	bl	8000b4c <HAL_GetTick>
 8002b50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	e00b      	b.n	8002b6e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fd fff9 	bl	8000b4c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e23c      	b.n	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 8002b6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b72:	2202      	movs	r2, #2
 8002b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	fa93 f2a3 	rbit	r2, r3
 8002b80:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	fa93 f2a3 	rbit	r2, r3
 8002b98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b9c:	601a      	str	r2, [r3, #0]
  return result;
 8002b9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ba2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_OscConfig+0x9f2>
 8002bb8:	4b95      	ldr	r3, [pc, #596]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	e00d      	b.n	8002bda <HAL_RCC_OscConfig+0xa0e>
 8002bbe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	4b8e      	ldr	r3, [pc, #568]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002bde:	2102      	movs	r1, #2
 8002be0:	6011      	str	r1, [r2, #0]
 8002be2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	fa92 f1a2 	rbit	r1, r2
 8002bec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002bf0:	6011      	str	r1, [r2, #0]
  return result;
 8002bf2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	fab2 f282 	clz	r2, r2
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	f002 021f 	and.w	r2, r2, #31
 8002c08:	2101      	movs	r1, #1
 8002c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1a0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c14:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1c:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	4a7b      	ldr	r2, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c26:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 81d9 	beq.w	8002fe6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c34:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	f000 81a6 	beq.w	8002f8e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	f040 811e 	bne.w	8002e8a <HAL_RCC_OscConfig+0xcbe>
 8002c4e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c66:	601a      	str	r2, [r3, #0]
  return result;
 8002c68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c6c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2300      	movs	r3, #0
 8002c82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fd ff62 	bl	8000b4c <HAL_GetTick>
 8002c88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8c:	e009      	b.n	8002ca2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fd ff5d 	bl	8000b4c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1a2      	b.n	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 8002ca2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fa93 f2a3 	rbit	r2, r3
 8002cb6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cba:	601a      	str	r2, [r3, #0]
  return result;
 8002cbc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_RCC_OscConfig+0xb10>
 8002cd6:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	e01b      	b.n	8002d14 <HAL_RCC_OscConfig+0xb48>
 8002cdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	fa93 f2a3 	rbit	r2, r3
 8002cf0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	fa93 f2a3 	rbit	r2, r3
 8002d0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002d18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d1c:	6011      	str	r1, [r2, #0]
 8002d1e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	fa92 f1a2 	rbit	r1, r2
 8002d28:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d2c:	6011      	str	r1, [r2, #0]
  return result;
 8002d2e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	fab2 f282 	clz	r2, r2
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f042 0220 	orr.w	r2, r2, #32
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f002 021f 	and.w	r2, r2, #31
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d19e      	bne.n	8002c8e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d50:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f023 020f 	bic.w	r2, r3, #15
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	492c      	ldr	r1, [pc, #176]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002d64:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6a19      	ldr	r1, [r3, #32]
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	4925      	ldr	r1, [pc, #148]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
 8002d80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fa93 f2a3 	rbit	r2, r3
 8002d94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d98:	601a      	str	r2, [r3, #0]
  return result;
 8002d9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d9e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002daa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	461a      	mov	r2, r3
 8002db2:	2301      	movs	r3, #1
 8002db4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fd fec9 	bl	8000b4c <HAL_GetTick>
 8002dba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dbe:	e009      	b.n	8002dd4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fd fec4 	bl	8000b4c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e109      	b.n	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 8002dd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fa93 f2a3 	rbit	r2, r3
 8002de8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dec:	601a      	str	r2, [r3, #0]
  return result;
 8002dee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002df2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <HAL_RCC_OscConfig+0xc48>
 8002e08:	4b01      	ldr	r3, [pc, #4]	; (8002e10 <HAL_RCC_OscConfig+0xc44>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	e01e      	b.n	8002e4c <HAL_RCC_OscConfig+0xc80>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	fa93 f2a3 	rbit	r2, r3
 8002e28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	fa93 f2a3 	rbit	r2, r3
 8002e42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_OscConfig+0xe28>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002e50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e54:	6011      	str	r1, [r2, #0]
 8002e56:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	fa92 f1a2 	rbit	r1, r2
 8002e60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e64:	6011      	str	r1, [r2, #0]
  return result;
 8002e66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	fab2 f282 	clz	r2, r2
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f042 0220 	orr.w	r2, r2, #32
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f002 021f 	and.w	r2, r2, #31
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d09b      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xbf4>
 8002e88:	e0ad      	b.n	8002fe6 <HAL_RCC_OscConfig+0xe1a>
 8002e8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	fa93 f2a3 	rbit	r2, r3
 8002e9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ea2:	601a      	str	r2, [r3, #0]
  return result;
 8002ea4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ea8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fe44 	bl	8000b4c <HAL_GetTick>
 8002ec4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec8:	e009      	b.n	8002ede <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fd fe3f 	bl	8000b4c <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e084      	b.n	8002fe8 <HAL_RCC_OscConfig+0xe1c>
 8002ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ef6:	601a      	str	r2, [r3, #0]
  return result;
 8002ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002efc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d102      	bne.n	8002f18 <HAL_RCC_OscConfig+0xd4c>
 8002f12:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <HAL_RCC_OscConfig+0xe28>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	e01b      	b.n	8002f50 <HAL_RCC_OscConfig+0xd84>
 8002f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f107 0320 	add.w	r3, r7, #32
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f107 031c 	add.w	r3, r7, #28
 8002f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fa93 f2a3 	rbit	r2, r3
 8002f46:	f107 0318 	add.w	r3, r7, #24
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	4b29      	ldr	r3, [pc, #164]	; (8002ff4 <HAL_RCC_OscConfig+0xe28>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	f107 0214 	add.w	r2, r7, #20
 8002f54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	f107 0214 	add.w	r2, r7, #20
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	fa92 f1a2 	rbit	r1, r2
 8002f64:	f107 0210 	add.w	r2, r7, #16
 8002f68:	6011      	str	r1, [r2, #0]
  return result;
 8002f6a:	f107 0210 	add.w	r2, r7, #16
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	fab2 f282 	clz	r2, r2
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	f042 0220 	orr.w	r2, r2, #32
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	f002 021f 	and.w	r2, r2, #31
 8002f80:	2101      	movs	r1, #1
 8002f82:	fa01 f202 	lsl.w	r2, r1, r2
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d19e      	bne.n	8002eca <HAL_RCC_OscConfig+0xcfe>
 8002f8c:	e02b      	b.n	8002fe6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e025      	b.n	8002fe8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f9c:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_RCC_OscConfig+0xe28>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <HAL_RCC_OscConfig+0xe28>)
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fb0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d111      	bne.n	8002fe2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fbe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d108      	bne.n	8002fe2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd4:	f003 020f 	and.w	r2, r3, #15
 8002fd8:	1d3b      	adds	r3, r7, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b09e      	sub	sp, #120	; 0x78
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e162      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003010:	4b90      	ldr	r3, [pc, #576]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d910      	bls.n	8003040 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b8d      	ldr	r3, [pc, #564]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 0207 	bic.w	r2, r3, #7
 8003026:	498b      	ldr	r1, [pc, #556]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b89      	ldr	r3, [pc, #548]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e14a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b82      	ldr	r3, [pc, #520]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	497f      	ldr	r1, [pc, #508]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80dc 	beq.w	8003224 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d13c      	bne.n	80030ee <HAL_RCC_ClockConfig+0xf6>
 8003074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003078:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d102      	bne.n	800309e <HAL_RCC_ClockConfig+0xa6>
 8003098:	4b6f      	ldr	r3, [pc, #444]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	e00f      	b.n	80030be <HAL_RCC_ClockConfig+0xc6>
 800309e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	667b      	str	r3, [r7, #100]	; 0x64
 80030ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b0:	663b      	str	r3, [r7, #96]	; 0x60
 80030b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ba:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80030c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030c6:	fa92 f2a2 	rbit	r2, r2
 80030ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030ce:	fab2 f282 	clz	r2, r2
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f042 0220 	orr.w	r2, r2, #32
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	f002 021f 	and.w	r2, r2, #31
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f202 	lsl.w	r2, r1, r2
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d17b      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0f3      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d13c      	bne.n	8003170 <HAL_RCC_ClockConfig+0x178>
 80030f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_RCC_ClockConfig+0x128>
 800311a:	4b4f      	ldr	r3, [pc, #316]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	e00f      	b.n	8003140 <HAL_RCC_ClockConfig+0x148>
 8003120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003124:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	647b      	str	r3, [r7, #68]	; 0x44
 800312e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003132:	643b      	str	r3, [r7, #64]	; 0x40
 8003134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313c:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003144:	63ba      	str	r2, [r7, #56]	; 0x38
 8003146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003148:	fa92 f2a2 	rbit	r2, r2
 800314c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800314e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003150:	fab2 f282 	clz	r2, r2
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	f042 0220 	orr.w	r2, r2, #32
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f002 021f 	and.w	r2, r2, #31
 8003160:	2101      	movs	r1, #1
 8003162:	fa01 f202 	lsl.w	r2, r1, r2
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d13a      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0b2      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
 8003170:	2302      	movs	r3, #2
 8003172:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d102      	bne.n	8003198 <HAL_RCC_ClockConfig+0x1a0>
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	e00d      	b.n	80031b4 <HAL_RCC_ClockConfig+0x1bc>
 8003198:	2302      	movs	r3, #2
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
 80031a4:	2302      	movs	r3, #2
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	2202      	movs	r2, #2
 80031b6:	61ba      	str	r2, [r7, #24]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	fa92 f2a2 	rbit	r2, r2
 80031be:	617a      	str	r2, [r7, #20]
  return result;
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	fab2 f282 	clz	r2, r2
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f042 0220 	orr.w	r2, r2, #32
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	f002 021f 	and.w	r2, r2, #31
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f202 	lsl.w	r2, r1, r2
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e079      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	491a      	ldr	r1, [pc, #104]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7fd fcaa 	bl	8000b4c <HAL_GetTick>
 80031f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fd fca6 	bl	8000b4c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e061      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d214      	bcs.n	800325c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	4906      	ldr	r1, [pc, #24]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d005      	beq.n	800325c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e040      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
 8003254:	40022000 	.word	0x40022000
 8003258:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_RCC_ClockConfig+0x2e8>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	491a      	ldr	r1, [pc, #104]	; (80032e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4912      	ldr	r1, [pc, #72]	; (80032e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800329a:	f000 f829 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800329e:	4601      	mov	r1, r0
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_RCC_ClockConfig+0x2e8>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a8:	22f0      	movs	r2, #240	; 0xf0
 80032aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	fa92 f2a2 	rbit	r2, r2
 80032b2:	60fa      	str	r2, [r7, #12]
  return result;
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	fab2 f282 	clz	r2, r2
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	40d3      	lsrs	r3, r2
 80032be:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x2ec>)
 80032c0:	5cd3      	ldrb	r3, [r2, r3]
 80032c2:	fa21 f303 	lsr.w	r3, r1, r3
 80032c6:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <HAL_RCC_ClockConfig+0x2f0>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_RCC_ClockConfig+0x2f4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fbf8 	bl	8000ac4 <HAL_InitTick>
  
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3778      	adds	r7, #120	; 0x78
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	080053c4 	.word	0x080053c4
 80032e8:	20000000 	.word	0x20000000
 80032ec:	20000004 	.word	0x20000004

080032f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b08b      	sub	sp, #44	; 0x2c
 80032f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800330a:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b04      	cmp	r3, #4
 8003318:	d002      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x30>
 800331a:	2b08      	cmp	r3, #8
 800331c:	d003      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x36>
 800331e:	e03f      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003322:	623b      	str	r3, [r7, #32]
      break;
 8003324:	e03f      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800332c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003330:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	fa92 f2a2 	rbit	r2, r2
 8003338:	607a      	str	r2, [r7, #4]
  return result;
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	fab2 f282 	clz	r2, r2
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	40d3      	lsrs	r3, r2
 8003344:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	220f      	movs	r2, #15
 8003354:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	fa92 f2a2 	rbit	r2, r2
 800335c:	60fa      	str	r2, [r7, #12]
  return result;
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	40d3      	lsrs	r3, r2
 8003368:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003378:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	e007      	b.n	800339a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	623b      	str	r3, [r7, #32]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033a2:	623b      	str	r3, [r7, #32]
      break;
 80033a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	372c      	adds	r7, #44	; 0x2c
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40021000 	.word	0x40021000
 80033b8:	007a1200 	.word	0x007a1200
 80033bc:	080053dc 	.word	0x080053dc
 80033c0:	080053ec 	.word	0x080053ec

080033c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033e2:	f7ff ffef 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 80033e6:	4601      	mov	r1, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	fa92 f2a2 	rbit	r2, r2
 80033fc:	603a      	str	r2, [r7, #0]
  return result;
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	40d3      	lsrs	r3, r2
 8003408:	4a04      	ldr	r2, [pc, #16]	; (800341c <HAL_RCC_GetPCLK1Freq+0x40>)
 800340a:	5cd3      	ldrb	r3, [r2, r3]
 800340c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	080053d4 	.word	0x080053d4

08003420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003426:	f7ff ffcd 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 800342a:	4601      	mov	r1, r0
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003434:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003438:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	fa92 f2a2 	rbit	r2, r2
 8003440:	603a      	str	r2, [r7, #0]
  return result;
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	fab2 f282 	clz	r2, r2
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	40d3      	lsrs	r3, r2
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x40>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40021000 	.word	0x40021000
 8003460:	080053d4 	.word	0x080053d4

08003464 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b092      	sub	sp, #72	; 0x48
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80d7 	beq.w	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003482:	2300      	movs	r3, #0
 8003484:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003488:	4b4e      	ldr	r3, [pc, #312]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10e      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	4a4a      	ldr	r2, [pc, #296]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	61d3      	str	r3, [r2, #28]
 80034a0:	4b48      	ldr	r3, [pc, #288]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b2:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d118      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034be:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a41      	ldr	r2, [pc, #260]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ca:	f7fd fb3f 	bl	8000b4c <HAL_GetTick>
 80034ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	e008      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d2:	f7fd fb3b 	bl	8000b4c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	; 0x64
 80034de:	d901      	bls.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e1d6      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	4b38      	ldr	r3, [pc, #224]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f0:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8084 	beq.w	800360a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800350c:	429a      	cmp	r2, r3
 800350e:	d07c      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003510:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800351a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800351e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	461a      	mov	r2, r3
 800353a:	2301      	movs	r3, #1
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003542:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	461a      	mov	r2, r3
 800355e:	2300      	movs	r3, #0
 8003560:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003566:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d04b      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fd faeb 	bl	8000b4c <HAL_GetTick>
 8003576:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	e00a      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fd fae7 	bl	8000b4c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f241 3288 	movw	r2, #5000	; 0x1388
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e180      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003590:	2302      	movs	r3, #2
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
 800359c:	2302      	movs	r3, #2
 800359e:	623b      	str	r3, [r7, #32]
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	61fb      	str	r3, [r7, #28]
  return result;
 80035a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d108      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035be:	4b01      	ldr	r3, [pc, #4]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	e00d      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40007000 	.word	0x40007000
 80035cc:	10908100 	.word	0x10908100
 80035d0:	2302      	movs	r3, #2
 80035d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	4ba0      	ldr	r3, [pc, #640]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2202      	movs	r2, #2
 80035e2:	613a      	str	r2, [r7, #16]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	fa92 f2a2 	rbit	r2, r2
 80035ea:	60fa      	str	r2, [r7, #12]
  return result;
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	fab2 f282 	clz	r2, r2
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f002 021f 	and.w	r2, r2, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0b7      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800360a:	4b95      	ldr	r3, [pc, #596]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4992      	ldr	r1, [pc, #584]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800361c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b8e      	ldr	r3, [pc, #568]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	4a8d      	ldr	r2, [pc, #564]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800363c:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	f023 0203 	bic.w	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4985      	ldr	r1, [pc, #532]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800365a:	4b81      	ldr	r3, [pc, #516]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	497e      	ldr	r1, [pc, #504]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003668:	4313      	orrs	r3, r2
 800366a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003678:	4b79      	ldr	r3, [pc, #484]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	4976      	ldr	r1, [pc, #472]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003686:	4313      	orrs	r3, r2
 8003688:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003696:	4b72      	ldr	r3, [pc, #456]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f023 0210 	bic.w	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	496f      	ldr	r1, [pc, #444]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80036b4:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	4967      	ldr	r1, [pc, #412]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036d2:	4b63      	ldr	r3, [pc, #396]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f023 0220 	bic.w	r2, r3, #32
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4960      	ldr	r1, [pc, #384]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036f0:	4b5b      	ldr	r3, [pc, #364]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	4958      	ldr	r1, [pc, #352]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800370e:	4b54      	ldr	r3, [pc, #336]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4951      	ldr	r1, [pc, #324]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800372c:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	4949      	ldr	r1, [pc, #292]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800374a:	4b45      	ldr	r3, [pc, #276]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4942      	ldr	r1, [pc, #264]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003768:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	493a      	ldr	r1, [pc, #232]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003786:	4b36      	ldr	r3, [pc, #216]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	4933      	ldr	r1, [pc, #204]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037a4:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	492b      	ldr	r1, [pc, #172]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80037c2:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	4924      	ldr	r1, [pc, #144]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	491c      	ldr	r1, [pc, #112]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80037fe:	4b18      	ldr	r3, [pc, #96]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	4915      	ldr	r1, [pc, #84]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800381c:	4b10      	ldr	r3, [pc, #64]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	490d      	ldr	r1, [pc, #52]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003846:	4906      	ldr	r1, [pc, #24]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00c      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003858:	4b01      	ldr	r3, [pc, #4]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	e002      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386c:	490b      	ldr	r1, [pc, #44]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800386e:	4313      	orrs	r3, r2
 8003870:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	4904      	ldr	r1, [pc, #16]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800388c:	4313      	orrs	r3, r2
 800388e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3748      	adds	r7, #72	; 0x48
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000

080038a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e01d      	b.n	80038ee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fc fff8 	bl	80008bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f000 f982 	bl	8003be8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2201      	movs	r2, #1
 8003908:	6839      	ldr	r1, [r7, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fd10 	bl	8004330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a21      	ldr	r2, [pc, #132]	; (800399c <HAL_TIM_PWM_Start+0xa4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d018      	beq.n	800394c <HAL_TIM_PWM_Start+0x54>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a20      	ldr	r2, [pc, #128]	; (80039a0 <HAL_TIM_PWM_Start+0xa8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_TIM_PWM_Start+0x54>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_TIM_PWM_Start+0xac>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00e      	beq.n	800394c <HAL_TIM_PWM_Start+0x54>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_TIM_PWM_Start+0xb0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_TIM_PWM_Start+0x54>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_TIM_PWM_Start+0xb4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_TIM_PWM_Start+0x54>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1a      	ldr	r2, [pc, #104]	; (80039b0 <HAL_TIM_PWM_Start+0xb8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_TIM_PWM_Start+0x58>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_TIM_PWM_Start+0x5a>
 8003950:	2300      	movs	r3, #0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_TIM_PWM_Start+0xbc>)
 800396e:	4013      	ands	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b06      	cmp	r3, #6
 8003976:	d00b      	beq.n	8003990 <HAL_TIM_PWM_Start+0x98>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397e:	d007      	beq.n	8003990 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40013400 	.word	0x40013400
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40014400 	.word	0x40014400
 80039ac:	40014800 	.word	0x40014800
 80039b0:	40015000 	.word	0x40015000
 80039b4:	00010007 	.word	0x00010007

080039b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e105      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x226>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b14      	cmp	r3, #20
 80039e6:	f200 80f0 	bhi.w	8003bca <HAL_TIM_PWM_ConfigChannel+0x212>
 80039ea:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a45 	.word	0x08003a45
 80039f4:	08003bcb 	.word	0x08003bcb
 80039f8:	08003bcb 	.word	0x08003bcb
 80039fc:	08003bcb 	.word	0x08003bcb
 8003a00:	08003a85 	.word	0x08003a85
 8003a04:	08003bcb 	.word	0x08003bcb
 8003a08:	08003bcb 	.word	0x08003bcb
 8003a0c:	08003bcb 	.word	0x08003bcb
 8003a10:	08003ac7 	.word	0x08003ac7
 8003a14:	08003bcb 	.word	0x08003bcb
 8003a18:	08003bcb 	.word	0x08003bcb
 8003a1c:	08003bcb 	.word	0x08003bcb
 8003a20:	08003b07 	.word	0x08003b07
 8003a24:	08003bcb 	.word	0x08003bcb
 8003a28:	08003bcb 	.word	0x08003bcb
 8003a2c:	08003bcb 	.word	0x08003bcb
 8003a30:	08003b49 	.word	0x08003b49
 8003a34:	08003bcb 	.word	0x08003bcb
 8003a38:	08003bcb 	.word	0x08003bcb
 8003a3c:	08003bcb 	.word	0x08003bcb
 8003a40:	08003b89 	.word	0x08003b89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f96a 	bl	8003d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0208 	orr.w	r2, r2, #8
 8003a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0204 	bic.w	r2, r2, #4
 8003a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6999      	ldr	r1, [r3, #24]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	619a      	str	r2, [r3, #24]
      break;
 8003a82:	e0a3      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f9e4 	bl	8003e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	021a      	lsls	r2, r3, #8
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	619a      	str	r2, [r3, #24]
      break;
 8003ac4:	e082      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fa57 	bl	8003f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0208 	orr.w	r2, r2, #8
 8003ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0204 	bic.w	r2, r2, #4
 8003af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69d9      	ldr	r1, [r3, #28]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
      break;
 8003b04:	e062      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fac9 	bl	80040a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69d9      	ldr	r1, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	021a      	lsls	r2, r3, #8
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	61da      	str	r2, [r3, #28]
      break;
 8003b46:	e041      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fb18 	bl	8004184 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0208 	orr.w	r2, r2, #8
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b86:	e021      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fb62 	bl	8004258 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	021a      	lsls	r2, r3, #8
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bc8:	e000      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003bca:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop

08003be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a42      	ldr	r2, [pc, #264]	; (8003d04 <TIM_Base_SetConfig+0x11c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c06:	d00f      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3f      	ldr	r2, [pc, #252]	; (8003d08 <TIM_Base_SetConfig+0x120>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a3e      	ldr	r2, [pc, #248]	; (8003d0c <TIM_Base_SetConfig+0x124>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a3d      	ldr	r2, [pc, #244]	; (8003d10 <TIM_Base_SetConfig+0x128>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a3c      	ldr	r2, [pc, #240]	; (8003d14 <TIM_Base_SetConfig+0x12c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d108      	bne.n	8003c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a31      	ldr	r2, [pc, #196]	; (8003d04 <TIM_Base_SetConfig+0x11c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01f      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c48:	d01b      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2e      	ldr	r2, [pc, #184]	; (8003d08 <TIM_Base_SetConfig+0x120>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d017      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2d      	ldr	r2, [pc, #180]	; (8003d0c <TIM_Base_SetConfig+0x124>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <TIM_Base_SetConfig+0x128>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00f      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a2c      	ldr	r2, [pc, #176]	; (8003d18 <TIM_Base_SetConfig+0x130>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00b      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a2b      	ldr	r2, [pc, #172]	; (8003d1c <TIM_Base_SetConfig+0x134>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <TIM_Base_SetConfig+0x138>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d003      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <TIM_Base_SetConfig+0x12c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d108      	bne.n	8003c94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <TIM_Base_SetConfig+0x11c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <TIM_Base_SetConfig+0x100>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <TIM_Base_SetConfig+0x128>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00f      	beq.n	8003ce8 <TIM_Base_SetConfig+0x100>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <TIM_Base_SetConfig+0x130>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00b      	beq.n	8003ce8 <TIM_Base_SetConfig+0x100>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <TIM_Base_SetConfig+0x134>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <TIM_Base_SetConfig+0x100>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <TIM_Base_SetConfig+0x138>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_Base_SetConfig+0x100>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a0c      	ldr	r2, [pc, #48]	; (8003d14 <TIM_Base_SetConfig+0x12c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d103      	bne.n	8003cf0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	615a      	str	r2, [r3, #20]
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	40013400 	.word	0x40013400
 8003d14:	40015000 	.word	0x40015000
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 0302 	bic.w	r3, r3, #2
 8003d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a30      	ldr	r2, [pc, #192]	; (8003e40 <TIM_OC1_SetConfig+0x11c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <TIM_OC1_SetConfig+0x88>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a2f      	ldr	r2, [pc, #188]	; (8003e44 <TIM_OC1_SetConfig+0x120>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00f      	beq.n	8003dac <TIM_OC1_SetConfig+0x88>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a2e      	ldr	r2, [pc, #184]	; (8003e48 <TIM_OC1_SetConfig+0x124>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00b      	beq.n	8003dac <TIM_OC1_SetConfig+0x88>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a2d      	ldr	r2, [pc, #180]	; (8003e4c <TIM_OC1_SetConfig+0x128>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <TIM_OC1_SetConfig+0x88>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a2c      	ldr	r2, [pc, #176]	; (8003e50 <TIM_OC1_SetConfig+0x12c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_OC1_SetConfig+0x88>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a2b      	ldr	r2, [pc, #172]	; (8003e54 <TIM_OC1_SetConfig+0x130>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d10c      	bne.n	8003dc6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0308 	bic.w	r3, r3, #8
 8003db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <TIM_OC1_SetConfig+0x11c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <TIM_OC1_SetConfig+0xd2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <TIM_OC1_SetConfig+0x120>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00f      	beq.n	8003df6 <TIM_OC1_SetConfig+0xd2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <TIM_OC1_SetConfig+0x124>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00b      	beq.n	8003df6 <TIM_OC1_SetConfig+0xd2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1a      	ldr	r2, [pc, #104]	; (8003e4c <TIM_OC1_SetConfig+0x128>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <TIM_OC1_SetConfig+0xd2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <TIM_OC1_SetConfig+0x12c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_OC1_SetConfig+0xd2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <TIM_OC1_SetConfig+0x130>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d111      	bne.n	8003e1a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	621a      	str	r2, [r3, #32]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40013400 	.word	0x40013400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40014400 	.word	0x40014400
 8003e50:	40014800 	.word	0x40014800
 8003e54:	40015000 	.word	0x40015000

08003e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f023 0210 	bic.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0320 	bic.w	r3, r3, #32
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a2c      	ldr	r2, [pc, #176]	; (8003f68 <TIM_OC2_SetConfig+0x110>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_OC2_SetConfig+0x74>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a2b      	ldr	r2, [pc, #172]	; (8003f6c <TIM_OC2_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_OC2_SetConfig+0x74>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a2a      	ldr	r2, [pc, #168]	; (8003f70 <TIM_OC2_SetConfig+0x118>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d10d      	bne.n	8003ee8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <TIM_OC2_SetConfig+0x110>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <TIM_OC2_SetConfig+0xc0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <TIM_OC2_SetConfig+0x114>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00f      	beq.n	8003f18 <TIM_OC2_SetConfig+0xc0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <TIM_OC2_SetConfig+0x11c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_OC2_SetConfig+0xc0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <TIM_OC2_SetConfig+0x120>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <TIM_OC2_SetConfig+0xc0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <TIM_OC2_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_OC2_SetConfig+0xc0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <TIM_OC2_SetConfig+0x118>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d113      	bne.n	8003f40 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f1e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f26:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40013400 	.word	0x40013400
 8003f70:	40015000 	.word	0x40015000
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800

08003f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0303 	bic.w	r3, r3, #3
 8003fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2b      	ldr	r2, [pc, #172]	; (800408c <TIM_OC3_SetConfig+0x10c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_OC3_SetConfig+0x72>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a2a      	ldr	r2, [pc, #168]	; (8004090 <TIM_OC3_SetConfig+0x110>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC3_SetConfig+0x72>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a29      	ldr	r2, [pc, #164]	; (8004094 <TIM_OC3_SetConfig+0x114>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d10d      	bne.n	800400e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800400c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1e      	ldr	r2, [pc, #120]	; (800408c <TIM_OC3_SetConfig+0x10c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <TIM_OC3_SetConfig+0xbe>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <TIM_OC3_SetConfig+0x110>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00f      	beq.n	800403e <TIM_OC3_SetConfig+0xbe>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <TIM_OC3_SetConfig+0x118>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00b      	beq.n	800403e <TIM_OC3_SetConfig+0xbe>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1c      	ldr	r2, [pc, #112]	; (800409c <TIM_OC3_SetConfig+0x11c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <TIM_OC3_SetConfig+0xbe>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a1b      	ldr	r2, [pc, #108]	; (80040a0 <TIM_OC3_SetConfig+0x120>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_OC3_SetConfig+0xbe>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a16      	ldr	r2, [pc, #88]	; (8004094 <TIM_OC3_SetConfig+0x114>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d113      	bne.n	8004066 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40013400 	.word	0x40013400
 8004094:	40015000 	.word	0x40015000
 8004098:	40014000 	.word	0x40014000
 800409c:	40014400 	.word	0x40014400
 80040a0:	40014800 	.word	0x40014800

080040a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a1a      	ldr	r2, [pc, #104]	; (800416c <TIM_OC4_SetConfig+0xc8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d013      	beq.n	8004130 <TIM_OC4_SetConfig+0x8c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a19      	ldr	r2, [pc, #100]	; (8004170 <TIM_OC4_SetConfig+0xcc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00f      	beq.n	8004130 <TIM_OC4_SetConfig+0x8c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a18      	ldr	r2, [pc, #96]	; (8004174 <TIM_OC4_SetConfig+0xd0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00b      	beq.n	8004130 <TIM_OC4_SetConfig+0x8c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a17      	ldr	r2, [pc, #92]	; (8004178 <TIM_OC4_SetConfig+0xd4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <TIM_OC4_SetConfig+0x8c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a16      	ldr	r2, [pc, #88]	; (800417c <TIM_OC4_SetConfig+0xd8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_OC4_SetConfig+0x8c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a15      	ldr	r2, [pc, #84]	; (8004180 <TIM_OC4_SetConfig+0xdc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d109      	bne.n	8004144 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	019b      	lsls	r3, r3, #6
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40013400 	.word	0x40013400
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800
 8004180:	40015000 	.word	0x40015000

08004184 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a19      	ldr	r2, [pc, #100]	; (8004240 <TIM_OC5_SetConfig+0xbc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <TIM_OC5_SetConfig+0x82>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a18      	ldr	r2, [pc, #96]	; (8004244 <TIM_OC5_SetConfig+0xc0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00f      	beq.n	8004206 <TIM_OC5_SetConfig+0x82>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a17      	ldr	r2, [pc, #92]	; (8004248 <TIM_OC5_SetConfig+0xc4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_OC5_SetConfig+0x82>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a16      	ldr	r2, [pc, #88]	; (800424c <TIM_OC5_SetConfig+0xc8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <TIM_OC5_SetConfig+0x82>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a15      	ldr	r2, [pc, #84]	; (8004250 <TIM_OC5_SetConfig+0xcc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_OC5_SetConfig+0x82>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <TIM_OC5_SetConfig+0xd0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d109      	bne.n	800421a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	621a      	str	r2, [r3, #32]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40013400 	.word	0x40013400
 8004248:	40014000 	.word	0x40014000
 800424c:	40014400 	.word	0x40014400
 8004250:	40014800 	.word	0x40014800
 8004254:	40015000 	.word	0x40015000

08004258 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800429e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	051b      	lsls	r3, r3, #20
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <TIM_OC6_SetConfig+0xc0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <TIM_OC6_SetConfig+0x84>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a19      	ldr	r2, [pc, #100]	; (800431c <TIM_OC6_SetConfig+0xc4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00f      	beq.n	80042dc <TIM_OC6_SetConfig+0x84>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <TIM_OC6_SetConfig+0xc8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00b      	beq.n	80042dc <TIM_OC6_SetConfig+0x84>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a17      	ldr	r2, [pc, #92]	; (8004324 <TIM_OC6_SetConfig+0xcc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d007      	beq.n	80042dc <TIM_OC6_SetConfig+0x84>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a16      	ldr	r2, [pc, #88]	; (8004328 <TIM_OC6_SetConfig+0xd0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_OC6_SetConfig+0x84>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a15      	ldr	r2, [pc, #84]	; (800432c <TIM_OC6_SetConfig+0xd4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d109      	bne.n	80042f0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	029b      	lsls	r3, r3, #10
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40013400 	.word	0x40013400
 8004320:	40014000 	.word	0x40014000
 8004324:	40014400 	.word	0x40014400
 8004328:	40014800 	.word	0x40014800
 800432c:	40015000 	.word	0x40015000

08004330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	2201      	movs	r2, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1a      	ldr	r2, [r3, #32]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	43db      	mvns	r3, r3
 8004352:	401a      	ands	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1a      	ldr	r2, [r3, #32]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	fa01 f303 	lsl.w	r3, r1, r3
 8004368:	431a      	orrs	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e06d      	b.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a30      	ldr	r2, [pc, #192]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2f      	ldr	r2, [pc, #188]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a2d      	ldr	r2, [pc, #180]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1e      	ldr	r2, [pc, #120]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d01d      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d018      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d013      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1a      	ldr	r2, [pc, #104]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00e      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a15      	ldr	r2, [pc, #84]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d009      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a16      	ldr	r2, [pc, #88]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a11      	ldr	r2, [pc, #68]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d10c      	bne.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	4313      	orrs	r3, r2
 8004454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40013400 	.word	0x40013400
 8004484:	40015000 	.word	0x40015000
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800
 8004490:	40014000 	.word	0x40014000

08004494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e040      	b.n	8004528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc fa82 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2224      	movs	r2, #36	; 0x24
 80044c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f82c 	bl	8004530 <UART_SetConfig>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e022      	b.n	8004528 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa3a 	bl	8004964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800450e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fac1 	bl	8004aa8 <UART_CheckIdleState>
 8004526:	4603      	mov	r3, r0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4bac      	ldr	r3, [pc, #688]	; (8004810 <UART_SetConfig+0x2e0>)
 8004560:	4013      	ands	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	6939      	ldr	r1, [r7, #16]
 8004568:	430b      	orrs	r3, r1
 800456a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a9a      	ldr	r2, [pc, #616]	; (8004814 <UART_SetConfig+0x2e4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d121      	bne.n	80045f4 <UART_SetConfig+0xc4>
 80045b0:	4b99      	ldr	r3, [pc, #612]	; (8004818 <UART_SetConfig+0x2e8>)
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d817      	bhi.n	80045ec <UART_SetConfig+0xbc>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <UART_SetConfig+0x94>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045e1 	.word	0x080045e1
 80045cc:	080045e7 	.word	0x080045e7
 80045d0:	080045db 	.word	0x080045db
 80045d4:	2301      	movs	r3, #1
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e0b2      	b.n	8004740 <UART_SetConfig+0x210>
 80045da:	2302      	movs	r3, #2
 80045dc:	77fb      	strb	r3, [r7, #31]
 80045de:	e0af      	b.n	8004740 <UART_SetConfig+0x210>
 80045e0:	2304      	movs	r3, #4
 80045e2:	77fb      	strb	r3, [r7, #31]
 80045e4:	e0ac      	b.n	8004740 <UART_SetConfig+0x210>
 80045e6:	2308      	movs	r3, #8
 80045e8:	77fb      	strb	r3, [r7, #31]
 80045ea:	e0a9      	b.n	8004740 <UART_SetConfig+0x210>
 80045ec:	2310      	movs	r3, #16
 80045ee:	77fb      	strb	r3, [r7, #31]
 80045f0:	bf00      	nop
 80045f2:	e0a5      	b.n	8004740 <UART_SetConfig+0x210>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a88      	ldr	r2, [pc, #544]	; (800481c <UART_SetConfig+0x2ec>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d123      	bne.n	8004646 <UART_SetConfig+0x116>
 80045fe:	4b86      	ldr	r3, [pc, #536]	; (8004818 <UART_SetConfig+0x2e8>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460a:	d012      	beq.n	8004632 <UART_SetConfig+0x102>
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d802      	bhi.n	8004618 <UART_SetConfig+0xe8>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <UART_SetConfig+0xf6>
 8004616:	e012      	b.n	800463e <UART_SetConfig+0x10e>
 8004618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800461c:	d00c      	beq.n	8004638 <UART_SetConfig+0x108>
 800461e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004622:	d003      	beq.n	800462c <UART_SetConfig+0xfc>
 8004624:	e00b      	b.n	800463e <UART_SetConfig+0x10e>
 8004626:	2300      	movs	r3, #0
 8004628:	77fb      	strb	r3, [r7, #31]
 800462a:	e089      	b.n	8004740 <UART_SetConfig+0x210>
 800462c:	2302      	movs	r3, #2
 800462e:	77fb      	strb	r3, [r7, #31]
 8004630:	e086      	b.n	8004740 <UART_SetConfig+0x210>
 8004632:	2304      	movs	r3, #4
 8004634:	77fb      	strb	r3, [r7, #31]
 8004636:	e083      	b.n	8004740 <UART_SetConfig+0x210>
 8004638:	2308      	movs	r3, #8
 800463a:	77fb      	strb	r3, [r7, #31]
 800463c:	e080      	b.n	8004740 <UART_SetConfig+0x210>
 800463e:	2310      	movs	r3, #16
 8004640:	77fb      	strb	r3, [r7, #31]
 8004642:	bf00      	nop
 8004644:	e07c      	b.n	8004740 <UART_SetConfig+0x210>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a75      	ldr	r2, [pc, #468]	; (8004820 <UART_SetConfig+0x2f0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d123      	bne.n	8004698 <UART_SetConfig+0x168>
 8004650:	4b71      	ldr	r3, [pc, #452]	; (8004818 <UART_SetConfig+0x2e8>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004658:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800465c:	d012      	beq.n	8004684 <UART_SetConfig+0x154>
 800465e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004662:	d802      	bhi.n	800466a <UART_SetConfig+0x13a>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <UART_SetConfig+0x148>
 8004668:	e012      	b.n	8004690 <UART_SetConfig+0x160>
 800466a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800466e:	d00c      	beq.n	800468a <UART_SetConfig+0x15a>
 8004670:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004674:	d003      	beq.n	800467e <UART_SetConfig+0x14e>
 8004676:	e00b      	b.n	8004690 <UART_SetConfig+0x160>
 8004678:	2300      	movs	r3, #0
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e060      	b.n	8004740 <UART_SetConfig+0x210>
 800467e:	2302      	movs	r3, #2
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e05d      	b.n	8004740 <UART_SetConfig+0x210>
 8004684:	2304      	movs	r3, #4
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e05a      	b.n	8004740 <UART_SetConfig+0x210>
 800468a:	2308      	movs	r3, #8
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e057      	b.n	8004740 <UART_SetConfig+0x210>
 8004690:	2310      	movs	r3, #16
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	bf00      	nop
 8004696:	e053      	b.n	8004740 <UART_SetConfig+0x210>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a61      	ldr	r2, [pc, #388]	; (8004824 <UART_SetConfig+0x2f4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d123      	bne.n	80046ea <UART_SetConfig+0x1ba>
 80046a2:	4b5d      	ldr	r3, [pc, #372]	; (8004818 <UART_SetConfig+0x2e8>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80046aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ae:	d012      	beq.n	80046d6 <UART_SetConfig+0x1a6>
 80046b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b4:	d802      	bhi.n	80046bc <UART_SetConfig+0x18c>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <UART_SetConfig+0x19a>
 80046ba:	e012      	b.n	80046e2 <UART_SetConfig+0x1b2>
 80046bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c0:	d00c      	beq.n	80046dc <UART_SetConfig+0x1ac>
 80046c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046c6:	d003      	beq.n	80046d0 <UART_SetConfig+0x1a0>
 80046c8:	e00b      	b.n	80046e2 <UART_SetConfig+0x1b2>
 80046ca:	2300      	movs	r3, #0
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	e037      	b.n	8004740 <UART_SetConfig+0x210>
 80046d0:	2302      	movs	r3, #2
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e034      	b.n	8004740 <UART_SetConfig+0x210>
 80046d6:	2304      	movs	r3, #4
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e031      	b.n	8004740 <UART_SetConfig+0x210>
 80046dc:	2308      	movs	r3, #8
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e02e      	b.n	8004740 <UART_SetConfig+0x210>
 80046e2:	2310      	movs	r3, #16
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	bf00      	nop
 80046e8:	e02a      	b.n	8004740 <UART_SetConfig+0x210>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a4e      	ldr	r2, [pc, #312]	; (8004828 <UART_SetConfig+0x2f8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d123      	bne.n	800473c <UART_SetConfig+0x20c>
 80046f4:	4b48      	ldr	r3, [pc, #288]	; (8004818 <UART_SetConfig+0x2e8>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80046fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004700:	d012      	beq.n	8004728 <UART_SetConfig+0x1f8>
 8004702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004706:	d802      	bhi.n	800470e <UART_SetConfig+0x1de>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <UART_SetConfig+0x1ec>
 800470c:	e012      	b.n	8004734 <UART_SetConfig+0x204>
 800470e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004712:	d00c      	beq.n	800472e <UART_SetConfig+0x1fe>
 8004714:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004718:	d003      	beq.n	8004722 <UART_SetConfig+0x1f2>
 800471a:	e00b      	b.n	8004734 <UART_SetConfig+0x204>
 800471c:	2300      	movs	r3, #0
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	e00e      	b.n	8004740 <UART_SetConfig+0x210>
 8004722:	2302      	movs	r3, #2
 8004724:	77fb      	strb	r3, [r7, #31]
 8004726:	e00b      	b.n	8004740 <UART_SetConfig+0x210>
 8004728:	2304      	movs	r3, #4
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e008      	b.n	8004740 <UART_SetConfig+0x210>
 800472e:	2308      	movs	r3, #8
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e005      	b.n	8004740 <UART_SetConfig+0x210>
 8004734:	2310      	movs	r3, #16
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	bf00      	nop
 800473a:	e001      	b.n	8004740 <UART_SetConfig+0x210>
 800473c:	2310      	movs	r3, #16
 800473e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004748:	f040 8090 	bne.w	800486c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800474c:	7ffb      	ldrb	r3, [r7, #31]
 800474e:	2b08      	cmp	r3, #8
 8004750:	d86c      	bhi.n	800482c <UART_SetConfig+0x2fc>
 8004752:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0x228>)
 8004754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004758:	0800477d 	.word	0x0800477d
 800475c:	0800479d 	.word	0x0800479d
 8004760:	080047bd 	.word	0x080047bd
 8004764:	0800482d 	.word	0x0800482d
 8004768:	080047d9 	.word	0x080047d9
 800476c:	0800482d 	.word	0x0800482d
 8004770:	0800482d 	.word	0x0800482d
 8004774:	0800482d 	.word	0x0800482d
 8004778:	080047f9 	.word	0x080047f9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fe fe2e 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004780:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	005a      	lsls	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	441a      	add	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	b29b      	uxth	r3, r3
 8004798:	61bb      	str	r3, [r7, #24]
        break;
 800479a:	e04a      	b.n	8004832 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800479c:	f7fe fe40 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
 80047a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	005a      	lsls	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	441a      	add	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	61bb      	str	r3, [r7, #24]
        break;
 80047ba:	e03a      	b.n	8004832 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80047c6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6852      	ldr	r2, [r2, #4]
 80047ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	61bb      	str	r3, [r7, #24]
        break;
 80047d6:	e02c      	b.n	8004832 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d8:	f7fe fd8a 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80047dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	005a      	lsls	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	61bb      	str	r3, [r7, #24]
        break;
 80047f6:	e01c      	b.n	8004832 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	b29b      	uxth	r3, r3
 800480c:	61bb      	str	r3, [r7, #24]
        break;
 800480e:	e010      	b.n	8004832 <UART_SetConfig+0x302>
 8004810:	efff69f3 	.word	0xefff69f3
 8004814:	40013800 	.word	0x40013800
 8004818:	40021000 	.word	0x40021000
 800481c:	40004400 	.word	0x40004400
 8004820:	40004800 	.word	0x40004800
 8004824:	40004c00 	.word	0x40004c00
 8004828:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	75fb      	strb	r3, [r7, #23]
        break;
 8004830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b0f      	cmp	r3, #15
 8004836:	d916      	bls.n	8004866 <UART_SetConfig+0x336>
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483e:	d212      	bcs.n	8004866 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f023 030f 	bic.w	r3, r3, #15
 8004848:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	b29b      	uxth	r3, r3
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	b29a      	uxth	r2, r3
 8004856:	897b      	ldrh	r3, [r7, #10]
 8004858:	4313      	orrs	r3, r2
 800485a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	897a      	ldrh	r2, [r7, #10]
 8004862:	60da      	str	r2, [r3, #12]
 8004864:	e072      	b.n	800494c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
 800486a:	e06f      	b.n	800494c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800486c:	7ffb      	ldrb	r3, [r7, #31]
 800486e:	2b08      	cmp	r3, #8
 8004870:	d85b      	bhi.n	800492a <UART_SetConfig+0x3fa>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0x348>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048bb 	.word	0x080048bb
 8004880:	080048d9 	.word	0x080048d9
 8004884:	0800492b 	.word	0x0800492b
 8004888:	080048f5 	.word	0x080048f5
 800488c:	0800492b 	.word	0x0800492b
 8004890:	0800492b 	.word	0x0800492b
 8004894:	0800492b 	.word	0x0800492b
 8004898:	08004913 	.word	0x08004913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800489c:	f7fe fd9e 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 80048a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	085a      	lsrs	r2, r3, #1
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	441a      	add	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	61bb      	str	r3, [r7, #24]
        break;
 80048b8:	e03a      	b.n	8004930 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048ba:	f7fe fdb1 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
 80048be:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	085a      	lsrs	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	441a      	add	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	61bb      	str	r3, [r7, #24]
        break;
 80048d6:	e02b      	b.n	8004930 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80048e2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6852      	ldr	r2, [r2, #4]
 80048ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	61bb      	str	r3, [r7, #24]
        break;
 80048f2:	e01d      	b.n	8004930 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f4:	f7fe fcfc 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80048f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	085a      	lsrs	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	441a      	add	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	b29b      	uxth	r3, r3
 800490e:	61bb      	str	r3, [r7, #24]
        break;
 8004910:	e00e      	b.n	8004930 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	b29b      	uxth	r3, r3
 8004926:	61bb      	str	r3, [r7, #24]
        break;
 8004928:	e002      	b.n	8004930 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
        break;
 800492e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b0f      	cmp	r3, #15
 8004934:	d908      	bls.n	8004948 <UART_SetConfig+0x418>
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493c:	d204      	bcs.n	8004948 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	e001      	b.n	800494c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004958:	7dfb      	ldrb	r3, [r7, #23]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop

08004964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a62:	d10a      	bne.n	8004a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ab6:	f7fc f849 	bl	8000b4c <HAL_GetTick>
 8004aba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d10e      	bne.n	8004ae8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f82a 	bl	8004b32 <UART_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e020      	b.n	8004b2a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d10e      	bne.n	8004b14 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f814 	bl	8004b32 <UART_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e00a      	b.n	8004b2a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b42:	e05d      	b.n	8004c00 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b4a:	d059      	beq.n	8004c00 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4c:	f7fb fffe 	bl	8000b4c <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d11b      	bne.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b70:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e042      	b.n	8004c20 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02b      	beq.n	8004c00 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb6:	d123      	bne.n	8004c00 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bd0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e00f      	b.n	8004c20 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	bf0c      	ite	eq
 8004c10:	2301      	moveq	r3, #1
 8004c12:	2300      	movne	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d092      	beq.n	8004b44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <LL_EXTI_EnableIT_0_31+0x20>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4904      	ldr	r1, [pc, #16]	; (8004c48 <LL_EXTI_EnableIT_0_31+0x20>)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40010400 	.word	0x40010400

08004c4c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <LL_EXTI_EnableIT_32_63+0x20>)
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	4904      	ldr	r1, [pc, #16]	; (8004c6c <LL_EXTI_EnableIT_32_63+0x20>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	620b      	str	r3, [r1, #32]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40010400 	.word	0x40010400

08004c70 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <LL_EXTI_DisableIT_0_31+0x24>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	4904      	ldr	r1, [pc, #16]	; (8004c94 <LL_EXTI_DisableIT_0_31+0x24>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010400 	.word	0x40010400

08004c98 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <LL_EXTI_DisableIT_32_63+0x24>)
 8004ca2:	6a1a      	ldr	r2, [r3, #32]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	4904      	ldr	r1, [pc, #16]	; (8004cbc <LL_EXTI_DisableIT_32_63+0x24>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	620b      	str	r3, [r1, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010400 	.word	0x40010400

08004cc0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	4904      	ldr	r1, [pc, #16]	; (8004ce0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	604b      	str	r3, [r1, #4]

}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	40010400 	.word	0x40010400

08004ce4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf0:	4904      	ldr	r1, [pc, #16]	; (8004d04 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40010400 	.word	0x40010400

08004d08 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	4904      	ldr	r1, [pc, #16]	; (8004d2c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	604b      	str	r3, [r1, #4]
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010400 	.word	0x40010400

08004d30 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	4904      	ldr	r1, [pc, #16]	; (8004d54 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40010400 	.word	0x40010400

08004d58 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	4904      	ldr	r1, [pc, #16]	; (8004d78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	608b      	str	r3, [r1, #8]

}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	40010400 	.word	0x40010400

08004d7c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d88:	4904      	ldr	r1, [pc, #16]	; (8004d9c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40010400 	.word	0x40010400

08004da0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	43db      	mvns	r3, r3
 8004db0:	4904      	ldr	r1, [pc, #16]	; (8004dc4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]

}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010400 	.word	0x40010400

08004dc8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	4904      	ldr	r1, [pc, #16]	; (8004dec <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40010400 	.word	0x40010400

08004df0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	4904      	ldr	r1, [pc, #16]	; (8004e10 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60cb      	str	r3, [r1, #12]
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	40010400 	.word	0x40010400

08004e14 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	4904      	ldr	r1, [pc, #16]	; (8004e34 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	40010400 	.word	0x40010400

08004e38 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	43db      	mvns	r3, r3
 8004e48:	4904      	ldr	r1, [pc, #16]	; (8004e5c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	60cb      	str	r3, [r1, #12]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40010400 	.word	0x40010400

08004e60 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	4904      	ldr	r1, [pc, #16]	; (8004e84 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010400 	.word	0x40010400

08004e88 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004e90:	2300      	movs	r3, #0
 8004e92:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	7a1b      	ldrb	r3, [r3, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80c2 	beq.w	8005022 <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d05b      	beq.n	8004f5e <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7a5b      	ldrb	r3, [r3, #9]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d00e      	beq.n	8004ecc <LL_EXTI_Init+0x44>
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d017      	beq.n	8004ee2 <LL_EXTI_Init+0x5a>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d120      	bne.n	8004ef8 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff ff24 	bl	8004d08 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff feaf 	bl	8004c28 <LL_EXTI_EnableIT_0_31>
          break;
 8004eca:	e018      	b.n	8004efe <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fecd 	bl	8004c70 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fef0 	bl	8004cc0 <LL_EXTI_EnableEvent_0_31>
          break;
 8004ee0:	e00d      	b.n	8004efe <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fe9e 	bl	8004c28 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fee5 	bl	8004cc0 <LL_EXTI_EnableEvent_0_31>
          break;
 8004ef6:	e002      	b.n	8004efe <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
          break;
 8004efc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	7a9b      	ldrb	r3, [r3, #10]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d02b      	beq.n	8004f5e <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	7a9b      	ldrb	r3, [r3, #10]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d00e      	beq.n	8004f2c <LL_EXTI_Init+0xa4>
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d017      	beq.n	8004f42 <LL_EXTI_Init+0xba>
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d120      	bne.n	8004f58 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff ff8c 	bl	8004e38 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff ff17 	bl	8004d58 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004f2a:	e019      	b.n	8004f60 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff ff35 	bl	8004da0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff ff58 	bl	8004df0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004f40:	e00e      	b.n	8004f60 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ff06 	bl	8004d58 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ff4d 	bl	8004df0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004f56:	e003      	b.n	8004f60 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
            break;
 8004f5c:	e000      	b.n	8004f60 <LL_EXTI_Init+0xd8>
        }
      }
 8004f5e:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d071      	beq.n	800504c <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7a5b      	ldrb	r3, [r3, #9]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d00e      	beq.n	8004f8e <LL_EXTI_Init+0x106>
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d017      	beq.n	8004fa4 <LL_EXTI_Init+0x11c>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d120      	bne.n	8004fba <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fed7 	bl	8004d30 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fe60 	bl	8004c4c <LL_EXTI_EnableIT_32_63>
          break;
 8004f8c:	e018      	b.n	8004fc0 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fe80 	bl	8004c98 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fea1 	bl	8004ce4 <LL_EXTI_EnableEvent_32_63>
          break;
 8004fa2:	e00d      	b.n	8004fc0 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff fe4f 	bl	8004c4c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fe96 	bl	8004ce4 <LL_EXTI_EnableEvent_32_63>
          break;
 8004fb8:	e002      	b.n	8004fc0 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
          break;
 8004fbe:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	7a9b      	ldrb	r3, [r3, #10]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d041      	beq.n	800504c <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	7a9b      	ldrb	r3, [r3, #10]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d00e      	beq.n	8004fee <LL_EXTI_Init+0x166>
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d017      	beq.n	8005004 <LL_EXTI_Init+0x17c>
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d120      	bne.n	800501a <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff ff3f 	bl	8004e60 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff fec8 	bl	8004d7c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004fec:	e02f      	b.n	800504e <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fee8 	bl	8004dc8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff ff09 	bl	8004e14 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005002:	e024      	b.n	800504e <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff feb7 	bl	8004d7c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff fefe 	bl	8004e14 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005018:	e019      	b.n	800504e <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
            break;
 800501e:	bf00      	nop
 8005020:	e015      	b.n	800504e <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fe22 	bl	8004c70 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fe69 	bl	8004d08 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fe2c 	bl	8004c98 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fe73 	bl	8004d30 <LL_EXTI_DisableEvent_32_63>
 800504a:	e000      	b.n	800504e <LL_EXTI_Init+0x1c6>
      }
 800504c:	bf00      	nop
#endif
  }
  return status;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <LL_GPIO_SetPinMode>:
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	fa93 f3a3 	rbit	r3, r3
 8005072:	613b      	str	r3, [r7, #16]
  return result;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	2103      	movs	r1, #3
 8005080:	fa01 f303 	lsl.w	r3, r1, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	401a      	ands	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	fa93 f3a3 	rbit	r3, r3
 8005092:	61bb      	str	r3, [r7, #24]
  return result;
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	3724      	adds	r7, #36	; 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <LL_GPIO_SetPinOutputType>:
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	401a      	ands	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	431a      	orrs	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	605a      	str	r2, [r3, #4]
}
 80050da:	bf00      	nop
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <LL_GPIO_SetPinSpeed>:
{
 80050e6:	b480      	push	{r7}
 80050e8:	b089      	sub	sp, #36	; 0x24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	fa93 f3a3 	rbit	r3, r3
 8005100:	613b      	str	r3, [r7, #16]
  return result;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	fab3 f383 	clz	r3, r3
 8005108:	b2db      	uxtb	r3, r3
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	2103      	movs	r1, #3
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	401a      	ands	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa93 f3a3 	rbit	r3, r3
 8005120:	61bb      	str	r3, [r7, #24]
  return result;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	fab3 f383 	clz	r3, r3
 8005128:	b2db      	uxtb	r3, r3
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	fa01 f303 	lsl.w	r3, r1, r3
 8005132:	431a      	orrs	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	609a      	str	r2, [r3, #8]
}
 8005138:	bf00      	nop
 800513a:	3724      	adds	r7, #36	; 0x24
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_GPIO_SetPinPull>:
{
 8005144:	b480      	push	{r7}
 8005146:	b089      	sub	sp, #36	; 0x24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	613b      	str	r3, [r7, #16]
  return result;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	2103      	movs	r1, #3
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	401a      	ands	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	61bb      	str	r3, [r7, #24]
  return result;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	fab3 f383 	clz	r3, r3
 8005186:	b2db      	uxtb	r3, r3
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
 8005190:	431a      	orrs	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	60da      	str	r2, [r3, #12]
}
 8005196:	bf00      	nop
 8005198:	3724      	adds	r7, #36	; 0x24
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <LL_GPIO_SetAFPin_0_7>:
{
 80051a2:	b480      	push	{r7}
 80051a4:	b089      	sub	sp, #36	; 0x24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1a      	ldr	r2, [r3, #32]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	fa93 f3a3 	rbit	r3, r3
 80051bc:	613b      	str	r3, [r7, #16]
  return result;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	fab3 f383 	clz	r3, r3
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	210f      	movs	r1, #15
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	43db      	mvns	r3, r3
 80051d0:	401a      	ands	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	fa93 f3a3 	rbit	r3, r3
 80051dc:	61bb      	str	r3, [r7, #24]
  return result;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	fab3 f383 	clz	r3, r3
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	fa01 f303 	lsl.w	r3, r1, r3
 80051ee:	431a      	orrs	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	3724      	adds	r7, #36	; 0x24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <LL_GPIO_SetAFPin_8_15>:
{
 8005200:	b480      	push	{r7}
 8005202:	b089      	sub	sp, #36	; 0x24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	fa93 f3a3 	rbit	r3, r3
 800521c:	613b      	str	r3, [r7, #16]
  return result;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	fab3 f383 	clz	r3, r3
 8005224:	b2db      	uxtb	r3, r3
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	210f      	movs	r1, #15
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	401a      	ands	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	0a1b      	lsrs	r3, r3, #8
 8005236:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	fa93 f3a3 	rbit	r3, r3
 800523e:	61bb      	str	r3, [r7, #24]
  return result;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	fab3 f383 	clz	r3, r3
 8005246:	b2db      	uxtb	r3, r3
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	fa01 f303 	lsl.w	r3, r1, r3
 8005250:	431a      	orrs	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005256:	bf00      	nop
 8005258:	3724      	adds	r7, #36	; 0x24
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b088      	sub	sp, #32
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	fa93 f3a3 	rbit	r3, r3
 8005278:	613b      	str	r3, [r7, #16]
  return result;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	fab3 f383 	clz	r3, r3
 8005280:	b2db      	uxtb	r3, r3
 8005282:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005284:	e049      	b.n	800531a <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	2101      	movs	r1, #1
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	fa01 f303 	lsl.w	r3, r1, r3
 8005292:	4013      	ands	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d03b      	beq.n	8005314 <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	461a      	mov	r2, r3
 80052a2:	69b9      	ldr	r1, [r7, #24]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff fed7 	bl	8005058 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d003      	beq.n	80052ba <LL_GPIO_Init+0x58>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d106      	bne.n	80052c8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	461a      	mov	r2, r3
 80052c0:	69b9      	ldr	r1, [r7, #24]
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff ff0f 	bl	80050e6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	461a      	mov	r2, r3
 80052ce:	69b9      	ldr	r1, [r7, #24]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ff37 	bl	8005144 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d11a      	bne.n	8005314 <LL_GPIO_Init+0xb2>
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	fa93 f3a3 	rbit	r3, r3
 80052e8:	60bb      	str	r3, [r7, #8]
  return result;
 80052ea:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80052ec:	fab3 f383 	clz	r3, r3
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b07      	cmp	r3, #7
 80052f4:	d807      	bhi.n	8005306 <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	461a      	mov	r2, r3
 80052fc:	69b9      	ldr	r1, [r7, #24]
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ff4f 	bl	80051a2 <LL_GPIO_SetAFPin_0_7>
 8005304:	e006      	b.n	8005314 <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	461a      	mov	r2, r3
 800530c:	69b9      	ldr	r1, [r7, #24]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ff76 	bl	8005200 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	3301      	adds	r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ae      	bne.n	8005286 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d003      	beq.n	8005338 <LL_GPIO_Init+0xd6>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d107      	bne.n	8005348 <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	6819      	ldr	r1, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	461a      	mov	r2, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff feb7 	bl	80050b6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <__libc_init_array>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	4e0d      	ldr	r6, [pc, #52]	; (800538c <__libc_init_array+0x38>)
 8005358:	4c0d      	ldr	r4, [pc, #52]	; (8005390 <__libc_init_array+0x3c>)
 800535a:	1ba4      	subs	r4, r4, r6
 800535c:	10a4      	asrs	r4, r4, #2
 800535e:	2500      	movs	r5, #0
 8005360:	42a5      	cmp	r5, r4
 8005362:	d109      	bne.n	8005378 <__libc_init_array+0x24>
 8005364:	4e0b      	ldr	r6, [pc, #44]	; (8005394 <__libc_init_array+0x40>)
 8005366:	4c0c      	ldr	r4, [pc, #48]	; (8005398 <__libc_init_array+0x44>)
 8005368:	f000 f820 	bl	80053ac <_init>
 800536c:	1ba4      	subs	r4, r4, r6
 800536e:	10a4      	asrs	r4, r4, #2
 8005370:	2500      	movs	r5, #0
 8005372:	42a5      	cmp	r5, r4
 8005374:	d105      	bne.n	8005382 <__libc_init_array+0x2e>
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800537c:	4798      	blx	r3
 800537e:	3501      	adds	r5, #1
 8005380:	e7ee      	b.n	8005360 <__libc_init_array+0xc>
 8005382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005386:	4798      	blx	r3
 8005388:	3501      	adds	r5, #1
 800538a:	e7f2      	b.n	8005372 <__libc_init_array+0x1e>
 800538c:	080053fc 	.word	0x080053fc
 8005390:	080053fc 	.word	0x080053fc
 8005394:	080053fc 	.word	0x080053fc
 8005398:	08005400 	.word	0x08005400

0800539c <memset>:
 800539c:	4402      	add	r2, r0
 800539e:	4603      	mov	r3, r0
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d100      	bne.n	80053a6 <memset+0xa>
 80053a4:	4770      	bx	lr
 80053a6:	f803 1b01 	strb.w	r1, [r3], #1
 80053aa:	e7f9      	b.n	80053a0 <memset+0x4>

080053ac <_init>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr

080053b8 <_fini>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	bf00      	nop
 80053bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053be:	bc08      	pop	{r3}
 80053c0:	469e      	mov	lr, r3
 80053c2:	4770      	bx	lr
