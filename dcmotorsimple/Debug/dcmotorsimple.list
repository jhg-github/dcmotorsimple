
dcmotorsimple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e14  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fe0  08005fe0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005fe0  08005fe0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fe0  08005fe0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe4  08005fe4  00015fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000010  08005ff8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08005ff8  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d47  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002884  00000000  00000000  00030d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001038  00000000  00000000  00033610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  00034648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000032e8  00000000  00000000  00035518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000105c6  00000000  00000000  00038800  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c028d  00000000  00000000  00048dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00109053  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000431c  00000000  00000000  001090d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005f90 	.word	0x08005f90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005f90 	.word	0x08005f90

080001d4 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	463b      	mov	r3, r7
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80001ea:	4b28      	ldr	r3, [pc, #160]	; (800028c <MX_ADC2_Init+0xb8>)
 80001ec:	4a28      	ldr	r2, [pc, #160]	; (8000290 <MX_ADC2_Init+0xbc>)
 80001ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80001f0:	4b26      	ldr	r3, [pc, #152]	; (800028c <MX_ADC2_Init+0xb8>)
 80001f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80001f6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80001f8:	4b24      	ldr	r3, [pc, #144]	; (800028c <MX_ADC2_Init+0xb8>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001fe:	4b23      	ldr	r3, [pc, #140]	; (800028c <MX_ADC2_Init+0xb8>)
 8000200:	2200      	movs	r2, #0
 8000202:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000204:	4b21      	ldr	r3, [pc, #132]	; (800028c <MX_ADC2_Init+0xb8>)
 8000206:	2200      	movs	r2, #0
 8000208:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800020a:	4b20      	ldr	r3, [pc, #128]	; (800028c <MX_ADC2_Init+0xb8>)
 800020c:	2200      	movs	r2, #0
 800020e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000212:	4b1e      	ldr	r3, [pc, #120]	; (800028c <MX_ADC2_Init+0xb8>)
 8000214:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000218:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800021a:	4b1c      	ldr	r3, [pc, #112]	; (800028c <MX_ADC2_Init+0xb8>)
 800021c:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8000220:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000222:	4b1a      	ldr	r3, [pc, #104]	; (800028c <MX_ADC2_Init+0xb8>)
 8000224:	2200      	movs	r2, #0
 8000226:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <MX_ADC2_Init+0xb8>)
 800022a:	2201      	movs	r2, #1
 800022c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <MX_ADC2_Init+0xb8>)
 8000230:	2200      	movs	r2, #0
 8000232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_ADC2_Init+0xb8>)
 8000238:	2204      	movs	r2, #4
 800023a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800023c:	4b13      	ldr	r3, [pc, #76]	; (800028c <MX_ADC2_Init+0xb8>)
 800023e:	2200      	movs	r2, #0
 8000240:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <MX_ADC2_Init+0xb8>)
 8000244:	2200      	movs	r2, #0
 8000246:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000248:	4810      	ldr	r0, [pc, #64]	; (800028c <MX_ADC2_Init+0xb8>)
 800024a:	f000 fd73 	bl	8000d34 <HAL_ADC_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000254:	f000 fa4e 	bl	80006f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8000258:	2311      	movs	r3, #17
 800025a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800025c:	2301      	movs	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000264:	2306      	movs	r3, #6
 8000266:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000270:	463b      	mov	r3, r7
 8000272:	4619      	mov	r1, r3
 8000274:	4805      	ldr	r0, [pc, #20]	; (800028c <MX_ADC2_Init+0xb8>)
 8000276:	f001 fc43 	bl	8001b00 <HAL_ADC_ConfigChannel>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000280:	f000 fa38 	bl	80006f4 <Error_Handler>
  }

}
 8000284:	bf00      	nop
 8000286:	3718      	adds	r7, #24
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000030 	.word	0x20000030
 8000290:	50000100 	.word	0x50000100

08000294 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC2)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <HAL_ADC_MspInit+0x44>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d113      	bne.n	80002ce <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <HAL_ADC_MspInit+0x48>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a0c      	ldr	r2, [pc, #48]	; (80002dc <HAL_ADC_MspInit+0x48>)
 80002ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b0:	6153      	str	r3, [r2, #20]
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <HAL_ADC_MspInit+0x48>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ba:	60fb      	str	r3, [r7, #12]
 80002bc:	68fb      	ldr	r3, [r7, #12]

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80002be:	2200      	movs	r2, #0
 80002c0:	2100      	movs	r1, #0
 80002c2:	2012      	movs	r0, #18
 80002c4:	f002 f8a1 	bl	800240a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80002c8:	2012      	movs	r0, #18
 80002ca:	f002 f8ba 	bl	8002442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	50000100 	.word	0x50000100
 80002dc:	40021000 	.word	0x40021000

080002e0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80002ea:	4a13      	ldr	r2, [pc, #76]	; (8000338 <LL_SYSCFG_SetEXTISource+0x58>)
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	3302      	adds	r3, #2
 80002f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	0c1b      	lsrs	r3, r3, #16
 80002fa:	43db      	mvns	r3, r3
 80002fc:	ea02 0103 	and.w	r1, r2, r3
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	0c1b      	lsrs	r3, r3, #16
 8000304:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	fa93 f3a3 	rbit	r3, r3
 800030c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	fab3 f383 	clz	r3, r3
 8000314:	b2db      	uxtb	r3, r3
 8000316:	461a      	mov	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	fa03 f202 	lsl.w	r2, r3, r2
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <LL_SYSCFG_SetEXTISource+0x58>)
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	430a      	orrs	r2, r1
 8000326:	3302      	adds	r3, #2
 8000328:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40010000 	.word	0x40010000

0800033c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	fa93 f3a3 	rbit	r3, r3
 8000356:	613b      	str	r3, [r7, #16]
  return result;
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	fab3 f383 	clz	r3, r3
 800035e:	b2db      	uxtb	r3, r3
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	2103      	movs	r1, #3
 8000364:	fa01 f303 	lsl.w	r3, r1, r3
 8000368:	43db      	mvns	r3, r3
 800036a:	401a      	ands	r2, r3
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000370:	69fb      	ldr	r3, [r7, #28]
 8000372:	fa93 f3a3 	rbit	r3, r3
 8000376:	61bb      	str	r3, [r7, #24]
  return result;
 8000378:	69bb      	ldr	r3, [r7, #24]
 800037a:	fab3 f383 	clz	r3, r3
 800037e:	b2db      	uxtb	r3, r3
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	6879      	ldr	r1, [r7, #4]
 8000384:	fa01 f303 	lsl.w	r3, r1, r3
 8000388:	431a      	orrs	r2, r3
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	601a      	str	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	3724      	adds	r7, #36	; 0x24
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800039a:	b480      	push	{r7}
 800039c:	b089      	sub	sp, #36	; 0x24
 800039e:	af00      	add	r7, sp, #0
 80003a0:	60f8      	str	r0, [r7, #12]
 80003a2:	60b9      	str	r1, [r7, #8]
 80003a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	68da      	ldr	r2, [r3, #12]
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	fa93 f3a3 	rbit	r3, r3
 80003b4:	613b      	str	r3, [r7, #16]
  return result;
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	fab3 f383 	clz	r3, r3
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	2103      	movs	r1, #3
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	43db      	mvns	r3, r3
 80003c8:	401a      	ands	r2, r3
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	fa93 f3a3 	rbit	r3, r3
 80003d4:	61bb      	str	r3, [r7, #24]
  return result;
 80003d6:	69bb      	ldr	r3, [r7, #24]
 80003d8:	fab3 f383 	clz	r3, r3
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	6879      	ldr	r1, [r7, #4]
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	431a      	orrs	r2, r3
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	60da      	str	r2, [r3, #12]
}
 80003ec:	bf00      	nop
 80003ee:	3724      	adds	r7, #36	; 0x24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	683a      	ldr	r2, [r7, #0]
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	4907      	ldr	r1, [pc, #28]	; (8000440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4313      	orrs	r3, r2
 8000426:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4013      	ands	r3, r2
 8000430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000432:	68fb      	ldr	r3, [r7, #12]
}
 8000434:	bf00      	nop
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40021000 	.word	0x40021000

08000444 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800044a:	f107 031c 	add.w	r3, r7, #28
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
 8000464:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000466:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800046a:	f7ff ffd3 	bl	8000414 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800046e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000472:	f7ff ffcf 	bl	8000414 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000476:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800047a:	f7ff ffcb 	bl	8000414 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800047e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000482:	f7ff ffc7 	bl	8000414 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(EN_B_GPIO_Port, EN_B_Pin);
 8000486:	2102      	movs	r1, #2
 8000488:	4827      	ldr	r0, [pc, #156]	; (8000528 <MX_GPIO_Init+0xe4>)
 800048a:	f7ff ffb5 	bl	80003f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LD2_Pin|DEBUG_PIN_Pin);
 800048e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000496:	f7ff ffaf 	bl	80003f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800049a:	4924      	ldr	r1, [pc, #144]	; (800052c <MX_GPIO_Init+0xe8>)
 800049c:	2002      	movs	r0, #2
 800049e:	f7ff ff1f 	bl	80002e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a8:	481f      	ldr	r0, [pc, #124]	; (8000528 <MX_GPIO_Init+0xe4>)
 80004aa:	f7ff ff76 	bl	800039a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b4:	481c      	ldr	r0, [pc, #112]	; (8000528 <MX_GPIO_Init+0xe4>)
 80004b6:	f7ff ff41 	bl	800033c <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80004ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004be:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004c4:	2301      	movs	r3, #1
 80004c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004ca:	2300      	movs	r3, #0
 80004cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80004d0:	2302      	movs	r3, #2
 80004d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	4618      	mov	r0, r3
 80004dc:	f005 fac6 	bl	8005a6c <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = EN_B_Pin;
 80004e0:	2302      	movs	r3, #2
 80004e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004e4:	2301      	movs	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EN_B_GPIO_Port, &GPIO_InitStruct);
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4619      	mov	r1, r3
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <MX_GPIO_Init+0xe4>)
 80004fa:	f005 fca4 	bl	8005e46 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin|DEBUG_PIN_Pin;
 80004fe:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000502:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000504:	2301      	movs	r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	4619      	mov	r1, r3
 8000518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051c:	f005 fc93 	bl	8005e46 <LL_GPIO_Init>

}
 8000520:	bf00      	nop
 8000522:	3728      	adds	r7, #40	; 0x28
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	48000800 	.word	0x48000800
 800052c:	00f00003 	.word	0x00f00003

08000530 <LL_GPIO_SetOutputPin>:
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	619a      	str	r2, [r3, #24]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <test_SYNC_PWM_ADC>:
////	}
//}

static volatile uint16_t duty = 2000;
static volatile uint16_t duty_adc;
void test_SYNC_PWM_ADC(){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000550:	2100      	movs	r1, #0
 8000552:	4827      	ldr	r0, [pc, #156]	; (80005f0 <test_SYNC_PWM_ADC+0xa4>)
 8000554:	f001 fa42 	bl	80019dc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc2);
 8000558:	4825      	ldr	r0, [pc, #148]	; (80005f0 <test_SYNC_PWM_ADC+0xa4>)
 800055a:	f000 fde5 	bl	8001128 <HAL_ADC_Start_IT>
	HAL_OPAMP_SelfCalibrate(&hopamp2);
 800055e:	4825      	ldr	r0, [pc, #148]	; (80005f4 <test_SYNC_PWM_ADC+0xa8>)
 8000560:	f002 f9eb 	bl	800293a <HAL_OPAMP_SelfCalibrate>
	HAL_OPAMP_Start(&hopamp2);
 8000564:	4823      	ldr	r0, [pc, #140]	; (80005f4 <test_SYNC_PWM_ADC+0xa8>)
 8000566:	f002 f9b7 	bl	80028d8 <HAL_OPAMP_Start>
	LL_GPIO_SetOutputPin(EN_B_GPIO_Port, EN_B_Pin);
 800056a:	2102      	movs	r1, #2
 800056c:	4822      	ldr	r0, [pc, #136]	; (80005f8 <test_SYNC_PWM_ADC+0xac>)
 800056e:	f7ff ffdf 	bl	8000530 <LL_GPIO_SetOutputPin>
	duty_adc = duty/2;
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <test_SYNC_PWM_ADC+0xb0>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	b29b      	uxth	r3, r3
 8000578:	085b      	lsrs	r3, r3, #1
 800057a:	b29a      	uxth	r2, r3
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <test_SYNC_PWM_ADC+0xb4>)
 800057e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <test_SYNC_PWM_ADC+0xb0>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	b29a      	uxth	r2, r3
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <test_SYNC_PWM_ADC+0xb8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <test_SYNC_PWM_ADC+0xb0>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <test_SYNC_PWM_ADC+0xb8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_adc);
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <test_SYNC_PWM_ADC+0xb4>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <test_SYNC_PWM_ADC+0xb8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <test_SYNC_PWM_ADC+0xb8>)
 80005a8:	f003 ff1a 	bl	80043e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005ac:	2104      	movs	r1, #4
 80005ae:	4815      	ldr	r0, [pc, #84]	; (8000604 <test_SYNC_PWM_ADC+0xb8>)
 80005b0:	f003 ff16 	bl	80043e0 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 80005b4:	2108      	movs	r1, #8
 80005b6:	4813      	ldr	r0, [pc, #76]	; (8000604 <test_SYNC_PWM_ADC+0xb8>)
 80005b8:	f003 fe86 	bl	80042c8 <HAL_TIM_OC_Start>
//	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
	while(1){
		duty_adc = duty/2;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <test_SYNC_PWM_ADC+0xb0>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	085b      	lsrs	r3, r3, #1
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <test_SYNC_PWM_ADC+0xb4>)
 80005c8:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <test_SYNC_PWM_ADC+0xb0>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <test_SYNC_PWM_ADC+0xb8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <test_SYNC_PWM_ADC+0xb0>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <test_SYNC_PWM_ADC+0xb8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_adc);
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <test_SYNC_PWM_ADC+0xb4>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <test_SYNC_PWM_ADC+0xb8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	63da      	str	r2, [r3, #60]	; 0x3c
		duty_adc = duty/2;
 80005ee:	e7e5      	b.n	80005bc <test_SYNC_PWM_ADC+0x70>
 80005f0:	20000030 	.word	0x20000030
 80005f4:	20000080 	.word	0x20000080
 80005f8:	48000800 	.word	0x48000800
 80005fc:	20000000 	.word	0x20000000
 8000600:	2000002c 	.word	0x2000002c
 8000604:	200000b4 	.word	0x200000b4

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 faec 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f80e 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f7ff ff16 	bl	8000444 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 fa4a 	bl	8000ab0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800061c:	f7ff fdda 	bl	80001d4 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000620:	f000 f96e 	bl	8000900 <MX_TIM2_Init>
  MX_OPAMP2_Init();
 8000624:	f000 f86e 	bl	8000704 <MX_OPAMP2_Init>
  //test_PwmADCSimple();
//  test_pid();
//  test_PWMBipolar();
//  test_pulse();
//  test_pulsePWM();
  test_SYNC_PWM_ADC();
 8000628:	f7ff ff90 	bl	800054c <test_SYNC_PWM_ADC>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while(1){
 800062c:	e7fe      	b.n	800062c <main+0x24>
	...

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a6      	sub	sp, #152	; 0x98
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800063a:	2228      	movs	r2, #40	; 0x28
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 fc9e 	bl	8005f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2258      	movs	r2, #88	; 0x58
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fc90 	bl	8005f80 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000678:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800067c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fa7a 	bl	8002b88 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800069a:	f000 f82b 	bl	80006f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 f97a 	bl	80039b4 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c6:	f000 f815 	bl	80006f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <SystemClock_Config+0xc0>)
 80006cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 fba1 	bl	8003e20 <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006e4:	f000 f806 	bl	80006f4 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3798      	adds	r7, #152	; 0x98
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	00100002 	.word	0x00100002

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <MX_OPAMP2_Init>:

OPAMP_HandleTypeDef hopamp2;

/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_OPAMP2_Init+0x44>)
 800070a:	4a10      	ldr	r2, [pc, #64]	; (800074c <MX_OPAMP2_Init+0x48>)
 800070c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_OPAMP2_Init+0x44>)
 8000710:	2240      	movs	r2, #64	; 0x40
 8000712:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_OPAMP2_Init+0x44>)
 8000716:	220c      	movs	r2, #12
 8000718:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_OPAMP2_Init+0x44>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_OPAMP2_Init+0x44>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_OPAMP2_Init+0x44>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_OPAMP2_Init+0x44>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_OPAMP2_Init+0x44>)
 8000734:	f002 f82a 	bl	800278c <HAL_OPAMP_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 800073e:	f7ff ffd9 	bl	80006f4 <Error_Handler>
  }

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000080 	.word	0x20000080
 800074c:	4001003c 	.word	0x4001003c

08000750 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <HAL_OPAMP_MspInit+0x5c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d118      	bne.n	80007a4 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_OPAMP_MspInit+0x60>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_OPAMP_MspInit+0x60>)
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_OPAMP_MspInit+0x60>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration    
    PA6     ------> OPAMP2_VOUT
    PA7     ------> OPAMP2_VINP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800078a:	23c0      	movs	r3, #192	; 0xc0
 800078c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078e:	2303      	movs	r3, #3
 8000790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f001 fe6a 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	4001003c 	.word	0x4001003c
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x44>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6193      	str	r3, [r2, #24]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x44>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x44>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	61d3      	str	r3, [r2, #28]
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x44>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <LL_GPIO_SetOutputPin>:
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	619a      	str	r2, [r3, #24]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <LL_GPIO_ResetOutputPin>:
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f9f4 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

	__HAL_ADC_CLEAR_FLAG(&hadc2, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <ADC1_2_IRQHandler+0x3c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	220c      	movs	r2, #12
 800089a:	601a      	str	r2, [r3, #0]
	LL_GPIO_SetOutputPin(DEBUG_PIN_GPIO_Port,DEBUG_PIN_Pin);
 800089c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f7ff ffaa 	bl	80007fc <LL_GPIO_SetOutputPin>
	ADCValue = HAL_ADC_GetValue(&hadc2);
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <ADC1_2_IRQHandler+0x3c>)
 80008aa:	f000 fd7d 	bl	80013a8 <HAL_ADC_GetValue>
 80008ae:	4603      	mov	r3, r0
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <ADC1_2_IRQHandler+0x40>)
 80008b4:	801a      	strh	r2, [r3, #0]
//	pid(ADCValue);
	LL_GPIO_ResetOutputPin(DEBUG_PIN_GPIO_Port,DEBUG_PIN_Pin);
 80008b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f7ff ffab 	bl	8000818 <LL_GPIO_ResetOutputPin>

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80008c2:	4802      	ldr	r0, [pc, #8]	; (80008cc <ADC1_2_IRQHandler+0x3c>)
 80008c4:	f000 fd7e 	bl	80013c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000030 	.word	0x20000030
 80008d0:	2000002e 	.word	0x2000002e

080008d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <SystemInit+0x28>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a07      	ldr	r2, [pc, #28]	; (80008fc <SystemInit+0x28>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <SystemInit+0x28>)
 80008ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ee:	609a      	str	r2, [r3, #8]
#endif
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000924:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <MX_TIM2_Init+0x108>)
 8000926:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800092c:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <MX_TIM2_Init+0x108>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <MX_TIM2_Init+0x108>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3600-1;
 8000938:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <MX_TIM2_Init+0x108>)
 800093a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800093e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <MX_TIM2_Init+0x108>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <MX_TIM2_Init+0x108>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800094c:	482e      	ldr	r0, [pc, #184]	; (8000a08 <MX_TIM2_Init+0x108>)
 800094e:	f003 fd1b 	bl	8004388 <HAL_TIM_PWM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000958:	f7ff fecc 	bl	80006f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800095c:	482a      	ldr	r0, [pc, #168]	; (8000a08 <MX_TIM2_Init+0x108>)
 800095e:	f003 fc7d 	bl	800425c <HAL_TIM_OC_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000968:	f7ff fec4 	bl	80006f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 800096c:	2360      	movs	r3, #96	; 0x60
 800096e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4823      	ldr	r0, [pc, #140]	; (8000a08 <MX_TIM2_Init+0x108>)
 800097c:	f004 faf0 	bl	8004f60 <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000986:	f7ff feb5 	bl	80006f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098a:	2360      	movs	r3, #96	; 0x60
 800098c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <MX_TIM2_Init+0x108>)
 80009a2:	f003 fdfb 	bl	800459c <HAL_TIM_PWM_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80009ac:	f7ff fea2 	bl	80006f4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	2204      	movs	r2, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4813      	ldr	r0, [pc, #76]	; (8000a08 <MX_TIM2_Init+0x108>)
 80009bc:	f003 fdee 	bl	800459c <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80009c6:	f7ff fe95 	bl	80006f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80009ca:	2330      	movs	r3, #48	; 0x30
 80009cc:	603b      	str	r3, [r7, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	2208      	movs	r2, #8
 80009d6:	4619      	mov	r1, r3
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <MX_TIM2_Init+0x108>)
 80009da:	f003 fd61 	bl	80044a0 <HAL_TIM_OC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80009e4:	f7ff fe86 	bl	80006f4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_TIM2_Init+0x108>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	69da      	ldr	r2, [r3, #28]
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_TIM2_Init+0x108>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0208 	orr.w	r2, r2, #8
 80009f6:	61da      	str	r2, [r3, #28]
  HAL_TIM_MspPostInit(&htim2);
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <MX_TIM2_Init+0x108>)
 80009fa:	f000 f825 	bl	8000a48 <HAL_TIM_MspPostInit>

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000b4 	.word	0x200000b4

08000a0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a1c:	d10b      	bne.n	8000a36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_TIM_PWM_MspInit+0x38>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_TIM_PWM_MspInit+0x38>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_TIM_PWM_MspInit+0x38>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a68:	d11c      	bne.n	8000aa4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_TIM_MspPostInit+0x64>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_TIM_MspPostInit+0x64>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_TIM_MspPostInit+0x64>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a82:	2303      	movs	r3, #3
 8000a84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f001 fcea 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000

08000ab0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <MX_USART2_UART_Init+0x5c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000af4:	f004 fac0 	bl	8005078 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000afe:	f7ff fdf9 	bl	80006f4 <Error_Handler>
  }

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200000f4 	.word	0x200000f4
 8000b0c:	40004400 	.word	0x40004400

08000b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0x7c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d128      	bne.n	8000b84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b62:	230c      	movs	r3, #12
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b72:	2307      	movs	r3, #7
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f001 fc7a 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	40021000 	.word	0x40021000

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b9a:	e003      	b.n	8000ba4 <LoopCopyDataInit>

08000b9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ba0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ba2:	3104      	adds	r1, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ba8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000baa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bac:	d3f6      	bcc.n	8000b9c <CopyDataInit>
	ldr	r2, =_sbss
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bb0:	e002      	b.n	8000bb8 <LoopFillZerobss>

08000bb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bb4:	f842 3b04 	str.w	r3, [r2], #4

08000bb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <LoopForever+0x16>)
	cmp	r2, r3
 8000bba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bbc:	d3f9      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bbe:	f7ff fe89 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f005 f9b9 	bl	8005f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc6:	f7ff fd1f 	bl	8000608 <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bcc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000bd0:	08005fe8 	.word	0x08005fe8
	ldr	r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bd8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000bdc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000be0:	20000178 	.word	0x20000178

08000be4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC3_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x28>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f001 fbfb 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fdd6 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fc13 	bl	800245e <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c50:	f001 fbdb 	bl	800240a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	2000000c 	.word	0x2000000c
 8000c70:	20000008 	.word	0x20000008

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	2000000c 	.word	0x2000000c
 8000c98:	20000174 	.word	0x20000174

08000c9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000174 	.word	0x20000174

08000cb4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_Delay+0x40>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000000c 	.word	0x2000000c

08000cf8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b09a      	sub	sp, #104	; 0x68
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e1e3      	b.n	800111c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d176      	bne.n	8000e54 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d152      	bne.n	8000e14 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fa83 	bl	8000294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d13b      	bne.n	8000e14 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f001 f9f9 	bl	8002194 <ADC_Disable>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d12f      	bne.n	8000e14 <HAL_ADC_Init+0xe0>
 8000db4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d12b      	bne.n	8000e14 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dc4:	f023 0302 	bic.w	r3, r3, #2
 8000dc8:	f043 0202 	orr.w	r2, r3, #2
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000dde:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000df0:	4b92      	ldr	r3, [pc, #584]	; (800103c <HAL_ADC_Init+0x308>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a92      	ldr	r2, [pc, #584]	; (8001040 <HAL_ADC_Init+0x30c>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9a      	lsrs	r2, r3, #18
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e06:	e002      	b.n	8000e0e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f9      	bne.n	8000e08 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e30:	d110      	bne.n	8000e54 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f023 0312 	bic.w	r3, r3, #18
 8000e3a:	f043 0210 	orr.w	r2, r3, #16
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f043 0201 	orr.w	r2, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f040 8150 	bne.w	8001102 <HAL_ADC_Init+0x3ce>
 8000e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 814b 	bne.w	8001102 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f040 8143 	bne.w	8001102 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e84:	f043 0202 	orr.w	r2, r3, #2
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e94:	d004      	beq.n	8000ea0 <HAL_ADC_Init+0x16c>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a6a      	ldr	r2, [pc, #424]	; (8001044 <HAL_ADC_Init+0x310>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d101      	bne.n	8000ea4 <HAL_ADC_Init+0x170>
 8000ea0:	4b69      	ldr	r3, [pc, #420]	; (8001048 <HAL_ADC_Init+0x314>)
 8000ea2:	e000      	b.n	8000ea6 <HAL_ADC_Init+0x172>
 8000ea4:	4b69      	ldr	r3, [pc, #420]	; (800104c <HAL_ADC_Init+0x318>)
 8000ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb0:	d102      	bne.n	8000eb8 <HAL_ADC_Init+0x184>
 8000eb2:	4b64      	ldr	r3, [pc, #400]	; (8001044 <HAL_ADC_Init+0x310>)
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	e01a      	b.n	8000eee <HAL_ADC_Init+0x1ba>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a61      	ldr	r2, [pc, #388]	; (8001044 <HAL_ADC_Init+0x310>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d103      	bne.n	8000eca <HAL_ADC_Init+0x196>
 8000ec2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e011      	b.n	8000eee <HAL_ADC_Init+0x1ba>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a60      	ldr	r2, [pc, #384]	; (8001050 <HAL_ADC_Init+0x31c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d102      	bne.n	8000eda <HAL_ADC_Init+0x1a6>
 8000ed4:	4b5f      	ldr	r3, [pc, #380]	; (8001054 <HAL_ADC_Init+0x320>)
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	e009      	b.n	8000eee <HAL_ADC_Init+0x1ba>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a5d      	ldr	r2, [pc, #372]	; (8001054 <HAL_ADC_Init+0x320>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d102      	bne.n	8000eea <HAL_ADC_Init+0x1b6>
 8000ee4:	4b5a      	ldr	r3, [pc, #360]	; (8001050 <HAL_ADC_Init+0x31c>)
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	e001      	b.n	8000eee <HAL_ADC_Init+0x1ba>
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d108      	bne.n	8000f0e <HAL_ADC_Init+0x1da>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d101      	bne.n	8000f0e <HAL_ADC_Init+0x1da>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_ADC_Init+0x1dc>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d11c      	bne.n	8000f4e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f14:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d010      	beq.n	8000f3c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d107      	bne.n	8000f36 <HAL_ADC_Init+0x202>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d101      	bne.n	8000f36 <HAL_ADC_Init+0x202>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_ADC_Init+0x204>
 8000f36:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d108      	bne.n	8000f4e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f4c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7e5b      	ldrb	r3, [r3, #25]
 8000f52:	035b      	lsls	r3, r3, #13
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f58:	2a01      	cmp	r2, #1
 8000f5a:	d002      	beq.n	8000f62 <HAL_ADC_Init+0x22e>
 8000f5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f60:	e000      	b.n	8000f64 <HAL_ADC_Init+0x230>
 8000f62:	2200      	movs	r2, #0
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f74:	4313      	orrs	r3, r2
 8000f76:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d11b      	bne.n	8000fba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7e5b      	ldrb	r3, [r3, #25]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d109      	bne.n	8000f9e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	045a      	lsls	r2, r3, #17
 8000f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f94:	4313      	orrs	r3, r2
 8000f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8000f9c:	e00d      	b.n	8000fba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fa6:	f043 0220 	orr.w	r2, r3, #32
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f043 0201 	orr.w	r2, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d054      	beq.n	800106c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <HAL_ADC_Init+0x31c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d004      	beq.n	8000fd6 <HAL_ADC_Init+0x2a2>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_ADC_Init+0x320>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d140      	bne.n	8001058 <HAL_ADC_Init+0x324>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fda:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000fde:	d02a      	beq.n	8001036 <HAL_ADC_Init+0x302>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fe8:	d022      	beq.n	8001030 <HAL_ADC_Init+0x2fc>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000ff2:	d01a      	beq.n	800102a <HAL_ADC_Init+0x2f6>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000ffc:	d012      	beq.n	8001024 <HAL_ADC_Init+0x2f0>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001006:	d00a      	beq.n	800101e <HAL_ADC_Init+0x2ea>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001010:	d002      	beq.n	8001018 <HAL_ADC_Init+0x2e4>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	e023      	b.n	8001060 <HAL_ADC_Init+0x32c>
 8001018:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800101c:	e020      	b.n	8001060 <HAL_ADC_Init+0x32c>
 800101e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001022:	e01d      	b.n	8001060 <HAL_ADC_Init+0x32c>
 8001024:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001028:	e01a      	b.n	8001060 <HAL_ADC_Init+0x32c>
 800102a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102e:	e017      	b.n	8001060 <HAL_ADC_Init+0x32c>
 8001030:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001034:	e014      	b.n	8001060 <HAL_ADC_Init+0x32c>
 8001036:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800103a:	e011      	b.n	8001060 <HAL_ADC_Init+0x32c>
 800103c:	20000004 	.word	0x20000004
 8001040:	431bde83 	.word	0x431bde83
 8001044:	50000100 	.word	0x50000100
 8001048:	50000300 	.word	0x50000300
 800104c:	50000700 	.word	0x50000700
 8001050:	50000400 	.word	0x50000400
 8001054:	50000500 	.word	0x50000500
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001064:	4313      	orrs	r3, r2
 8001066:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001068:	4313      	orrs	r3, r2
 800106a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b00      	cmp	r3, #0
 8001078:	d114      	bne.n	80010a4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001088:	f023 0302 	bic.w	r3, r3, #2
 800108c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7e1b      	ldrb	r3, [r3, #24]
 8001092:	039a      	lsls	r2, r3, #14
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4313      	orrs	r3, r2
 800109e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010a0:	4313      	orrs	r3, r2
 80010a2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_ADC_Init+0x3f0>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010b4:	430b      	orrs	r3, r1
 80010b6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10c      	bne.n	80010da <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f023 010f 	bic.w	r1, r3, #15
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	631a      	str	r2, [r3, #48]	; 0x30
 80010d8:	e007      	b.n	80010ea <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 020f 	bic.w	r2, r2, #15
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f023 0303 	bic.w	r3, r3, #3
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001100:	e00a      	b.n	8001118 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f023 0312 	bic.w	r3, r3, #18
 800110a:	f043 0210 	orr.w	r2, r3, #16
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001112:	2301      	movs	r3, #1
 8001114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001118:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800111c:	4618      	mov	r0, r3
 800111e:	3768      	adds	r7, #104	; 0x68
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	fff0c007 	.word	0xfff0c007

08001128 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	2b00      	cmp	r3, #0
 8001140:	f040 8123 	bne.w	800138a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800114a:	2b01      	cmp	r3, #1
 800114c:	d101      	bne.n	8001152 <HAL_ADC_Start_IT+0x2a>
 800114e:	2302      	movs	r3, #2
 8001150:	e11e      	b.n	8001390 <HAL_ADC_Start_IT+0x268>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 ffbc 	bl	80020d8 <ADC_Enable>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 810a 	bne.w	8001380 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001188:	d004      	beq.n	8001194 <HAL_ADC_Start_IT+0x6c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a82      	ldr	r2, [pc, #520]	; (8001398 <HAL_ADC_Start_IT+0x270>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d106      	bne.n	80011a2 <HAL_ADC_Start_IT+0x7a>
 8001194:	4b81      	ldr	r3, [pc, #516]	; (800139c <HAL_ADC_Start_IT+0x274>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	2b00      	cmp	r3, #0
 800119e:	d010      	beq.n	80011c2 <HAL_ADC_Start_IT+0x9a>
 80011a0:	e005      	b.n	80011ae <HAL_ADC_Start_IT+0x86>
 80011a2:	4b7f      	ldr	r3, [pc, #508]	; (80013a0 <HAL_ADC_Start_IT+0x278>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <HAL_ADC_Start_IT+0x9a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011b6:	d004      	beq.n	80011c2 <HAL_ADC_Start_IT+0x9a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a79      	ldr	r2, [pc, #484]	; (80013a4 <HAL_ADC_Start_IT+0x27c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d115      	bne.n	80011ee <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d036      	beq.n	800124a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011ec:	e02d      	b.n	800124a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001202:	d004      	beq.n	800120e <HAL_ADC_Start_IT+0xe6>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a63      	ldr	r2, [pc, #396]	; (8001398 <HAL_ADC_Start_IT+0x270>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10a      	bne.n	8001224 <HAL_ADC_Start_IT+0xfc>
 800120e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf14      	ite	ne
 800121c:	2301      	movne	r3, #1
 800121e:	2300      	moveq	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	e008      	b.n	8001236 <HAL_ADC_Start_IT+0x10e>
 8001224:	4b5f      	ldr	r3, [pc, #380]	; (80013a4 <HAL_ADC_Start_IT+0x27c>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001242:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001256:	d106      	bne.n	8001266 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	f023 0206 	bic.w	r2, r3, #6
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	645a      	str	r2, [r3, #68]	; 0x44
 8001264:	e002      	b.n	800126c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	221c      	movs	r2, #28
 800127a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	2b08      	cmp	r3, #8
 8001282:	d110      	bne.n	80012a6 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0208 	orr.w	r2, r2, #8
 80012a2:	605a      	str	r2, [r3, #4]
          break;
 80012a4:	e008      	b.n	80012b8 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f042 020c 	orr.w	r2, r2, #12
 80012b4:	605a      	str	r2, [r3, #4]
          break;
 80012b6:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d107      	bne.n	80012d0 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0210 	bic.w	r2, r2, #16
 80012ce:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d004      	beq.n	80012e4 <HAL_ADC_Start_IT+0x1bc>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a2e      	ldr	r2, [pc, #184]	; (8001398 <HAL_ADC_Start_IT+0x270>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d106      	bne.n	80012f2 <HAL_ADC_Start_IT+0x1ca>
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_ADC_Start_IT+0x274>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d03e      	beq.n	800136e <HAL_ADC_Start_IT+0x246>
 80012f0:	e005      	b.n	80012fe <HAL_ADC_Start_IT+0x1d6>
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <HAL_ADC_Start_IT+0x278>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d037      	beq.n	800136e <HAL_ADC_Start_IT+0x246>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001306:	d004      	beq.n	8001312 <HAL_ADC_Start_IT+0x1ea>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a22      	ldr	r2, [pc, #136]	; (8001398 <HAL_ADC_Start_IT+0x270>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d106      	bne.n	8001320 <HAL_ADC_Start_IT+0x1f8>
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <HAL_ADC_Start_IT+0x274>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	2b05      	cmp	r3, #5
 800131c:	d027      	beq.n	800136e <HAL_ADC_Start_IT+0x246>
 800131e:	e005      	b.n	800132c <HAL_ADC_Start_IT+0x204>
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_ADC_Start_IT+0x278>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	2b05      	cmp	r3, #5
 800132a:	d020      	beq.n	800136e <HAL_ADC_Start_IT+0x246>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001334:	d004      	beq.n	8001340 <HAL_ADC_Start_IT+0x218>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_ADC_Start_IT+0x270>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d106      	bne.n	800134e <HAL_ADC_Start_IT+0x226>
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_ADC_Start_IT+0x274>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	2b09      	cmp	r3, #9
 800134a:	d010      	beq.n	800136e <HAL_ADC_Start_IT+0x246>
 800134c:	e005      	b.n	800135a <HAL_ADC_Start_IT+0x232>
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_ADC_Start_IT+0x278>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	2b09      	cmp	r3, #9
 8001358:	d009      	beq.n	800136e <HAL_ADC_Start_IT+0x246>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001362:	d004      	beq.n	800136e <HAL_ADC_Start_IT+0x246>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <HAL_ADC_Start_IT+0x27c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10f      	bne.n	800138e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0204 	orr.w	r2, r2, #4
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	e006      	b.n	800138e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001388:	e001      	b.n	800138e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800138a:	2302      	movs	r3, #2
 800138c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	50000100 	.word	0x50000100
 800139c:	50000300 	.word	0x50000300
 80013a0:	50000700 	.word	0x50000700
 80013a4:	50000400 	.word	0x50000400

080013a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d106      	bne.n	80013f4 <HAL_ADC_IRQHandler+0x30>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d00f      	beq.n	8001414 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013fe:	2b08      	cmp	r3, #8
 8001400:	f040 80c0 	bne.w	8001584 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b08      	cmp	r3, #8
 8001410:	f040 80b8 	bne.w	8001584 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b00      	cmp	r3, #0
 800141e:	d105      	bne.n	800142c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001434:	d004      	beq.n	8001440 <HAL_ADC_IRQHandler+0x7c>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a95      	ldr	r2, [pc, #596]	; (8001690 <HAL_ADC_IRQHandler+0x2cc>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d106      	bne.n	800144e <HAL_ADC_IRQHandler+0x8a>
 8001440:	4b94      	ldr	r3, [pc, #592]	; (8001694 <HAL_ADC_IRQHandler+0x2d0>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	2b00      	cmp	r3, #0
 800144a:	d03e      	beq.n	80014ca <HAL_ADC_IRQHandler+0x106>
 800144c:	e005      	b.n	800145a <HAL_ADC_IRQHandler+0x96>
 800144e:	4b92      	ldr	r3, [pc, #584]	; (8001698 <HAL_ADC_IRQHandler+0x2d4>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	2b00      	cmp	r3, #0
 8001458:	d037      	beq.n	80014ca <HAL_ADC_IRQHandler+0x106>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001462:	d004      	beq.n	800146e <HAL_ADC_IRQHandler+0xaa>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a89      	ldr	r2, [pc, #548]	; (8001690 <HAL_ADC_IRQHandler+0x2cc>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d106      	bne.n	800147c <HAL_ADC_IRQHandler+0xb8>
 800146e:	4b89      	ldr	r3, [pc, #548]	; (8001694 <HAL_ADC_IRQHandler+0x2d0>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	2b05      	cmp	r3, #5
 8001478:	d027      	beq.n	80014ca <HAL_ADC_IRQHandler+0x106>
 800147a:	e005      	b.n	8001488 <HAL_ADC_IRQHandler+0xc4>
 800147c:	4b86      	ldr	r3, [pc, #536]	; (8001698 <HAL_ADC_IRQHandler+0x2d4>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	2b05      	cmp	r3, #5
 8001486:	d020      	beq.n	80014ca <HAL_ADC_IRQHandler+0x106>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001490:	d004      	beq.n	800149c <HAL_ADC_IRQHandler+0xd8>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7e      	ldr	r2, [pc, #504]	; (8001690 <HAL_ADC_IRQHandler+0x2cc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d106      	bne.n	80014aa <HAL_ADC_IRQHandler+0xe6>
 800149c:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <HAL_ADC_IRQHandler+0x2d0>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	2b09      	cmp	r3, #9
 80014a6:	d010      	beq.n	80014ca <HAL_ADC_IRQHandler+0x106>
 80014a8:	e005      	b.n	80014b6 <HAL_ADC_IRQHandler+0xf2>
 80014aa:	4b7b      	ldr	r3, [pc, #492]	; (8001698 <HAL_ADC_IRQHandler+0x2d4>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	2b09      	cmp	r3, #9
 80014b4:	d009      	beq.n	80014ca <HAL_ADC_IRQHandler+0x106>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014be:	d004      	beq.n	80014ca <HAL_ADC_IRQHandler+0x106>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a75      	ldr	r2, [pc, #468]	; (800169c <HAL_ADC_IRQHandler+0x2d8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d104      	bne.n	80014d4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	e00f      	b.n	80014f4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014dc:	d004      	beq.n	80014e8 <HAL_ADC_IRQHandler+0x124>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6b      	ldr	r2, [pc, #428]	; (8001690 <HAL_ADC_IRQHandler+0x2cc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d102      	bne.n	80014ee <HAL_ADC_IRQHandler+0x12a>
 80014e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014ec:	e000      	b.n	80014f0 <HAL_ADC_IRQHandler+0x12c>
 80014ee:	4b6b      	ldr	r3, [pc, #428]	; (800169c <HAL_ADC_IRQHandler+0x2d8>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d139      	bne.n	8001576 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001508:	2b00      	cmp	r3, #0
 800150a:	d134      	bne.n	8001576 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b08      	cmp	r3, #8
 8001518:	d12d      	bne.n	8001576 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d11a      	bne.n	800155e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 020c 	bic.w	r2, r2, #12
 8001536:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d112      	bne.n	8001576 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
 800155c:	e00b      	b.n	8001576 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f043 0210 	orr.w	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f043 0201 	orr.w	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fbbe 	bl	8000cf8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	220c      	movs	r2, #12
 8001582:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	2b20      	cmp	r3, #32
 8001590:	d106      	bne.n	80015a0 <HAL_ADC_IRQHandler+0x1dc>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	2b20      	cmp	r3, #32
 800159e:	d00f      	beq.n	80015c0 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80015aa:	2b40      	cmp	r3, #64	; 0x40
 80015ac:	f040 813c 	bne.w	8001828 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ba:	2b40      	cmp	r3, #64	; 0x40
 80015bc:	f040 8134 	bne.w	8001828 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_IRQHandler+0x21c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a2d      	ldr	r2, [pc, #180]	; (8001690 <HAL_ADC_IRQHandler+0x2cc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d106      	bne.n	80015ee <HAL_ADC_IRQHandler+0x22a>
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <HAL_ADC_IRQHandler+0x2d0>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d03e      	beq.n	800166a <HAL_ADC_IRQHandler+0x2a6>
 80015ec:	e005      	b.n	80015fa <HAL_ADC_IRQHandler+0x236>
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_ADC_IRQHandler+0x2d4>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d037      	beq.n	800166a <HAL_ADC_IRQHandler+0x2a6>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001602:	d004      	beq.n	800160e <HAL_ADC_IRQHandler+0x24a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <HAL_ADC_IRQHandler+0x2cc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d106      	bne.n	800161c <HAL_ADC_IRQHandler+0x258>
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_ADC_IRQHandler+0x2d0>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	2b05      	cmp	r3, #5
 8001618:	d027      	beq.n	800166a <HAL_ADC_IRQHandler+0x2a6>
 800161a:	e005      	b.n	8001628 <HAL_ADC_IRQHandler+0x264>
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <HAL_ADC_IRQHandler+0x2d4>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	2b05      	cmp	r3, #5
 8001626:	d020      	beq.n	800166a <HAL_ADC_IRQHandler+0x2a6>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001630:	d004      	beq.n	800163c <HAL_ADC_IRQHandler+0x278>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a16      	ldr	r2, [pc, #88]	; (8001690 <HAL_ADC_IRQHandler+0x2cc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d106      	bne.n	800164a <HAL_ADC_IRQHandler+0x286>
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_ADC_IRQHandler+0x2d0>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	2b09      	cmp	r3, #9
 8001646:	d010      	beq.n	800166a <HAL_ADC_IRQHandler+0x2a6>
 8001648:	e005      	b.n	8001656 <HAL_ADC_IRQHandler+0x292>
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_ADC_IRQHandler+0x2d4>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	2b09      	cmp	r3, #9
 8001654:	d009      	beq.n	800166a <HAL_ADC_IRQHandler+0x2a6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800165e:	d004      	beq.n	800166a <HAL_ADC_IRQHandler+0x2a6>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_ADC_IRQHandler+0x2d8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d104      	bne.n	8001674 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	e018      	b.n	80016a6 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167c:	d004      	beq.n	8001688 <HAL_ADC_IRQHandler+0x2c4>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a03      	ldr	r2, [pc, #12]	; (8001690 <HAL_ADC_IRQHandler+0x2cc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d10b      	bne.n	80016a0 <HAL_ADC_IRQHandler+0x2dc>
 8001688:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800168c:	e009      	b.n	80016a2 <HAL_ADC_IRQHandler+0x2de>
 800168e:	bf00      	nop
 8001690:	50000100 	.word	0x50000100
 8001694:	50000300 	.word	0x50000300
 8001698:	50000700 	.word	0x50000700
 800169c:	50000400 	.word	0x50000400
 80016a0:	4b9d      	ldr	r3, [pc, #628]	; (8001918 <HAL_ADC_IRQHandler+0x554>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 80ad 	bne.w	800181a <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 80a5 	bne.w	800181a <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 809f 	bne.w	800181a <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e6:	2b40      	cmp	r3, #64	; 0x40
 80016e8:	f040 8097 	bne.w	800181a <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f4:	d004      	beq.n	8001700 <HAL_ADC_IRQHandler+0x33c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a88      	ldr	r2, [pc, #544]	; (800191c <HAL_ADC_IRQHandler+0x558>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d106      	bne.n	800170e <HAL_ADC_IRQHandler+0x34a>
 8001700:	4b87      	ldr	r3, [pc, #540]	; (8001920 <HAL_ADC_IRQHandler+0x55c>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2b00      	cmp	r3, #0
 800170a:	d03e      	beq.n	800178a <HAL_ADC_IRQHandler+0x3c6>
 800170c:	e005      	b.n	800171a <HAL_ADC_IRQHandler+0x356>
 800170e:	4b85      	ldr	r3, [pc, #532]	; (8001924 <HAL_ADC_IRQHandler+0x560>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2b00      	cmp	r3, #0
 8001718:	d037      	beq.n	800178a <HAL_ADC_IRQHandler+0x3c6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001722:	d004      	beq.n	800172e <HAL_ADC_IRQHandler+0x36a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a7c      	ldr	r2, [pc, #496]	; (800191c <HAL_ADC_IRQHandler+0x558>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d106      	bne.n	800173c <HAL_ADC_IRQHandler+0x378>
 800172e:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <HAL_ADC_IRQHandler+0x55c>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	2b06      	cmp	r3, #6
 8001738:	d027      	beq.n	800178a <HAL_ADC_IRQHandler+0x3c6>
 800173a:	e005      	b.n	8001748 <HAL_ADC_IRQHandler+0x384>
 800173c:	4b79      	ldr	r3, [pc, #484]	; (8001924 <HAL_ADC_IRQHandler+0x560>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	2b06      	cmp	r3, #6
 8001746:	d020      	beq.n	800178a <HAL_ADC_IRQHandler+0x3c6>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001750:	d004      	beq.n	800175c <HAL_ADC_IRQHandler+0x398>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a71      	ldr	r2, [pc, #452]	; (800191c <HAL_ADC_IRQHandler+0x558>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d106      	bne.n	800176a <HAL_ADC_IRQHandler+0x3a6>
 800175c:	4b70      	ldr	r3, [pc, #448]	; (8001920 <HAL_ADC_IRQHandler+0x55c>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	2b07      	cmp	r3, #7
 8001766:	d010      	beq.n	800178a <HAL_ADC_IRQHandler+0x3c6>
 8001768:	e005      	b.n	8001776 <HAL_ADC_IRQHandler+0x3b2>
 800176a:	4b6e      	ldr	r3, [pc, #440]	; (8001924 <HAL_ADC_IRQHandler+0x560>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	2b07      	cmp	r3, #7
 8001774:	d009      	beq.n	800178a <HAL_ADC_IRQHandler+0x3c6>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800177e:	d004      	beq.n	800178a <HAL_ADC_IRQHandler+0x3c6>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a64      	ldr	r2, [pc, #400]	; (8001918 <HAL_ADC_IRQHandler+0x554>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d104      	bne.n	8001794 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e00f      	b.n	80017b4 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800179c:	d004      	beq.n	80017a8 <HAL_ADC_IRQHandler+0x3e4>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a5e      	ldr	r2, [pc, #376]	; (800191c <HAL_ADC_IRQHandler+0x558>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d102      	bne.n	80017ae <HAL_ADC_IRQHandler+0x3ea>
 80017a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017ac:	e000      	b.n	80017b0 <HAL_ADC_IRQHandler+0x3ec>
 80017ae:	4b5a      	ldr	r3, [pc, #360]	; (8001918 <HAL_ADC_IRQHandler+0x554>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d12d      	bne.n	800181a <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d11a      	bne.n	8001802 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017da:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d112      	bne.n	800181a <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001800:	e00b      	b.n	800181a <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f043 0210 	orr.w	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f043 0201 	orr.w	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f948 	bl	8001ab0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2260      	movs	r2, #96	; 0x60
 8001826:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001832:	2b80      	cmp	r3, #128	; 0x80
 8001834:	d113      	bne.n	800185e <HAL_ADC_IRQHandler+0x49a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001840:	2b80      	cmp	r3, #128	; 0x80
 8001842:	d10c      	bne.n	800185e <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fa5b 	bl	8000d0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800186c:	d115      	bne.n	800189a <HAL_ADC_IRQHandler+0x4d6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800187c:	d10d      	bne.n	800189a <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f924 	bl	8001ad8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001898:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a8:	d115      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x512>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b8:	d10d      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f910 	bl	8001aec <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b10      	cmp	r3, #16
 80018e2:	d151      	bne.n	8001988 <HAL_ADC_IRQHandler+0x5c4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d14a      	bne.n	8001988 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d102      	bne.n	8001900 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 80018fa:	2301      	movs	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e02d      	b.n	800195c <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001908:	d004      	beq.n	8001914 <HAL_ADC_IRQHandler+0x550>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a03      	ldr	r2, [pc, #12]	; (800191c <HAL_ADC_IRQHandler+0x558>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d109      	bne.n	8001928 <HAL_ADC_IRQHandler+0x564>
 8001914:	4b02      	ldr	r3, [pc, #8]	; (8001920 <HAL_ADC_IRQHandler+0x55c>)
 8001916:	e008      	b.n	800192a <HAL_ADC_IRQHandler+0x566>
 8001918:	50000400 	.word	0x50000400
 800191c:	50000100 	.word	0x50000100
 8001920:	50000300 	.word	0x50000300
 8001924:	50000700 	.word	0x50000700
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_ADC_IRQHandler+0x614>)
 800192a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d10a      	bne.n	800195c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e007      	b.n	800195c <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8001958:	2301      	movs	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d10e      	bne.n	8001980 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f043 0202 	orr.w	r2, r3, #2
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff f9d0 	bl	8000d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2210      	movs	r2, #16
 8001986:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001996:	d11b      	bne.n	80019d0 <HAL_ADC_IRQHandler+0x60c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a6:	d113      	bne.n	80019d0 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f043 0208 	orr.w	r2, r3, #8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f87a 	bl	8001ac4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	50000700 	.word	0x50000700

080019dc <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_ADCEx_Calibration_Start+0x1c>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e057      	b.n	8001aa8 <HAL_ADCEx_Calibration_Start+0xcc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fbc7 	bl	8002194 <ADC_Disable>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d146      	bne.n	8001a9e <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001a24:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a3a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a4a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001a4c:	f7ff f926 	bl	8000c9c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a52:	e014      	b.n	8001a7e <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a54:	f7ff f922 	bl	8000c9c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d90d      	bls.n	8001a7e <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f023 0312 	bic.w	r3, r3, #18
 8001a6a:	f043 0210 	orr.w	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e014      	b.n	8001aa8 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a8c:	d0e2      	beq.n	8001a54 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f023 0303 	bic.w	r3, r3, #3
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b09b      	sub	sp, #108	; 0x6c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x22>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e2cb      	b.n	80020ba <HAL_ADC_ConfigChannel+0x5ba>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 82af 	bne.w	8002098 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d81c      	bhi.n	8001b7c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	461a      	mov	r2, r3
 8001b56:	231f      	movs	r3, #31
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4019      	ands	r1, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
 8001b7a:	e063      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	d81e      	bhi.n	8001bc2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	4019      	ands	r1, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	3b1e      	subs	r3, #30
 8001bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc0:	e040      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b0e      	cmp	r3, #14
 8001bc8:	d81e      	bhi.n	8001c08 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	3b3c      	subs	r3, #60	; 0x3c
 8001bde:	221f      	movs	r2, #31
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4019      	ands	r1, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	3b3c      	subs	r3, #60	; 0x3c
 8001bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
 8001c06:	e01d      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	3b5a      	subs	r3, #90	; 0x5a
 8001c1c:	221f      	movs	r2, #31
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4019      	ands	r1, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	3b5a      	subs	r3, #90	; 0x5a
 8001c38:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 80e5 	bne.w	8001e1e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b09      	cmp	r3, #9
 8001c5a:	d91c      	bls.n	8001c96 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6999      	ldr	r1, [r3, #24]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b1e      	subs	r3, #30
 8001c6e:	2207      	movs	r2, #7
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4019      	ands	r1, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6898      	ldr	r0, [r3, #8]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	3b1e      	subs	r3, #30
 8001c88:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	619a      	str	r2, [r3, #24]
 8001c94:	e019      	b.n	8001cca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6959      	ldr	r1, [r3, #20]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4019      	ands	r1, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6898      	ldr	r0, [r3, #8]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d84f      	bhi.n	8001d8c <HAL_ADC_ConfigChannel+0x28c>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d27 	.word	0x08001d27
 8001cfc:	08001d49 	.word	0x08001d49
 8001d00:	08001d6b 	.word	0x08001d6b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d0a:	4b9f      	ldr	r3, [pc, #636]	; (8001f88 <HAL_ADC_ConfigChannel+0x488>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	0691      	lsls	r1, r2, #26
 8001d14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d16:	430a      	orrs	r2, r1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d22:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d24:	e07e      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d2c:	4b96      	ldr	r3, [pc, #600]	; (8001f88 <HAL_ADC_ConfigChannel+0x488>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	0691      	lsls	r1, r2, #26
 8001d36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d44:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d46:	e06d      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d4e:	4b8e      	ldr	r3, [pc, #568]	; (8001f88 <HAL_ADC_ConfigChannel+0x488>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	0691      	lsls	r1, r2, #26
 8001d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d66:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d68:	e05c      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d70:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <HAL_ADC_ConfigChannel+0x488>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	0691      	lsls	r1, r2, #26
 8001d7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d88:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d8a:	e04b      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	069b      	lsls	r3, r3, #26
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d107      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001db6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	069b      	lsls	r3, r3, #26
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dd2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	069b      	lsls	r3, r3, #26
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d107      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001df6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	069b      	lsls	r3, r3, #26
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d10a      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e1a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e1c:	e001      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001e1e:	bf00      	nop
 8001e20:	e000      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001e22:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d108      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x344>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x344>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x346>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 8131 	bne.w	80020ae <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d00f      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e72:	e049      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2201      	movs	r2, #1
 8001e82:	409a      	lsls	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b09      	cmp	r3, #9
 8001e94:	d91c      	bls.n	8001ed0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6999      	ldr	r1, [r3, #24]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b1b      	subs	r3, #27
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	4019      	ands	r1, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6898      	ldr	r0, [r3, #8]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b1b      	subs	r3, #27
 8001ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	619a      	str	r2, [r3, #24]
 8001ece:	e01b      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6959      	ldr	r1, [r3, #20]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4019      	ands	r1, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6898      	ldr	r0, [r3, #8]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	fa00 f203 	lsl.w	r2, r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f10:	d004      	beq.n	8001f1c <HAL_ADC_ConfigChannel+0x41c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_ADC_ConfigChannel+0x48c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x420>
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_ADC_ConfigChannel+0x490>)
 8001f1e:	e000      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x422>
 8001f20:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_ADC_ConfigChannel+0x494>)
 8001f22:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	d105      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d015      	beq.n	8001f64 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f3c:	2b11      	cmp	r3, #17
 8001f3e:	d105      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00b      	beq.n	8001f64 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f50:	2b12      	cmp	r3, #18
 8001f52:	f040 80ac 	bne.w	80020ae <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 80a5 	bne.w	80020ae <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f6c:	d102      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x474>
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_ADC_ConfigChannel+0x48c>)
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	e023      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x4bc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_ADC_ConfigChannel+0x48c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10c      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x498>
 8001f7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	e01a      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x4bc>
 8001f86:	bf00      	nop
 8001f88:	83fff000 	.word	0x83fff000
 8001f8c:	50000100 	.word	0x50000100
 8001f90:	50000300 	.word	0x50000300
 8001f94:	50000700 	.word	0x50000700
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a4a      	ldr	r2, [pc, #296]	; (80020c8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d102      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x4a8>
 8001fa2:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_ADC_ConfigChannel+0x5cc>)
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	e009      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x4bc>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a47      	ldr	r2, [pc, #284]	; (80020cc <HAL_ADC_ConfigChannel+0x5cc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d102      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x4b8>
 8001fb2:	4b45      	ldr	r3, [pc, #276]	; (80020c8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	e001      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x4bc>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x4dc>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x4dc>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_ADC_ConfigChannel+0x4de>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d150      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d010      	beq.n	800200a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x504>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x504>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_ADC_ConfigChannel+0x506>
 8002004:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002006:	2b00      	cmp	r3, #0
 8002008:	d13c      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b10      	cmp	r3, #16
 8002010:	d11d      	bne.n	800204e <HAL_ADC_ConfigChannel+0x54e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800201a:	d118      	bne.n	800204e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800201c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002026:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002028:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <HAL_ADC_ConfigChannel+0x5d0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <HAL_ADC_ConfigChannel+0x5d4>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0c9a      	lsrs	r2, r3, #18
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800203e:	e002      	b.n	8002046 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	3b01      	subs	r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f9      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800204c:	e02e      	b.n	80020ac <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b11      	cmp	r3, #17
 8002054:	d10b      	bne.n	800206e <HAL_ADC_ConfigChannel+0x56e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800205e:	d106      	bne.n	800206e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800206c:	e01e      	b.n	80020ac <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b12      	cmp	r3, #18
 8002074:	d11a      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800207e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002080:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002082:	e013      	b.n	80020ac <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002096:	e00a      	b.n	80020ae <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f043 0220 	orr.w	r2, r3, #32
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020aa:	e000      	b.n	80020ae <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020ac:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	376c      	adds	r7, #108	; 0x6c
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	50000400 	.word	0x50000400
 80020cc:	50000500 	.word	0x50000500
 80020d0:	20000004 	.word	0x20000004
 80020d4:	431bde83 	.word	0x431bde83

080020d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d108      	bne.n	8002104 <ADC_Enable+0x2c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <ADC_Enable+0x2c>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <ADC_Enable+0x2e>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d13c      	bne.n	8002184 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <ADC_Enable+0xb8>)
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00d      	beq.n	8002134 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f043 0210 	orr.w	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e028      	b.n	8002186 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002144:	f7fe fdaa 	bl	8000c9c <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800214a:	e014      	b.n	8002176 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800214c:	f7fe fda6 	bl	8000c9c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d90d      	bls.n	8002176 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f043 0210 	orr.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e007      	b.n	8002186 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d1e3      	bne.n	800214c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	8000003f 	.word	0x8000003f

08002194 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d108      	bne.n	80021c0 <ADC_Disable+0x2c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <ADC_Disable+0x2c>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <ADC_Disable+0x2e>
 80021c0:	2300      	movs	r3, #0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d040      	beq.n	8002248 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030d 	and.w	r3, r3, #13
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d10f      	bne.n	80021f4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0202 	orr.w	r2, r2, #2
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2203      	movs	r2, #3
 80021ea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80021ec:	f7fe fd56 	bl	8000c9c <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021f2:	e022      	b.n	800223a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f043 0210 	orr.w	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e01c      	b.n	800224a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002210:	f7fe fd44 	bl	8000c9c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d90d      	bls.n	800223a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e007      	b.n	800224a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d0e3      	beq.n	8002210 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4907      	ldr	r1, [pc, #28]	; (80022f0 <__NVIC_EnableIRQ+0x38>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
         );
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c0:	d301      	bcc.n	80023c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00f      	b.n	80023e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <SysTick_Config+0x40>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ce:	210f      	movs	r1, #15
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023d4:	f7ff ff8e 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <SysTick_Config+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <SysTick_Config+0x40>)
 80023e0:	2207      	movs	r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	e000e010 	.word	0xe000e010

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff29 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800241c:	f7ff ff3e 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f7ff ff8e 	bl	8002348 <NVIC_EncodePriority>
 800242c:	4602      	mov	r2, r0
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff5d 	bl	80022f4 <__NVIC_SetPriority>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff31 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffa2 	bl	80023b0 <SysTick_Config>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	e160      	b.n	800274a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2101      	movs	r1, #1
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8152 	beq.w	8002744 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x38>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b12      	cmp	r3, #18
 80024ae:	d123      	bne.n	80024f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	08da      	lsrs	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3208      	adds	r2, #8
 80024b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	220f      	movs	r2, #15
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	08da      	lsrs	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3208      	adds	r2, #8
 80024f2:	6939      	ldr	r1, [r7, #16]
 80024f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0203 	and.w	r2, r3, #3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d00b      	beq.n	800254c <HAL_GPIO_Init+0xd4>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d007      	beq.n	800254c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002540:	2b11      	cmp	r3, #17
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b12      	cmp	r3, #18
 800254a:	d130      	bne.n	80025ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002582:	2201      	movs	r2, #1
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 0201 	and.w	r2, r3, #1
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2203      	movs	r2, #3
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80ac 	beq.w	8002744 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ec:	4b5e      	ldr	r3, [pc, #376]	; (8002768 <HAL_GPIO_Init+0x2f0>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a5d      	ldr	r2, [pc, #372]	; (8002768 <HAL_GPIO_Init+0x2f0>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b5b      	ldr	r3, [pc, #364]	; (8002768 <HAL_GPIO_Init+0x2f0>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002604:	4a59      	ldr	r2, [pc, #356]	; (800276c <HAL_GPIO_Init+0x2f4>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800262e:	d025      	beq.n	800267c <HAL_GPIO_Init+0x204>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a4f      	ldr	r2, [pc, #316]	; (8002770 <HAL_GPIO_Init+0x2f8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d01f      	beq.n	8002678 <HAL_GPIO_Init+0x200>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a4e      	ldr	r2, [pc, #312]	; (8002774 <HAL_GPIO_Init+0x2fc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d019      	beq.n	8002674 <HAL_GPIO_Init+0x1fc>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a4d      	ldr	r2, [pc, #308]	; (8002778 <HAL_GPIO_Init+0x300>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <HAL_GPIO_Init+0x1f8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a4c      	ldr	r2, [pc, #304]	; (800277c <HAL_GPIO_Init+0x304>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00d      	beq.n	800266c <HAL_GPIO_Init+0x1f4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a4b      	ldr	r2, [pc, #300]	; (8002780 <HAL_GPIO_Init+0x308>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <HAL_GPIO_Init+0x1f0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a4a      	ldr	r2, [pc, #296]	; (8002784 <HAL_GPIO_Init+0x30c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_GPIO_Init+0x1ec>
 8002660:	2306      	movs	r3, #6
 8002662:	e00c      	b.n	800267e <HAL_GPIO_Init+0x206>
 8002664:	2307      	movs	r3, #7
 8002666:	e00a      	b.n	800267e <HAL_GPIO_Init+0x206>
 8002668:	2305      	movs	r3, #5
 800266a:	e008      	b.n	800267e <HAL_GPIO_Init+0x206>
 800266c:	2304      	movs	r3, #4
 800266e:	e006      	b.n	800267e <HAL_GPIO_Init+0x206>
 8002670:	2303      	movs	r3, #3
 8002672:	e004      	b.n	800267e <HAL_GPIO_Init+0x206>
 8002674:	2302      	movs	r3, #2
 8002676:	e002      	b.n	800267e <HAL_GPIO_Init+0x206>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_GPIO_Init+0x206>
 800267c:	2300      	movs	r3, #0
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	f002 0203 	and.w	r2, r2, #3
 8002684:	0092      	lsls	r2, r2, #2
 8002686:	4093      	lsls	r3, r2
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800268e:	4937      	ldr	r1, [pc, #220]	; (800276c <HAL_GPIO_Init+0x2f4>)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800269c:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_GPIO_Init+0x310>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026c0:	4a31      	ldr	r2, [pc, #196]	; (8002788 <HAL_GPIO_Init+0x310>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_GPIO_Init+0x310>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026ea:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_GPIO_Init+0x310>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_GPIO_Init+0x310>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <HAL_GPIO_Init+0x310>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_GPIO_Init+0x310>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_GPIO_Init+0x310>)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3301      	adds	r3, #1
 8002748:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	f47f ae97 	bne.w	8002488 <HAL_GPIO_Init+0x10>
  }
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	40010000 	.word	0x40010000
 8002770:	48000400 	.word	0x48000400
 8002774:	48000800 	.word	0x48000800
 8002778:	48000c00 	.word	0x48000c00
 800277c:	48001000 	.word	0x48001000
 8002780:	48001400 	.word	0x48001400
 8002784:	48001800 	.word	0x48001800
 8002788:	40010400 	.word	0x40010400

0800278c <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e092      	b.n	80028c8 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d101      	bne.n	80027b2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e08a      	b.n	80028c8 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d101      	bne.n	80027c2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e082      	b.n	80028c8 <HAL_OPAMP_Init+0x13c>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <HAL_OPAMP_Init+0x144>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	4a3f      	ldr	r2, [pc, #252]	; (80028d0 <HAL_OPAMP_Init+0x144>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6193      	str	r3, [r2, #24]
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_OPAMP_Init+0x144>)
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <HAL_OPAMP_Init+0x6e>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fd ffa8 	bl	8000750 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d003      	beq.n	8002810 <HAL_OPAMP_Init+0x84>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b60      	cmp	r3, #96	; 0x60
 800280e:	d125      	bne.n	800285c <HAL_OPAMP_Init+0xd0>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_OPAMP_Init+0x148>)
 8002818:	4013      	ands	r3, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6851      	ldr	r1, [r2, #4]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68d2      	ldr	r2, [r2, #12]
 8002822:	4311      	orrs	r1, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6912      	ldr	r2, [r2, #16]
 8002828:	4311      	orrs	r1, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6992      	ldr	r2, [r2, #24]
 800282e:	4311      	orrs	r1, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	69d2      	ldr	r2, [r2, #28]
 8002834:	4311      	orrs	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6a12      	ldr	r2, [r2, #32]
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002840:	4311      	orrs	r1, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002846:	04d2      	lsls	r2, r2, #19
 8002848:	4311      	orrs	r1, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800284e:	0612      	lsls	r2, r2, #24
 8002850:	4311      	orrs	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	430b      	orrs	r3, r1
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e02a      	b.n	80028b2 <HAL_OPAMP_Init+0x126>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <HAL_OPAMP_Init+0x148>)
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6851      	ldr	r1, [r2, #4]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6892      	ldr	r2, [r2, #8]
 800286e:	4311      	orrs	r1, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68d2      	ldr	r2, [r2, #12]
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6912      	ldr	r2, [r2, #16]
 800287a:	4311      	orrs	r1, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6952      	ldr	r2, [r2, #20]
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6992      	ldr	r2, [r2, #24]
 8002886:	4311      	orrs	r1, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	69d2      	ldr	r2, [r2, #28]
 800288c:	4311      	orrs	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6a12      	ldr	r2, [r2, #32]
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800289e:	04d2      	lsls	r2, r2, #19
 80028a0:	4311      	orrs	r1, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028a6:	0612      	lsls	r2, r2, #24
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	430b      	orrs	r3, r1
 80028b0:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <HAL_OPAMP_Init+0x13a>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	e0003811 	.word	0xe0003811

080028d8 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e01d      	b.n	800292c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d102      	bne.n	8002902 <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e014      	b.n	800292c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d10c      	bne.n	8002928 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2204      	movs	r2, #4
 8002922:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8002926:	e001      	b.n	800292c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	75fb      	strb	r3, [r7, #23]
 8002950:	e114      	b.n	8002b7c <HAL_OPAMP_SelfCalibrate+0x242>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b05      	cmp	r3, #5
 800295c:	d102      	bne.n	8002964 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
 8002962:	e10b      	b.n	8002b7c <HAL_OPAMP_SelfCalibrate+0x242>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	f040 8103 	bne.w	8002b78 <HAL_OPAMP_SelfCalibrate+0x23e>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0202 	orr.w	r2, r2, #2
 8002980:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002990:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029a0:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90U% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80029b0:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16U;
 80029c2:	2310      	movs	r3, #16
 80029c4:	613b      	str	r3, [r7, #16]
      delta = 8U;
 80029c6:	2308      	movs	r3, #8
 80029c8:	60bb      	str	r3, [r7, #8]

      while (delta != 0U)
 80029ca:	e020      	b.n	8002a0e <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	061a      	lsls	r2, r3, #24
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2U);
 80029e2:	2002      	movs	r0, #2
 80029e4:	f7fe f966 	bl	8000cb4 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4413      	add	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	e003      	b.n	8002a08 <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1U;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
      while (delta != 0U)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1db      	bne.n	80029cc <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	061a      	lsls	r2, r3, #24
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2U);
 8002a2a:	2002      	movs	r0, #2
 8002a2c:	f7fe f942 	bl	8000cb4 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	3301      	adds	r3, #1
 8002a42:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	061a      	lsls	r2, r3, #24
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10U% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16U;
 8002a6e:	2310      	movs	r3, #16
 8002a70:	60fb      	str	r3, [r7, #12]
      delta = 8U;
 8002a72:	2308      	movs	r3, #8
 8002a74:	60bb      	str	r3, [r7, #8]

      while (delta != 0U)
 8002a76:	e020      	b.n	8002aba <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	04da      	lsls	r2, r3, #19
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2U);
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f7fe f910 	bl	8000cb4 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	e003      	b.n	8002ab4 <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1U;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
      while (delta != 0U)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1db      	bne.n	8002a78 <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	04da      	lsls	r2, r3, #19
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2U);
 8002ad6:	2002      	movs	r0, #2
 8002ad8:	f7fe f8ec 	bl	8000cb4 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3301      	adds	r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	04da      	lsls	r2, r3, #19
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b14:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0202 	bic.w	r2, r2, #2
 8002b34:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timming) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Select user timming mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	04da      	lsls	r2, r3, #19
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	061a      	lsls	r2, r3, #24
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e001      	b.n	8002b7c <HAL_OPAMP_SelfCalibrate+0x242>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f000 bf01 	b.w	80039a4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8160 	beq.w	8002e72 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bb2:	4bae      	ldr	r3, [pc, #696]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bbe:	4bab      	ldr	r3, [pc, #684]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d159      	bne.n	8002c7e <HAL_RCC_OscConfig+0xf6>
 8002bca:	4ba8      	ldr	r3, [pc, #672]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd6:	d152      	bne.n	8002c7e <HAL_RCC_OscConfig+0xf6>
 8002bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bdc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8002bec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d102      	bne.n	8002c0a <HAL_RCC_OscConfig+0x82>
 8002c04:	4b99      	ldr	r3, [pc, #612]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	e015      	b.n	8002c36 <HAL_RCC_OscConfig+0xae>
 8002c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c22:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c26:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c32:	4b8e      	ldr	r3, [pc, #568]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c3a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002c3e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002c42:	fa92 f2a2 	rbit	r2, r2
 8002c46:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002c4a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c4e:	fab2 f282 	clz	r2, r2
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	f042 0220 	orr.w	r2, r2, #32
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	f002 021f 	and.w	r2, r2, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f202 	lsl.w	r2, r1, r2
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8102 	beq.w	8002e70 <HAL_RCC_OscConfig+0x2e8>
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 80fc 	bne.w	8002e70 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f000 be93 	b.w	80039a4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x110>
 8002c8a:	4b78      	ldr	r3, [pc, #480]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a77      	ldr	r2, [pc, #476]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e030      	b.n	8002cfa <HAL_RCC_OscConfig+0x172>
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x134>
 8002ca2:	4b72      	ldr	r3, [pc, #456]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a71      	ldr	r2, [pc, #452]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6e      	ldr	r2, [pc, #440]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e01e      	b.n	8002cfa <HAL_RCC_OscConfig+0x172>
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x15a>
 8002cc8:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a67      	ldr	r2, [pc, #412]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a64      	ldr	r2, [pc, #400]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	e00b      	b.n	8002cfa <HAL_RCC_OscConfig+0x172>
 8002ce2:	4b62      	ldr	r3, [pc, #392]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a61      	ldr	r2, [pc, #388]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d059      	beq.n	8002db8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fd ffca 	bl	8000c9c <HAL_GetTick>
 8002d08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d0e:	f7fd ffc5 	bl	8000c9c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d902      	bls.n	8002d24 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	f000 be40 	b.w	80039a4 <HAL_RCC_OscConfig+0xe1c>
 8002d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d28:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002d38:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d102      	bne.n	8002d56 <HAL_RCC_OscConfig+0x1ce>
 8002d50:	4b46      	ldr	r3, [pc, #280]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x1fa>
 8002d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d72:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d86:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002d8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002d8e:	fa92 f2a2 	rbit	r2, r2
 8002d92:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002d96:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d9a:	fab2 f282 	clz	r2, r2
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f042 0220 	orr.w	r2, r2, #32
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f002 021f 	and.w	r2, r2, #31
 8002daa:	2101      	movs	r1, #1
 8002dac:	fa01 f202 	lsl.w	r2, r1, r2
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0ab      	beq.n	8002d0e <HAL_RCC_OscConfig+0x186>
 8002db6:	e05c      	b.n	8002e72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fd ff70 	bl	8000c9c <HAL_GetTick>
 8002dbc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc2:	f7fd ff6b 	bl	8000c9c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d902      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	f000 bde6 	b.w	80039a4 <HAL_RCC_OscConfig+0xe1c>
 8002dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ddc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002dec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0x282>
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x2ae>
 8002e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_RCC_OscConfig+0x2e4>)
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e3a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002e3e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e42:	fa92 f2a2 	rbit	r2, r2
 8002e46:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002e4a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e4e:	fab2 f282 	clz	r2, r2
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f042 0220 	orr.w	r2, r2, #32
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	f002 021f 	and.w	r2, r2, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ab      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x23a>
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_OscConfig+0x2ea>
 8002e6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8170 	beq.w	8003162 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e82:	4bd0      	ldr	r3, [pc, #832]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e8e:	4bcd      	ldr	r3, [pc, #820]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d16d      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3ee>
 8002e9a:	4bca      	ldr	r3, [pc, #808]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea6:	d166      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3ee>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002eba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x350>
 8002ed2:	4bbc      	ldr	r3, [pc, #752]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	e013      	b.n	8002f00 <HAL_RCC_OscConfig+0x378>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002eea:	2302      	movs	r3, #2
 8002eec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ef0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002efc:	4bb1      	ldr	r3, [pc, #708]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2202      	movs	r2, #2
 8002f02:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002f06:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002f0a:	fa92 f2a2 	rbit	r2, r2
 8002f0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002f12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f16:	fab2 f282 	clz	r2, r2
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f042 0220 	orr.w	r2, r2, #32
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f002 021f 	and.w	r2, r2, #31
 8002f26:	2101      	movs	r1, #1
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3ba>
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d002      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f000 bd31 	b.w	80039a4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f42:	4ba0      	ldr	r3, [pc, #640]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	21f8      	movs	r1, #248	; 0xf8
 8002f52:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002f5a:	fa91 f1a1 	rbit	r1, r1
 8002f5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002f62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f66:	fab1 f181 	clz	r1, r1
 8002f6a:	b2c9      	uxtb	r1, r1
 8002f6c:	408b      	lsls	r3, r1
 8002f6e:	4995      	ldr	r1, [pc, #596]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f74:	e0f5      	b.n	8003162 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8085 	beq.w	800308c <HAL_RCC_OscConfig+0x504>
 8002f82:	2301      	movs	r3, #1
 8002f84:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002f94:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2301      	movs	r3, #1
 8002fac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fd fe75 	bl	8000c9c <HAL_GetTick>
 8002fb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fd fe70 	bl	8000c9c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d902      	bls.n	8002fce <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	f000 bceb 	b.w	80039a4 <HAL_RCC_OscConfig+0xe1c>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002fe0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d102      	bne.n	8002ffe <HAL_RCC_OscConfig+0x476>
 8002ff8:	4b72      	ldr	r3, [pc, #456]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	e013      	b.n	8003026 <HAL_RCC_OscConfig+0x49e>
 8002ffe:	2302      	movs	r3, #2
 8003000:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003010:	2302      	movs	r3, #2
 8003012:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003016:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003022:	4b68      	ldr	r3, [pc, #416]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	2202      	movs	r2, #2
 8003028:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800302c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003030:	fa92 f2a2 	rbit	r2, r2
 8003034:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003038:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800303c:	fab2 f282 	clz	r2, r2
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f042 0220 	orr.w	r2, r2, #32
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	f002 021f 	and.w	r2, r2, #31
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f202 	lsl.w	r2, r1, r2
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0af      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b5a      	ldr	r3, [pc, #360]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	21f8      	movs	r1, #248	; 0xf8
 8003068:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003070:	fa91 f1a1 	rbit	r1, r1
 8003074:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003078:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800307c:	fab1 f181 	clz	r1, r1
 8003080:	b2c9      	uxtb	r1, r1
 8003082:	408b      	lsls	r3, r1
 8003084:	494f      	ldr	r1, [pc, #316]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
 800308a:	e06a      	b.n	8003162 <HAL_RCC_OscConfig+0x5da>
 800308c:	2301      	movs	r3, #1
 800308e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800309e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fd fdf0 	bl	8000c9c <HAL_GetTick>
 80030bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fd fdeb 	bl	8000c9c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d902      	bls.n	80030d8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	f000 bc66 	b.w	80039a4 <HAL_RCC_OscConfig+0xe1c>
 80030d8:	2302      	movs	r3, #2
 80030da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80030ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d102      	bne.n	8003108 <HAL_RCC_OscConfig+0x580>
 8003102:	4b30      	ldr	r3, [pc, #192]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	e013      	b.n	8003130 <HAL_RCC_OscConfig+0x5a8>
 8003108:	2302      	movs	r3, #2
 800310a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800311a:	2302      	movs	r3, #2
 800311c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003120:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800312c:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <HAL_RCC_OscConfig+0x63c>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2202      	movs	r2, #2
 8003132:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003136:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800313a:	fa92 f2a2 	rbit	r2, r2
 800313e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003142:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003146:	fab2 f282 	clz	r2, r2
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	f042 0220 	orr.w	r2, r2, #32
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f002 021f 	and.w	r2, r2, #31
 8003156:	2101      	movs	r1, #1
 8003158:	fa01 f202 	lsl.w	r2, r1, r2
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1af      	bne.n	80030c2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80da 	beq.w	8003326 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d069      	beq.n	8003250 <HAL_RCC_OscConfig+0x6c8>
 800317c:	2301      	movs	r3, #1
 800317e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800318e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_OscConfig+0x640>)
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	461a      	mov	r2, r3
 80031a2:	2301      	movs	r3, #1
 80031a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a6:	f7fd fd79 	bl	8000c9c <HAL_GetTick>
 80031aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ae:	e00d      	b.n	80031cc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b0:	f7fd fd74 	bl	8000c9c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d905      	bls.n	80031cc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e3ef      	b.n	80039a4 <HAL_RCC_OscConfig+0xe1c>
 80031c4:	40021000 	.word	0x40021000
 80031c8:	10908120 	.word	0x10908120
 80031cc:	2302      	movs	r3, #2
 80031ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d6:	fa93 f2a3 	rbit	r2, r3
 80031da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80031e4:	2202      	movs	r2, #2
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	fa93 f2a3 	rbit	r2, r3
 80031f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80031fc:	2202      	movs	r2, #2
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800320e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003210:	4ba4      	ldr	r3, [pc, #656]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 8003212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003214:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003218:	2102      	movs	r1, #2
 800321a:	6019      	str	r1, [r3, #0]
 800321c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	fa93 f1a3 	rbit	r1, r3
 8003226:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800322a:	6019      	str	r1, [r3, #0]
  return result;
 800322c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0b0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x628>
 800324e:	e06a      	b.n	8003326 <HAL_RCC_OscConfig+0x79e>
 8003250:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	fa93 f2a3 	rbit	r2, r3
 8003262:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003266:	601a      	str	r2, [r3, #0]
  return result;
 8003268:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800326c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	4b8c      	ldr	r3, [pc, #560]	; (80034a8 <HAL_RCC_OscConfig+0x920>)
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fd fd0b 	bl	8000c9c <HAL_GetTick>
 8003286:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328a:	e009      	b.n	80032a0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328c:	f7fd fd06 	bl	8000c9c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e381      	b.n	80039a4 <HAL_RCC_OscConfig+0xe1c>
 80032a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032a4:	2202      	movs	r2, #2
 80032a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fa93 f2a3 	rbit	r2, r3
 80032b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032bc:	2202      	movs	r2, #2
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032d4:	2202      	movs	r2, #2
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	fa93 f2a3 	rbit	r2, r3
 80032e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b6e      	ldr	r3, [pc, #440]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 80032ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032f0:	2102      	movs	r1, #2
 80032f2:	6019      	str	r1, [r3, #0]
 80032f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	fa93 f1a3 	rbit	r1, r3
 80032fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003302:	6019      	str	r1, [r3, #0]
  return result;
 8003304:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1b2      	bne.n	800328c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8157 	beq.w	80035e4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333c:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d112      	bne.n	800336e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	4b56      	ldr	r3, [pc, #344]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	4a55      	ldr	r2, [pc, #340]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	61d3      	str	r3, [r2, #28]
 8003354:	4b53      	ldr	r3, [pc, #332]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f107 030c 	add.w	r3, r7, #12
 8003366:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b4f      	ldr	r3, [pc, #316]	; (80034ac <HAL_RCC_OscConfig+0x924>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d11a      	bne.n	80033b0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337a:	4b4c      	ldr	r3, [pc, #304]	; (80034ac <HAL_RCC_OscConfig+0x924>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4b      	ldr	r2, [pc, #300]	; (80034ac <HAL_RCC_OscConfig+0x924>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003384:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003386:	f7fd fc89 	bl	8000c9c <HAL_GetTick>
 800338a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338e:	e009      	b.n	80033a4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003390:	f7fd fc84 	bl	8000c9c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b64      	cmp	r3, #100	; 0x64
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e2ff      	b.n	80039a4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b41      	ldr	r3, [pc, #260]	; (80034ac <HAL_RCC_OscConfig+0x924>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ef      	beq.n	8003390 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d106      	bne.n	80033c8 <HAL_RCC_OscConfig+0x840>
 80033ba:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a39      	ldr	r2, [pc, #228]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6213      	str	r3, [r2, #32]
 80033c6:	e02f      	b.n	8003428 <HAL_RCC_OscConfig+0x8a0>
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x864>
 80033d2:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a33      	ldr	r2, [pc, #204]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	6213      	str	r3, [r2, #32]
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4a30      	ldr	r2, [pc, #192]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 80033e4:	f023 0304 	bic.w	r3, r3, #4
 80033e8:	6213      	str	r3, [r2, #32]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0x8a0>
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b05      	cmp	r3, #5
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x888>
 80033f6:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a2a      	ldr	r2, [pc, #168]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6213      	str	r3, [r2, #32]
 8003402:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6213      	str	r3, [r2, #32]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0x8a0>
 8003410:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4a23      	ldr	r2, [pc, #140]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	6213      	str	r3, [r2, #32]
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4a20      	ldr	r2, [pc, #128]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 8003422:	f023 0304 	bic.w	r3, r3, #4
 8003426:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d06a      	beq.n	8003508 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7fd fc33 	bl	8000c9c <HAL_GetTick>
 8003436:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343a:	e00b      	b.n	8003454 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fd fc2e 	bl	8000c9c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e2a7      	b.n	80039a4 <HAL_RCC_OscConfig+0xe1c>
 8003454:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003458:	2202      	movs	r2, #2
 800345a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	fa93 f2a3 	rbit	r2, r3
 8003466:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003470:	2202      	movs	r2, #2
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	fa93 f2a3 	rbit	r2, r3
 800347e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003482:	601a      	str	r2, [r3, #0]
  return result;
 8003484:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003488:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d108      	bne.n	80034b0 <HAL_RCC_OscConfig+0x928>
 800349e:	4b01      	ldr	r3, [pc, #4]	; (80034a4 <HAL_RCC_OscConfig+0x91c>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	e013      	b.n	80034cc <HAL_RCC_OscConfig+0x944>
 80034a4:	40021000 	.word	0x40021000
 80034a8:	10908120 	.word	0x10908120
 80034ac:	40007000 	.word	0x40007000
 80034b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034b4:	2202      	movs	r2, #2
 80034b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	fa93 f2a3 	rbit	r2, r3
 80034c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	4bc0      	ldr	r3, [pc, #768]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80034d0:	2102      	movs	r1, #2
 80034d2:	6011      	str	r1, [r2, #0]
 80034d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	fa92 f1a2 	rbit	r1, r2
 80034de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034e2:	6011      	str	r1, [r2, #0]
  return result;
 80034e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	fab2 f282 	clz	r2, r2
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	f002 021f 	and.w	r2, r2, #31
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d09a      	beq.n	800343c <HAL_RCC_OscConfig+0x8b4>
 8003506:	e063      	b.n	80035d0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003508:	f7fd fbc8 	bl	8000c9c <HAL_GetTick>
 800350c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003510:	e00b      	b.n	800352a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fd fbc3 	bl	8000c9c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e23c      	b.n	80039a4 <HAL_RCC_OscConfig+0xe1c>
 800352a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800352e:	2202      	movs	r2, #2
 8003530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	fa93 f2a3 	rbit	r2, r3
 800353c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003546:	2202      	movs	r2, #2
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	fa93 f2a3 	rbit	r2, r3
 8003554:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003558:	601a      	str	r2, [r3, #0]
  return result;
 800355a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800355e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f043 0302 	orr.w	r3, r3, #2
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d102      	bne.n	800357a <HAL_RCC_OscConfig+0x9f2>
 8003574:	4b95      	ldr	r3, [pc, #596]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	e00d      	b.n	8003596 <HAL_RCC_OscConfig+0xa0e>
 800357a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800357e:	2202      	movs	r2, #2
 8003580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	fa93 f2a3 	rbit	r2, r3
 800358c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	4b8e      	ldr	r3, [pc, #568]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800359a:	2102      	movs	r1, #2
 800359c:	6011      	str	r1, [r2, #0]
 800359e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	fa92 f1a2 	rbit	r1, r2
 80035a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035ac:	6011      	str	r1, [r2, #0]
  return result;
 80035ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	fab2 f282 	clz	r2, r2
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	f002 021f 	and.w	r2, r2, #31
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1a0      	bne.n	8003512 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035d0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d8:	4b7c      	ldr	r3, [pc, #496]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4a7b      	ldr	r2, [pc, #492]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 81d9 	beq.w	80039a2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f0:	4b76      	ldr	r3, [pc, #472]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	f000 81a6 	beq.w	800394a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b02      	cmp	r3, #2
 8003606:	f040 811e 	bne.w	8003846 <HAL_RCC_OscConfig+0xcbe>
 800360a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800360e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	fa93 f2a3 	rbit	r2, r3
 800361e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003622:	601a      	str	r2, [r3, #0]
  return result;
 8003624:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003628:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003634:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	461a      	mov	r2, r3
 800363c:	2300      	movs	r3, #0
 800363e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fd fb2c 	bl	8000c9c <HAL_GetTick>
 8003644:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003648:	e009      	b.n	800365e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364a:	f7fd fb27 	bl	8000c9c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e1a2      	b.n	80039a4 <HAL_RCC_OscConfig+0xe1c>
 800365e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003676:	601a      	str	r2, [r3, #0]
  return result;
 8003678:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800367c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_RCC_OscConfig+0xb10>
 8003692:	4b4e      	ldr	r3, [pc, #312]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	e01b      	b.n	80036d0 <HAL_RCC_OscConfig+0xb48>
 8003698:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800369c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	fa93 f2a3 	rbit	r2, r3
 80036ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80036b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fa93 f2a3 	rbit	r2, r3
 80036c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80036d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036d8:	6011      	str	r1, [r2, #0]
 80036da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	fa92 f1a2 	rbit	r1, r2
 80036e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036e8:	6011      	str	r1, [r2, #0]
  return result;
 80036ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	fab2 f282 	clz	r2, r2
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	f042 0220 	orr.w	r2, r2, #32
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	f002 021f 	and.w	r2, r2, #31
 8003700:	2101      	movs	r1, #1
 8003702:	fa01 f202 	lsl.w	r2, r1, r2
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d19e      	bne.n	800364a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370c:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	f023 020f 	bic.w	r2, r3, #15
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	492c      	ldr	r1, [pc, #176]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 800371c:	4313      	orrs	r3, r2
 800371e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003720:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a19      	ldr	r1, [r3, #32]
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	430b      	orrs	r3, r1
 8003736:	4925      	ldr	r1, [pc, #148]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 8003738:	4313      	orrs	r3, r2
 800373a:	604b      	str	r3, [r1, #4]
 800373c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	fa93 f2a3 	rbit	r2, r3
 8003750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003754:	601a      	str	r2, [r3, #0]
  return result;
 8003756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800375a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375c:	fab3 f383 	clz	r3, r3
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003766:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	461a      	mov	r2, r3
 800376e:	2301      	movs	r3, #1
 8003770:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fd fa93 	bl	8000c9c <HAL_GetTick>
 8003776:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800377a:	e009      	b.n	8003790 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fa8e 	bl	8000c9c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e109      	b.n	80039a4 <HAL_RCC_OscConfig+0xe1c>
 8003790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	fa93 f2a3 	rbit	r2, r3
 80037a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037a8:	601a      	str	r2, [r3, #0]
  return result;
 80037aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <HAL_RCC_OscConfig+0xc48>
 80037c4:	4b01      	ldr	r3, [pc, #4]	; (80037cc <HAL_RCC_OscConfig+0xc44>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	e01e      	b.n	8003808 <HAL_RCC_OscConfig+0xc80>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	fa93 f2a3 	rbit	r2, r3
 80037e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	fa93 f2a3 	rbit	r2, r3
 80037fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	4b6a      	ldr	r3, [pc, #424]	; (80039b0 <HAL_RCC_OscConfig+0xe28>)
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800380c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003810:	6011      	str	r1, [r2, #0]
 8003812:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	fa92 f1a2 	rbit	r1, r2
 800381c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003820:	6011      	str	r1, [r2, #0]
  return result;
 8003822:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	fab2 f282 	clz	r2, r2
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	f042 0220 	orr.w	r2, r2, #32
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	f002 021f 	and.w	r2, r2, #31
 8003838:	2101      	movs	r1, #1
 800383a:	fa01 f202 	lsl.w	r2, r1, r2
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d09b      	beq.n	800377c <HAL_RCC_OscConfig+0xbf4>
 8003844:	e0ad      	b.n	80039a2 <HAL_RCC_OscConfig+0xe1a>
 8003846:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800384a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800384e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	fa93 f2a3 	rbit	r2, r3
 800385a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800385e:	601a      	str	r2, [r3, #0]
  return result;
 8003860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003864:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	461a      	mov	r2, r3
 8003878:	2300      	movs	r3, #0
 800387a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fd fa0e 	bl	8000c9c <HAL_GetTick>
 8003880:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003884:	e009      	b.n	800389a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003886:	f7fd fa09 	bl	8000c9c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e084      	b.n	80039a4 <HAL_RCC_OscConfig+0xe1c>
 800389a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800389e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	fa93 f2a3 	rbit	r2, r3
 80038ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038b2:	601a      	str	r2, [r3, #0]
  return result;
 80038b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d102      	bne.n	80038d4 <HAL_RCC_OscConfig+0xd4c>
 80038ce:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <HAL_RCC_OscConfig+0xe28>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	e01b      	b.n	800390c <HAL_RCC_OscConfig+0xd84>
 80038d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	fa93 f2a3 	rbit	r2, r3
 80038e8:	f107 0320 	add.w	r3, r7, #32
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	f107 031c 	add.w	r3, r7, #28
 80038f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f107 031c 	add.w	r3, r7, #28
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f107 0318 	add.w	r3, r7, #24
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <HAL_RCC_OscConfig+0xe28>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f107 0214 	add.w	r2, r7, #20
 8003910:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003914:	6011      	str	r1, [r2, #0]
 8003916:	f107 0214 	add.w	r2, r7, #20
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	fa92 f1a2 	rbit	r1, r2
 8003920:	f107 0210 	add.w	r2, r7, #16
 8003924:	6011      	str	r1, [r2, #0]
  return result;
 8003926:	f107 0210 	add.w	r2, r7, #16
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	fab2 f282 	clz	r2, r2
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	f042 0220 	orr.w	r2, r2, #32
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	f002 021f 	and.w	r2, r2, #31
 800393c:	2101      	movs	r1, #1
 800393e:	fa01 f202 	lsl.w	r2, r1, r2
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d19e      	bne.n	8003886 <HAL_RCC_OscConfig+0xcfe>
 8003948:	e02b      	b.n	80039a2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800394a:	1d3b      	adds	r3, r7, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e025      	b.n	80039a4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <HAL_RCC_OscConfig+0xe28>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_RCC_OscConfig+0xe28>)
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003968:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800396c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	429a      	cmp	r2, r3
 8003978:	d111      	bne.n	800399e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800397a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800397e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003988:	429a      	cmp	r2, r3
 800398a:	d108      	bne.n	800399e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800398c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003990:	f003 020f 	and.w	r2, r3, #15
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000

080039b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b09e      	sub	sp, #120	; 0x78
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e162      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b90      	ldr	r3, [pc, #576]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b8d      	ldr	r3, [pc, #564]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	498b      	ldr	r1, [pc, #556]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b89      	ldr	r3, [pc, #548]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e14a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a08:	4b82      	ldr	r3, [pc, #520]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	497f      	ldr	r1, [pc, #508]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80dc 	beq.w	8003be0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d13c      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xf6>
 8003a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xa6>
 8003a54:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	e00f      	b.n	8003a7a <HAL_RCC_ClockConfig+0xc6>
 8003a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	667b      	str	r3, [r7, #100]	; 0x64
 8003a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a6c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a76:	4b67      	ldr	r3, [pc, #412]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a82:	fa92 f2a2 	rbit	r2, r2
 8003a86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a8a:	fab2 f282 	clz	r2, r2
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	f042 0220 	orr.w	r2, r2, #32
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	f002 021f 	and.w	r2, r2, #31
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d17b      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0f3      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d13c      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x178>
 8003ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_RCC_ClockConfig+0x128>
 8003ad6:	4b4f      	ldr	r3, [pc, #316]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	e00f      	b.n	8003afc <HAL_RCC_ClockConfig+0x148>
 8003adc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aee:	643b      	str	r3, [r7, #64]	; 0x40
 8003af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af8:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b00:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b04:	fa92 f2a2 	rbit	r2, r2
 8003b08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b0c:	fab2 f282 	clz	r2, r2
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f042 0220 	orr.w	r2, r2, #32
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f002 021f 	and.w	r2, r2, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d13a      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0b2      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
 8003b4e:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	e00d      	b.n	8003b70 <HAL_RCC_ClockConfig+0x1bc>
 8003b54:	2302      	movs	r3, #2
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b60:	2302      	movs	r3, #2
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	4b29      	ldr	r3, [pc, #164]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	2202      	movs	r2, #2
 8003b72:	61ba      	str	r2, [r7, #24]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	fa92 f2a2 	rbit	r2, r2
 8003b7a:	617a      	str	r2, [r7, #20]
  return result;
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	fab2 f282 	clz	r2, r2
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	f042 0220 	orr.w	r2, r2, #32
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f002 021f 	and.w	r2, r2, #31
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f202 	lsl.w	r2, r1, r2
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e079      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	491a      	ldr	r1, [pc, #104]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fd f874 	bl	8000c9c <HAL_GetTick>
 8003bb4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fd f870 	bl	8000c9c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e061      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d214      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0207 	bic.w	r2, r3, #7
 8003bf6:	4906      	ldr	r1, [pc, #24]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e040      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	491a      	ldr	r1, [pc, #104]	; (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c42:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4912      	ldr	r1, [pc, #72]	; (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c56:	f000 f829 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c5a:	4601      	mov	r1, r0
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c64:	22f0      	movs	r2, #240	; 0xf0
 8003c66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	fa92 f2a2 	rbit	r2, r2
 8003c6e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	fab2 f282 	clz	r2, r2
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	40d3      	lsrs	r3, r2
 8003c7a:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <HAL_RCC_ClockConfig+0x2ec>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <HAL_RCC_ClockConfig+0x2f0>)
 8003c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c86:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <HAL_RCC_ClockConfig+0x2f4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fc ffc2 	bl	8000c14 <HAL_InitTick>
  
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3778      	adds	r7, #120	; 0x78
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	08005fa8 	.word	0x08005fa8
 8003ca4:	20000004 	.word	0x20000004
 8003ca8:	20000008 	.word	0x20000008

08003cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b08b      	sub	sp, #44	; 0x2c
 8003cb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d002      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x30>
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8003cda:	e03f      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cde:	623b      	str	r3, [r7, #32]
      break;
 8003ce0:	e03f      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ce8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003cec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	fa92 f2a2 	rbit	r2, r2
 8003cf4:	607a      	str	r2, [r7, #4]
  return result;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	fab2 f282 	clz	r2, r2
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	40d3      	lsrs	r3, r2
 8003d00:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d02:	5cd3      	ldrb	r3, [r2, r3]
 8003d04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d06:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	220f      	movs	r2, #15
 8003d10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	fa92 f2a2 	rbit	r2, r2
 8003d18:	60fa      	str	r2, [r7, #12]
  return result;
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	fab2 f282 	clz	r2, r2
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	40d3      	lsrs	r3, r2
 8003d24:	4a15      	ldr	r2, [pc, #84]	; (8003d7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d26:	5cd3      	ldrb	r3, [r2, r3]
 8003d28:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d34:	4a0f      	ldr	r2, [pc, #60]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
 8003d44:	e007      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d46:	4a0b      	ldr	r2, [pc, #44]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	623b      	str	r3, [r7, #32]
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d5e:	623b      	str	r3, [r7, #32]
      break;
 8003d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d62:	6a3b      	ldr	r3, [r7, #32]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	372c      	adds	r7, #44	; 0x2c
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40021000 	.word	0x40021000
 8003d74:	007a1200 	.word	0x007a1200
 8003d78:	08005fc0 	.word	0x08005fc0
 8003d7c:	08005fd0 	.word	0x08005fd0

08003d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000004 	.word	0x20000004

08003d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d9e:	f7ff ffef 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003da2:	4601      	mov	r1, r0
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003db0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	fa92 f2a2 	rbit	r2, r2
 8003db8:	603a      	str	r2, [r7, #0]
  return result;
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	fab2 f282 	clz	r2, r2
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	40d3      	lsrs	r3, r2
 8003dc4:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003dc6:	5cd3      	ldrb	r3, [r2, r3]
 8003dc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	08005fb8 	.word	0x08005fb8

08003ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003de2:	f7ff ffcd 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003de6:	4601      	mov	r1, r0
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003df0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003df4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	fa92 f2a2 	rbit	r2, r2
 8003dfc:	603a      	str	r2, [r7, #0]
  return result;
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	fab2 f282 	clz	r2, r2
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	40d3      	lsrs	r3, r2
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e0a:	5cd3      	ldrb	r3, [r2, r3]
 8003e0c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08005fb8 	.word	0x08005fb8

08003e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b092      	sub	sp, #72	; 0x48
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80d7 	beq.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e44:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10e      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e50:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4a4a      	ldr	r2, [pc, #296]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	61d3      	str	r3, [r2, #28]
 8003e5c:	4b48      	ldr	r3, [pc, #288]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b45      	ldr	r3, [pc, #276]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d118      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7a:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a41      	ldr	r2, [pc, #260]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7fc ff09 	bl	8000c9c <HAL_GetTick>
 8003e8a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8e:	f7fc ff05 	bl	8000c9c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b64      	cmp	r3, #100	; 0x64
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e1d6      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eac:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8084 	beq.w	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d07c      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ee6:	fab3 f383 	clz	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003efe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f1e:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f22:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d04b      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fc feb5 	bl	8000c9c <HAL_GetTick>
 8003f32:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fc feb1 	bl	8000c9c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e180      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
 8003f58:	2302      	movs	r3, #2
 8003f5a:	623b      	str	r3, [r7, #32]
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	61fb      	str	r3, [r7, #28]
  return result;
 8003f64:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d108      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f7a:	4b01      	ldr	r3, [pc, #4]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	e00d      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40007000 	.word	0x40007000
 8003f88:	10908100 	.word	0x10908100
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	4ba0      	ldr	r3, [pc, #640]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	613a      	str	r2, [r7, #16]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	fa92 f2a2 	rbit	r2, r2
 8003fa6:	60fa      	str	r2, [r7, #12]
  return result;
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	fab2 f282 	clz	r2, r2
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	f002 021f 	and.w	r2, r2, #31
 8003fba:	2101      	movs	r1, #1
 8003fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0b7      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fc6:	4b95      	ldr	r3, [pc, #596]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4992      	ldr	r1, [pc, #584]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe0:	4b8e      	ldr	r3, [pc, #568]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	4a8d      	ldr	r2, [pc, #564]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ff8:	4b88      	ldr	r3, [pc, #544]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	f023 0203 	bic.w	r2, r3, #3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4985      	ldr	r1, [pc, #532]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004016:	4b81      	ldr	r3, [pc, #516]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	497e      	ldr	r1, [pc, #504]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004034:	4b79      	ldr	r3, [pc, #484]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	4976      	ldr	r1, [pc, #472]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004042:	4313      	orrs	r3, r2
 8004044:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004052:	4b72      	ldr	r3, [pc, #456]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f023 0210 	bic.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	496f      	ldr	r1, [pc, #444]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004070:	4b6a      	ldr	r3, [pc, #424]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	4967      	ldr	r1, [pc, #412]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f023 0220 	bic.w	r2, r3, #32
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	4960      	ldr	r1, [pc, #384]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800409c:	4313      	orrs	r3, r2
 800409e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ac:	4b5b      	ldr	r3, [pc, #364]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	4958      	ldr	r1, [pc, #352]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040ca:	4b54      	ldr	r3, [pc, #336]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4951      	ldr	r1, [pc, #324]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040e8:	4b4c      	ldr	r3, [pc, #304]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	4949      	ldr	r1, [pc, #292]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004106:	4b45      	ldr	r3, [pc, #276]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	4942      	ldr	r1, [pc, #264]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004124:	4b3d      	ldr	r3, [pc, #244]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	493a      	ldr	r1, [pc, #232]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004142:	4b36      	ldr	r3, [pc, #216]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	4933      	ldr	r1, [pc, #204]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004160:	4b2e      	ldr	r3, [pc, #184]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416c:	492b      	ldr	r1, [pc, #172]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800417e:	4b27      	ldr	r3, [pc, #156]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4924      	ldr	r1, [pc, #144]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800419c:	4b1f      	ldr	r3, [pc, #124]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	491c      	ldr	r1, [pc, #112]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80041ba:	4b18      	ldr	r3, [pc, #96]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	4915      	ldr	r1, [pc, #84]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e4:	490d      	ldr	r1, [pc, #52]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004202:	4906      	ldr	r1, [pc, #24]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00c      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004214:	4b01      	ldr	r3, [pc, #4]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	e002      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004228:	490b      	ldr	r1, [pc, #44]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800422a:	4313      	orrs	r3, r2
 800422c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004246:	4904      	ldr	r1, [pc, #16]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004248:	4313      	orrs	r3, r2
 800424a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3748      	adds	r7, #72	; 0x48
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000

0800425c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e01d      	b.n	80042aa <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f815 	bl	80042b2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f000 fa96 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2201      	movs	r2, #1
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fe1a 	bl	8004f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a21      	ldr	r2, [pc, #132]	; (800436c <HAL_TIM_OC_Start+0xa4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d018      	beq.n	800431c <HAL_TIM_OC_Start+0x54>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a20      	ldr	r2, [pc, #128]	; (8004370 <HAL_TIM_OC_Start+0xa8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_TIM_OC_Start+0x54>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <HAL_TIM_OC_Start+0xac>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <HAL_TIM_OC_Start+0x54>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1d      	ldr	r2, [pc, #116]	; (8004378 <HAL_TIM_OC_Start+0xb0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_TIM_OC_Start+0x54>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1b      	ldr	r2, [pc, #108]	; (800437c <HAL_TIM_OC_Start+0xb4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_TIM_OC_Start+0x54>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <HAL_TIM_OC_Start+0xb8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d101      	bne.n	8004320 <HAL_TIM_OC_Start+0x58>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <HAL_TIM_OC_Start+0x5a>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_TIM_OC_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004334:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_TIM_OC_Start+0xbc>)
 800433e:	4013      	ands	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b06      	cmp	r3, #6
 8004346:	d00b      	beq.n	8004360 <HAL_TIM_OC_Start+0x98>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434e:	d007      	beq.n	8004360 <HAL_TIM_OC_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40013400 	.word	0x40013400
 8004374:	40014000 	.word	0x40014000
 8004378:	40014400 	.word	0x40014400
 800437c:	40014800 	.word	0x40014800
 8004380:	40015000 	.word	0x40015000
 8004384:	00010007 	.word	0x00010007

08004388 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e01d      	b.n	80043d6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fb2c 	bl	8000a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f000 fa00 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2201      	movs	r2, #1
 80043f0:	6839      	ldr	r1, [r7, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fd8e 	bl	8004f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a21      	ldr	r2, [pc, #132]	; (8004484 <HAL_TIM_PWM_Start+0xa4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <HAL_TIM_PWM_Start+0x54>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a20      	ldr	r2, [pc, #128]	; (8004488 <HAL_TIM_PWM_Start+0xa8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d013      	beq.n	8004434 <HAL_TIM_PWM_Start+0x54>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1e      	ldr	r2, [pc, #120]	; (800448c <HAL_TIM_PWM_Start+0xac>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <HAL_TIM_PWM_Start+0x54>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <HAL_TIM_PWM_Start+0xb0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_TIM_PWM_Start+0x54>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <HAL_TIM_PWM_Start+0xb4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_TIM_PWM_Start+0x54>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1a      	ldr	r2, [pc, #104]	; (8004498 <HAL_TIM_PWM_Start+0xb8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d101      	bne.n	8004438 <HAL_TIM_PWM_Start+0x58>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <HAL_TIM_PWM_Start+0x5a>
 8004438:	2300      	movs	r3, #0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <HAL_TIM_PWM_Start+0xbc>)
 8004456:	4013      	ands	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b06      	cmp	r3, #6
 800445e:	d00b      	beq.n	8004478 <HAL_TIM_PWM_Start+0x98>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004466:	d007      	beq.n	8004478 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40013400 	.word	0x40013400
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400
 8004494:	40014800 	.word	0x40014800
 8004498:	40015000 	.word	0x40015000
 800449c:	00010007 	.word	0x00010007

080044a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_TIM_OC_ConfigChannel+0x1a>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e06c      	b.n	8004594 <HAL_TIM_OC_ConfigChannel+0xf4>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2202      	movs	r2, #2
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b14      	cmp	r3, #20
 80044ce:	d857      	bhi.n	8004580 <HAL_TIM_OC_ConfigChannel+0xe0>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	08004581 	.word	0x08004581
 80044e0:	08004581 	.word	0x08004581
 80044e4:	08004581 	.word	0x08004581
 80044e8:	0800453b 	.word	0x0800453b
 80044ec:	08004581 	.word	0x08004581
 80044f0:	08004581 	.word	0x08004581
 80044f4:	08004581 	.word	0x08004581
 80044f8:	08004549 	.word	0x08004549
 80044fc:	08004581 	.word	0x08004581
 8004500:	08004581 	.word	0x08004581
 8004504:	08004581 	.word	0x08004581
 8004508:	08004557 	.word	0x08004557
 800450c:	08004581 	.word	0x08004581
 8004510:	08004581 	.word	0x08004581
 8004514:	08004581 	.word	0x08004581
 8004518:	08004565 	.word	0x08004565
 800451c:	08004581 	.word	0x08004581
 8004520:	08004581 	.word	0x08004581
 8004524:	08004581 	.word	0x08004581
 8004528:	08004573 	.word	0x08004573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 f9e8 	bl	8004908 <TIM_OC1_SetConfig>
      break;
 8004538:	e023      	b.n	8004582 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fa7b 	bl	8004a3c <TIM_OC2_SetConfig>
      break;
 8004546:	e01c      	b.n	8004582 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fb08 	bl	8004b64 <TIM_OC3_SetConfig>
      break;
 8004554:	e015      	b.n	8004582 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fb93 	bl	8004c88 <TIM_OC4_SetConfig>
      break;
 8004562:	e00e      	b.n	8004582 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fbfc 	bl	8004d68 <TIM_OC5_SetConfig>
      break;
 8004570:	e007      	b.n	8004582 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fc5f 	bl	8004e3c <TIM_OC6_SetConfig>
      break;
 800457e:	e000      	b.n	8004582 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004580:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e105      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2202      	movs	r2, #2
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b14      	cmp	r3, #20
 80045ca:	f200 80f0 	bhi.w	80047ae <HAL_TIM_PWM_ConfigChannel+0x212>
 80045ce:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	08004629 	.word	0x08004629
 80045d8:	080047af 	.word	0x080047af
 80045dc:	080047af 	.word	0x080047af
 80045e0:	080047af 	.word	0x080047af
 80045e4:	08004669 	.word	0x08004669
 80045e8:	080047af 	.word	0x080047af
 80045ec:	080047af 	.word	0x080047af
 80045f0:	080047af 	.word	0x080047af
 80045f4:	080046ab 	.word	0x080046ab
 80045f8:	080047af 	.word	0x080047af
 80045fc:	080047af 	.word	0x080047af
 8004600:	080047af 	.word	0x080047af
 8004604:	080046eb 	.word	0x080046eb
 8004608:	080047af 	.word	0x080047af
 800460c:	080047af 	.word	0x080047af
 8004610:	080047af 	.word	0x080047af
 8004614:	0800472d 	.word	0x0800472d
 8004618:	080047af 	.word	0x080047af
 800461c:	080047af 	.word	0x080047af
 8004620:	080047af 	.word	0x080047af
 8004624:	0800476d 	.word	0x0800476d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f96a 	bl	8004908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0208 	orr.w	r2, r2, #8
 8004642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0204 	bic.w	r2, r2, #4
 8004652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6999      	ldr	r1, [r3, #24]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	619a      	str	r2, [r3, #24]
      break;
 8004666:	e0a3      	b.n	80047b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f9e4 	bl	8004a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6999      	ldr	r1, [r3, #24]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	021a      	lsls	r2, r3, #8
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	619a      	str	r2, [r3, #24]
      break;
 80046a8:	e082      	b.n	80047b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fa57 	bl	8004b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0208 	orr.w	r2, r2, #8
 80046c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0204 	bic.w	r2, r2, #4
 80046d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69d9      	ldr	r1, [r3, #28]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	61da      	str	r2, [r3, #28]
      break;
 80046e8:	e062      	b.n	80047b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fac9 	bl	8004c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69d9      	ldr	r1, [r3, #28]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	021a      	lsls	r2, r3, #8
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	61da      	str	r2, [r3, #28]
      break;
 800472a:	e041      	b.n	80047b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fb18 	bl	8004d68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800476a:	e021      	b.n	80047b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb62 	bl	8004e3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	021a      	lsls	r2, r3, #8
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047ac:	e000      	b.n	80047b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80047ae:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop

080047cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a42      	ldr	r2, [pc, #264]	; (80048e8 <TIM_Base_SetConfig+0x11c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ea:	d00f      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3f      	ldr	r2, [pc, #252]	; (80048ec <TIM_Base_SetConfig+0x120>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00b      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3e      	ldr	r2, [pc, #248]	; (80048f0 <TIM_Base_SetConfig+0x124>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d007      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3d      	ldr	r2, [pc, #244]	; (80048f4 <TIM_Base_SetConfig+0x128>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a3c      	ldr	r2, [pc, #240]	; (80048f8 <TIM_Base_SetConfig+0x12c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d108      	bne.n	800481e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a31      	ldr	r2, [pc, #196]	; (80048e8 <TIM_Base_SetConfig+0x11c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01f      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d01b      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2e      	ldr	r2, [pc, #184]	; (80048ec <TIM_Base_SetConfig+0x120>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d017      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2d      	ldr	r2, [pc, #180]	; (80048f0 <TIM_Base_SetConfig+0x124>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2c      	ldr	r2, [pc, #176]	; (80048f4 <TIM_Base_SetConfig+0x128>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00f      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2c      	ldr	r2, [pc, #176]	; (80048fc <TIM_Base_SetConfig+0x130>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <TIM_Base_SetConfig+0x134>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d007      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <TIM_Base_SetConfig+0x138>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <TIM_Base_SetConfig+0x12c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a12      	ldr	r2, [pc, #72]	; (80048e8 <TIM_Base_SetConfig+0x11c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <TIM_Base_SetConfig+0x100>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <TIM_Base_SetConfig+0x128>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x100>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a13      	ldr	r2, [pc, #76]	; (80048fc <TIM_Base_SetConfig+0x130>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x100>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a12      	ldr	r2, [pc, #72]	; (8004900 <TIM_Base_SetConfig+0x134>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x100>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a11      	ldr	r2, [pc, #68]	; (8004904 <TIM_Base_SetConfig+0x138>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x100>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <TIM_Base_SetConfig+0x12c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d103      	bne.n	80048d4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	615a      	str	r2, [r3, #20]
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40013400 	.word	0x40013400
 80048f8:	40015000 	.word	0x40015000
 80048fc:	40014000 	.word	0x40014000
 8004900:	40014400 	.word	0x40014400
 8004904:	40014800 	.word	0x40014800

08004908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f023 0201 	bic.w	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0303 	bic.w	r3, r3, #3
 8004942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f023 0302 	bic.w	r3, r3, #2
 8004954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a30      	ldr	r2, [pc, #192]	; (8004a24 <TIM_OC1_SetConfig+0x11c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <TIM_OC1_SetConfig+0x88>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <TIM_OC1_SetConfig+0x120>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00f      	beq.n	8004990 <TIM_OC1_SetConfig+0x88>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a2e      	ldr	r2, [pc, #184]	; (8004a2c <TIM_OC1_SetConfig+0x124>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_OC1_SetConfig+0x88>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a2d      	ldr	r2, [pc, #180]	; (8004a30 <TIM_OC1_SetConfig+0x128>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_OC1_SetConfig+0x88>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a2c      	ldr	r2, [pc, #176]	; (8004a34 <TIM_OC1_SetConfig+0x12c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_OC1_SetConfig+0x88>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a2b      	ldr	r2, [pc, #172]	; (8004a38 <TIM_OC1_SetConfig+0x130>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d10c      	bne.n	80049aa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0308 	bic.w	r3, r3, #8
 8004996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1d      	ldr	r2, [pc, #116]	; (8004a24 <TIM_OC1_SetConfig+0x11c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <TIM_OC1_SetConfig+0xd2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1c      	ldr	r2, [pc, #112]	; (8004a28 <TIM_OC1_SetConfig+0x120>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00f      	beq.n	80049da <TIM_OC1_SetConfig+0xd2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <TIM_OC1_SetConfig+0x124>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00b      	beq.n	80049da <TIM_OC1_SetConfig+0xd2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a1a      	ldr	r2, [pc, #104]	; (8004a30 <TIM_OC1_SetConfig+0x128>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <TIM_OC1_SetConfig+0xd2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a19      	ldr	r2, [pc, #100]	; (8004a34 <TIM_OC1_SetConfig+0x12c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_OC1_SetConfig+0xd2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a18      	ldr	r2, [pc, #96]	; (8004a38 <TIM_OC1_SetConfig+0x130>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d111      	bne.n	80049fe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	621a      	str	r2, [r3, #32]
}
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	40013400 	.word	0x40013400
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40014400 	.word	0x40014400
 8004a34:	40014800 	.word	0x40014800
 8004a38:	40015000 	.word	0x40015000

08004a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0210 	bic.w	r2, r3, #16
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0320 	bic.w	r3, r3, #32
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a2c      	ldr	r2, [pc, #176]	; (8004b4c <TIM_OC2_SetConfig+0x110>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d007      	beq.n	8004ab0 <TIM_OC2_SetConfig+0x74>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a2b      	ldr	r2, [pc, #172]	; (8004b50 <TIM_OC2_SetConfig+0x114>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC2_SetConfig+0x74>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a2a      	ldr	r2, [pc, #168]	; (8004b54 <TIM_OC2_SetConfig+0x118>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10d      	bne.n	8004acc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <TIM_OC2_SetConfig+0x110>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <TIM_OC2_SetConfig+0xc0>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <TIM_OC2_SetConfig+0x114>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00f      	beq.n	8004afc <TIM_OC2_SetConfig+0xc0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <TIM_OC2_SetConfig+0x11c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <TIM_OC2_SetConfig+0xc0>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <TIM_OC2_SetConfig+0x120>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_OC2_SetConfig+0xc0>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <TIM_OC2_SetConfig+0x124>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC2_SetConfig+0xc0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <TIM_OC2_SetConfig+0x118>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d113      	bne.n	8004b24 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b02:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b0a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	621a      	str	r2, [r3, #32]
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40013400 	.word	0x40013400
 8004b54:	40015000 	.word	0x40015000
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800

08004b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0303 	bic.w	r3, r3, #3
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2b      	ldr	r2, [pc, #172]	; (8004c70 <TIM_OC3_SetConfig+0x10c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d007      	beq.n	8004bd6 <TIM_OC3_SetConfig+0x72>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2a      	ldr	r2, [pc, #168]	; (8004c74 <TIM_OC3_SetConfig+0x110>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d003      	beq.n	8004bd6 <TIM_OC3_SetConfig+0x72>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <TIM_OC3_SetConfig+0x114>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10d      	bne.n	8004bf2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bf0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1e      	ldr	r2, [pc, #120]	; (8004c70 <TIM_OC3_SetConfig+0x10c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <TIM_OC3_SetConfig+0xbe>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <TIM_OC3_SetConfig+0x110>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00f      	beq.n	8004c22 <TIM_OC3_SetConfig+0xbe>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a1d      	ldr	r2, [pc, #116]	; (8004c7c <TIM_OC3_SetConfig+0x118>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_OC3_SetConfig+0xbe>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <TIM_OC3_SetConfig+0x11c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <TIM_OC3_SetConfig+0xbe>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <TIM_OC3_SetConfig+0x120>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_OC3_SetConfig+0xbe>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <TIM_OC3_SetConfig+0x114>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d113      	bne.n	8004c4a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40012c00 	.word	0x40012c00
 8004c74:	40013400 	.word	0x40013400
 8004c78:	40015000 	.word	0x40015000
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800

08004c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	031b      	lsls	r3, r3, #12
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <TIM_OC4_SetConfig+0xc8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <TIM_OC4_SetConfig+0x8c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <TIM_OC4_SetConfig+0xcc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00f      	beq.n	8004d14 <TIM_OC4_SetConfig+0x8c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <TIM_OC4_SetConfig+0xd0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00b      	beq.n	8004d14 <TIM_OC4_SetConfig+0x8c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a17      	ldr	r2, [pc, #92]	; (8004d5c <TIM_OC4_SetConfig+0xd4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d007      	beq.n	8004d14 <TIM_OC4_SetConfig+0x8c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <TIM_OC4_SetConfig+0xd8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_OC4_SetConfig+0x8c>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <TIM_OC4_SetConfig+0xdc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d109      	bne.n	8004d28 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	019b      	lsls	r3, r3, #6
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40013400 	.word	0x40013400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400
 8004d60:	40014800 	.word	0x40014800
 8004d64:	40015000 	.word	0x40015000

08004d68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	041b      	lsls	r3, r3, #16
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a19      	ldr	r2, [pc, #100]	; (8004e24 <TIM_OC5_SetConfig+0xbc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <TIM_OC5_SetConfig+0x82>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <TIM_OC5_SetConfig+0xc0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_OC5_SetConfig+0x82>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <TIM_OC5_SetConfig+0xc4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_OC5_SetConfig+0x82>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a16      	ldr	r2, [pc, #88]	; (8004e30 <TIM_OC5_SetConfig+0xc8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_OC5_SetConfig+0x82>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <TIM_OC5_SetConfig+0xcc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_OC5_SetConfig+0x82>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a14      	ldr	r2, [pc, #80]	; (8004e38 <TIM_OC5_SetConfig+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d109      	bne.n	8004dfe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40013400 	.word	0x40013400
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40014400 	.word	0x40014400
 8004e34:	40014800 	.word	0x40014800
 8004e38:	40015000 	.word	0x40015000

08004e3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	051b      	lsls	r3, r3, #20
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a1a      	ldr	r2, [pc, #104]	; (8004efc <TIM_OC6_SetConfig+0xc0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <TIM_OC6_SetConfig+0x84>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <TIM_OC6_SetConfig+0xc4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00f      	beq.n	8004ec0 <TIM_OC6_SetConfig+0x84>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <TIM_OC6_SetConfig+0xc8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00b      	beq.n	8004ec0 <TIM_OC6_SetConfig+0x84>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <TIM_OC6_SetConfig+0xcc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d007      	beq.n	8004ec0 <TIM_OC6_SetConfig+0x84>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a16      	ldr	r2, [pc, #88]	; (8004f0c <TIM_OC6_SetConfig+0xd0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d003      	beq.n	8004ec0 <TIM_OC6_SetConfig+0x84>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a15      	ldr	r2, [pc, #84]	; (8004f10 <TIM_OC6_SetConfig+0xd4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d109      	bne.n	8004ed4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	029b      	lsls	r3, r3, #10
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40013400 	.word	0x40013400
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40014400 	.word	0x40014400
 8004f0c:	40014800 	.word	0x40014800
 8004f10:	40015000 	.word	0x40015000

08004f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	2201      	movs	r2, #1
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a1a      	ldr	r2, [r3, #32]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	43db      	mvns	r3, r3
 8004f36:	401a      	ands	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a1a      	ldr	r2, [r3, #32]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e06d      	b.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a30      	ldr	r2, [pc, #192]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d009      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2f      	ldr	r2, [pc, #188]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d004      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2d      	ldr	r2, [pc, #180]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d108      	bne.n	8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d01d      	beq.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d018      	beq.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1c      	ldr	r2, [pc, #112]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d013      	beq.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a15      	ldr	r2, [pc, #84]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a16      	ldr	r2, [pc, #88]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a11      	ldr	r2, [pc, #68]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d10c      	bne.n	8005042 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800502e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	4313      	orrs	r3, r2
 8005038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40013400 	.word	0x40013400
 8005068:	40015000 	.word	0x40015000
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40014000 	.word	0x40014000

08005078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e040      	b.n	800510c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fb fd38 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	; 0x24
 80050a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f82c 	bl	8005114 <UART_SetConfig>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e022      	b.n	800510c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fa3a 	bl	8005548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fac1 	bl	800568c <UART_CheckIdleState>
 800510a:	4603      	mov	r3, r0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4bac      	ldr	r3, [pc, #688]	; (80053f4 <UART_SetConfig+0x2e0>)
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	6939      	ldr	r1, [r7, #16]
 800514c:	430b      	orrs	r3, r1
 800514e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	430a      	orrs	r2, r1
 8005188:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a9a      	ldr	r2, [pc, #616]	; (80053f8 <UART_SetConfig+0x2e4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d121      	bne.n	80051d8 <UART_SetConfig+0xc4>
 8005194:	4b99      	ldr	r3, [pc, #612]	; (80053fc <UART_SetConfig+0x2e8>)
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	2b03      	cmp	r3, #3
 800519e:	d817      	bhi.n	80051d0 <UART_SetConfig+0xbc>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x94>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051c5 	.word	0x080051c5
 80051b0:	080051cb 	.word	0x080051cb
 80051b4:	080051bf 	.word	0x080051bf
 80051b8:	2301      	movs	r3, #1
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e0b2      	b.n	8005324 <UART_SetConfig+0x210>
 80051be:	2302      	movs	r3, #2
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e0af      	b.n	8005324 <UART_SetConfig+0x210>
 80051c4:	2304      	movs	r3, #4
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e0ac      	b.n	8005324 <UART_SetConfig+0x210>
 80051ca:	2308      	movs	r3, #8
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e0a9      	b.n	8005324 <UART_SetConfig+0x210>
 80051d0:	2310      	movs	r3, #16
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	bf00      	nop
 80051d6:	e0a5      	b.n	8005324 <UART_SetConfig+0x210>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a88      	ldr	r2, [pc, #544]	; (8005400 <UART_SetConfig+0x2ec>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d123      	bne.n	800522a <UART_SetConfig+0x116>
 80051e2:	4b86      	ldr	r3, [pc, #536]	; (80053fc <UART_SetConfig+0x2e8>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ee:	d012      	beq.n	8005216 <UART_SetConfig+0x102>
 80051f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f4:	d802      	bhi.n	80051fc <UART_SetConfig+0xe8>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <UART_SetConfig+0xf6>
 80051fa:	e012      	b.n	8005222 <UART_SetConfig+0x10e>
 80051fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005200:	d00c      	beq.n	800521c <UART_SetConfig+0x108>
 8005202:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005206:	d003      	beq.n	8005210 <UART_SetConfig+0xfc>
 8005208:	e00b      	b.n	8005222 <UART_SetConfig+0x10e>
 800520a:	2300      	movs	r3, #0
 800520c:	77fb      	strb	r3, [r7, #31]
 800520e:	e089      	b.n	8005324 <UART_SetConfig+0x210>
 8005210:	2302      	movs	r3, #2
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e086      	b.n	8005324 <UART_SetConfig+0x210>
 8005216:	2304      	movs	r3, #4
 8005218:	77fb      	strb	r3, [r7, #31]
 800521a:	e083      	b.n	8005324 <UART_SetConfig+0x210>
 800521c:	2308      	movs	r3, #8
 800521e:	77fb      	strb	r3, [r7, #31]
 8005220:	e080      	b.n	8005324 <UART_SetConfig+0x210>
 8005222:	2310      	movs	r3, #16
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	bf00      	nop
 8005228:	e07c      	b.n	8005324 <UART_SetConfig+0x210>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a75      	ldr	r2, [pc, #468]	; (8005404 <UART_SetConfig+0x2f0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d123      	bne.n	800527c <UART_SetConfig+0x168>
 8005234:	4b71      	ldr	r3, [pc, #452]	; (80053fc <UART_SetConfig+0x2e8>)
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800523c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005240:	d012      	beq.n	8005268 <UART_SetConfig+0x154>
 8005242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005246:	d802      	bhi.n	800524e <UART_SetConfig+0x13a>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <UART_SetConfig+0x148>
 800524c:	e012      	b.n	8005274 <UART_SetConfig+0x160>
 800524e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005252:	d00c      	beq.n	800526e <UART_SetConfig+0x15a>
 8005254:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005258:	d003      	beq.n	8005262 <UART_SetConfig+0x14e>
 800525a:	e00b      	b.n	8005274 <UART_SetConfig+0x160>
 800525c:	2300      	movs	r3, #0
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e060      	b.n	8005324 <UART_SetConfig+0x210>
 8005262:	2302      	movs	r3, #2
 8005264:	77fb      	strb	r3, [r7, #31]
 8005266:	e05d      	b.n	8005324 <UART_SetConfig+0x210>
 8005268:	2304      	movs	r3, #4
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e05a      	b.n	8005324 <UART_SetConfig+0x210>
 800526e:	2308      	movs	r3, #8
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e057      	b.n	8005324 <UART_SetConfig+0x210>
 8005274:	2310      	movs	r3, #16
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	bf00      	nop
 800527a:	e053      	b.n	8005324 <UART_SetConfig+0x210>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a61      	ldr	r2, [pc, #388]	; (8005408 <UART_SetConfig+0x2f4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d123      	bne.n	80052ce <UART_SetConfig+0x1ba>
 8005286:	4b5d      	ldr	r3, [pc, #372]	; (80053fc <UART_SetConfig+0x2e8>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800528e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005292:	d012      	beq.n	80052ba <UART_SetConfig+0x1a6>
 8005294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005298:	d802      	bhi.n	80052a0 <UART_SetConfig+0x18c>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <UART_SetConfig+0x19a>
 800529e:	e012      	b.n	80052c6 <UART_SetConfig+0x1b2>
 80052a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052a4:	d00c      	beq.n	80052c0 <UART_SetConfig+0x1ac>
 80052a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052aa:	d003      	beq.n	80052b4 <UART_SetConfig+0x1a0>
 80052ac:	e00b      	b.n	80052c6 <UART_SetConfig+0x1b2>
 80052ae:	2300      	movs	r3, #0
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e037      	b.n	8005324 <UART_SetConfig+0x210>
 80052b4:	2302      	movs	r3, #2
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e034      	b.n	8005324 <UART_SetConfig+0x210>
 80052ba:	2304      	movs	r3, #4
 80052bc:	77fb      	strb	r3, [r7, #31]
 80052be:	e031      	b.n	8005324 <UART_SetConfig+0x210>
 80052c0:	2308      	movs	r3, #8
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e02e      	b.n	8005324 <UART_SetConfig+0x210>
 80052c6:	2310      	movs	r3, #16
 80052c8:	77fb      	strb	r3, [r7, #31]
 80052ca:	bf00      	nop
 80052cc:	e02a      	b.n	8005324 <UART_SetConfig+0x210>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a4e      	ldr	r2, [pc, #312]	; (800540c <UART_SetConfig+0x2f8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d123      	bne.n	8005320 <UART_SetConfig+0x20c>
 80052d8:	4b48      	ldr	r3, [pc, #288]	; (80053fc <UART_SetConfig+0x2e8>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80052e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052e4:	d012      	beq.n	800530c <UART_SetConfig+0x1f8>
 80052e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ea:	d802      	bhi.n	80052f2 <UART_SetConfig+0x1de>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <UART_SetConfig+0x1ec>
 80052f0:	e012      	b.n	8005318 <UART_SetConfig+0x204>
 80052f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052f6:	d00c      	beq.n	8005312 <UART_SetConfig+0x1fe>
 80052f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052fc:	d003      	beq.n	8005306 <UART_SetConfig+0x1f2>
 80052fe:	e00b      	b.n	8005318 <UART_SetConfig+0x204>
 8005300:	2300      	movs	r3, #0
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e00e      	b.n	8005324 <UART_SetConfig+0x210>
 8005306:	2302      	movs	r3, #2
 8005308:	77fb      	strb	r3, [r7, #31]
 800530a:	e00b      	b.n	8005324 <UART_SetConfig+0x210>
 800530c:	2304      	movs	r3, #4
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e008      	b.n	8005324 <UART_SetConfig+0x210>
 8005312:	2308      	movs	r3, #8
 8005314:	77fb      	strb	r3, [r7, #31]
 8005316:	e005      	b.n	8005324 <UART_SetConfig+0x210>
 8005318:	2310      	movs	r3, #16
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	bf00      	nop
 800531e:	e001      	b.n	8005324 <UART_SetConfig+0x210>
 8005320:	2310      	movs	r3, #16
 8005322:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532c:	f040 8090 	bne.w	8005450 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8005330:	7ffb      	ldrb	r3, [r7, #31]
 8005332:	2b08      	cmp	r3, #8
 8005334:	d86c      	bhi.n	8005410 <UART_SetConfig+0x2fc>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <UART_SetConfig+0x228>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005361 	.word	0x08005361
 8005340:	08005381 	.word	0x08005381
 8005344:	080053a1 	.word	0x080053a1
 8005348:	08005411 	.word	0x08005411
 800534c:	080053bd 	.word	0x080053bd
 8005350:	08005411 	.word	0x08005411
 8005354:	08005411 	.word	0x08005411
 8005358:	08005411 	.word	0x08005411
 800535c:	080053dd 	.word	0x080053dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fe fd1a 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8005364:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	005a      	lsls	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	441a      	add	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	fbb2 f3f3 	udiv	r3, r2, r3
 800537a:	b29b      	uxth	r3, r3
 800537c:	61bb      	str	r3, [r7, #24]
        break;
 800537e:	e04a      	b.n	8005416 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005380:	f7fe fd2c 	bl	8003ddc <HAL_RCC_GetPCLK2Freq>
 8005384:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	005a      	lsls	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	441a      	add	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	b29b      	uxth	r3, r3
 800539c:	61bb      	str	r3, [r7, #24]
        break;
 800539e:	e03a      	b.n	8005416 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80053aa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6852      	ldr	r2, [r2, #4]
 80053b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	61bb      	str	r3, [r7, #24]
        break;
 80053ba:	e02c      	b.n	8005416 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053bc:	f7fe fc76 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 80053c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	005a      	lsls	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	61bb      	str	r3, [r7, #24]
        break;
 80053da:	e01c      	b.n	8005416 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	085b      	lsrs	r3, r3, #1
 80053e2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	61bb      	str	r3, [r7, #24]
        break;
 80053f2:	e010      	b.n	8005416 <UART_SetConfig+0x302>
 80053f4:	efff69f3 	.word	0xefff69f3
 80053f8:	40013800 	.word	0x40013800
 80053fc:	40021000 	.word	0x40021000
 8005400:	40004400 	.word	0x40004400
 8005404:	40004800 	.word	0x40004800
 8005408:	40004c00 	.word	0x40004c00
 800540c:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
        break;
 8005414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b0f      	cmp	r3, #15
 800541a:	d916      	bls.n	800544a <UART_SetConfig+0x336>
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005422:	d212      	bcs.n	800544a <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f023 030f 	bic.w	r3, r3, #15
 800542c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	b29b      	uxth	r3, r3
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	b29a      	uxth	r2, r3
 800543a:	897b      	ldrh	r3, [r7, #10]
 800543c:	4313      	orrs	r3, r2
 800543e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	897a      	ldrh	r2, [r7, #10]
 8005446:	60da      	str	r2, [r3, #12]
 8005448:	e072      	b.n	8005530 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	75fb      	strb	r3, [r7, #23]
 800544e:	e06f      	b.n	8005530 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8005450:	7ffb      	ldrb	r3, [r7, #31]
 8005452:	2b08      	cmp	r3, #8
 8005454:	d85b      	bhi.n	800550e <UART_SetConfig+0x3fa>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0x348>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	08005481 	.word	0x08005481
 8005460:	0800549f 	.word	0x0800549f
 8005464:	080054bd 	.word	0x080054bd
 8005468:	0800550f 	.word	0x0800550f
 800546c:	080054d9 	.word	0x080054d9
 8005470:	0800550f 	.word	0x0800550f
 8005474:	0800550f 	.word	0x0800550f
 8005478:	0800550f 	.word	0x0800550f
 800547c:	080054f7 	.word	0x080054f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005480:	f7fe fc8a 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8005484:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	085a      	lsrs	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	441a      	add	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	b29b      	uxth	r3, r3
 800549a:	61bb      	str	r3, [r7, #24]
        break;
 800549c:	e03a      	b.n	8005514 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800549e:	f7fe fc9d 	bl	8003ddc <HAL_RCC_GetPCLK2Freq>
 80054a2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	085a      	lsrs	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	441a      	add	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	61bb      	str	r3, [r7, #24]
        break;
 80054ba:	e02b      	b.n	8005514 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80054c6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6852      	ldr	r2, [r2, #4]
 80054ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	61bb      	str	r3, [r7, #24]
        break;
 80054d6:	e01d      	b.n	8005514 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054d8:	f7fe fbe8 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 80054dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	085a      	lsrs	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	441a      	add	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	61bb      	str	r3, [r7, #24]
        break;
 80054f4:	e00e      	b.n	8005514 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	b29b      	uxth	r3, r3
 800550a:	61bb      	str	r3, [r7, #24]
        break;
 800550c:	e002      	b.n	8005514 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	75fb      	strb	r3, [r7, #23]
        break;
 8005512:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b0f      	cmp	r3, #15
 8005518:	d908      	bls.n	800552c <UART_SetConfig+0x418>
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005520:	d204      	bcs.n	800552c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	e001      	b.n	8005530 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800553c:	7dfb      	ldrb	r3, [r7, #23]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop

08005548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01a      	beq.n	800565e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005646:	d10a      	bne.n	800565e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]
  }
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af02      	add	r7, sp, #8
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800569a:	f7fb faff 	bl	8000c9c <HAL_GetTick>
 800569e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d10e      	bne.n	80056cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f82a 	bl	8005716 <UART_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e020      	b.n	800570e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d10e      	bne.n	80056f8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f814 	bl	8005716 <UART_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e00a      	b.n	800570e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005726:	e05d      	b.n	80057e4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800572e:	d059      	beq.n	80057e4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005730:	f7fb fab4 	bl	8000c9c <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	429a      	cmp	r2, r3
 800573e:	d302      	bcc.n	8005746 <UART_WaitOnFlagUntilTimeout+0x30>
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d11b      	bne.n	800577e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005754:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e042      	b.n	8005804 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02b      	beq.n	80057e4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579a:	d123      	bne.n	80057e4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057a4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e00f      	b.n	8005804 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4013      	ands	r3, r2
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d092      	beq.n	8005728 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <LL_EXTI_EnableIT_0_31+0x20>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4904      	ldr	r1, [pc, #16]	; (800582c <LL_EXTI_EnableIT_0_31+0x20>)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4313      	orrs	r3, r2
 800581e:	600b      	str	r3, [r1, #0]
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40010400 	.word	0x40010400

08005830 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <LL_EXTI_EnableIT_32_63+0x20>)
 800583a:	6a1a      	ldr	r2, [r3, #32]
 800583c:	4904      	ldr	r1, [pc, #16]	; (8005850 <LL_EXTI_EnableIT_32_63+0x20>)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4313      	orrs	r3, r2
 8005842:	620b      	str	r3, [r1, #32]
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40010400 	.word	0x40010400

08005854 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <LL_EXTI_DisableIT_0_31+0x24>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	43db      	mvns	r3, r3
 8005864:	4904      	ldr	r1, [pc, #16]	; (8005878 <LL_EXTI_DisableIT_0_31+0x24>)
 8005866:	4013      	ands	r3, r2
 8005868:	600b      	str	r3, [r1, #0]
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40010400 	.word	0x40010400

0800587c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <LL_EXTI_DisableIT_32_63+0x24>)
 8005886:	6a1a      	ldr	r2, [r3, #32]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	43db      	mvns	r3, r3
 800588c:	4904      	ldr	r1, [pc, #16]	; (80058a0 <LL_EXTI_DisableIT_32_63+0x24>)
 800588e:	4013      	ands	r3, r2
 8005890:	620b      	str	r3, [r1, #32]
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40010400 	.word	0x40010400

080058a4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	4904      	ldr	r1, [pc, #16]	; (80058c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]

}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	40010400 	.word	0x40010400

080058c8 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80058d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058d4:	4904      	ldr	r1, [pc, #16]	; (80058e8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4313      	orrs	r3, r2
 80058da:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40010400 	.word	0x40010400

080058ec <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <LL_EXTI_DisableEvent_0_31+0x24>)
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	43db      	mvns	r3, r3
 80058fc:	4904      	ldr	r1, [pc, #16]	; (8005910 <LL_EXTI_DisableEvent_0_31+0x24>)
 80058fe:	4013      	ands	r3, r2
 8005900:	604b      	str	r3, [r1, #4]
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40010400 	.word	0x40010400

08005914 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <LL_EXTI_DisableEvent_32_63+0x24>)
 800591e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	43db      	mvns	r3, r3
 8005924:	4904      	ldr	r1, [pc, #16]	; (8005938 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005926:	4013      	ands	r3, r2
 8005928:	624b      	str	r3, [r1, #36]	; 0x24
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40010400 	.word	0x40010400

0800593c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	4904      	ldr	r1, [pc, #16]	; (800595c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4313      	orrs	r3, r2
 800594e:	608b      	str	r3, [r1, #8]

}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40010400 	.word	0x40010400

08005960 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800596a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596c:	4904      	ldr	r1, [pc, #16]	; (8005980 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4313      	orrs	r3, r2
 8005972:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40010400 	.word	0x40010400

08005984 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	43db      	mvns	r3, r3
 8005994:	4904      	ldr	r1, [pc, #16]	; (80059a8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005996:	4013      	ands	r3, r2
 8005998:	608b      	str	r3, [r1, #8]

}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010400 	.word	0x40010400

080059ac <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80059b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	43db      	mvns	r3, r3
 80059bc:	4904      	ldr	r1, [pc, #16]	; (80059d0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80059be:	4013      	ands	r3, r2
 80059c0:	628b      	str	r3, [r1, #40]	; 0x28
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010400 	.word	0x40010400

080059d4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	4904      	ldr	r1, [pc, #16]	; (80059f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60cb      	str	r3, [r1, #12]
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40010400 	.word	0x40010400

080059f8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a04:	4904      	ldr	r1, [pc, #16]	; (8005a18 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	40010400 	.word	0x40010400

08005a1c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	4904      	ldr	r1, [pc, #16]	; (8005a40 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60cb      	str	r3, [r1, #12]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40010400 	.word	0x40010400

08005a44 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	43db      	mvns	r3, r3
 8005a54:	4904      	ldr	r1, [pc, #16]	; (8005a68 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40010400 	.word	0x40010400

08005a6c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	7a1b      	ldrb	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80c2 	beq.w	8005c06 <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d05b      	beq.n	8005b42 <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7a5b      	ldrb	r3, [r3, #9]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d00e      	beq.n	8005ab0 <LL_EXTI_Init+0x44>
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d017      	beq.n	8005ac6 <LL_EXTI_Init+0x5a>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d120      	bne.n	8005adc <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff ff24 	bl	80058ec <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff feaf 	bl	800580c <LL_EXTI_EnableIT_0_31>
          break;
 8005aae:	e018      	b.n	8005ae2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff fecd 	bl	8005854 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fef0 	bl	80058a4 <LL_EXTI_EnableEvent_0_31>
          break;
 8005ac4:	e00d      	b.n	8005ae2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff fe9e 	bl	800580c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fee5 	bl	80058a4 <LL_EXTI_EnableEvent_0_31>
          break;
 8005ada:	e002      	b.n	8005ae2 <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
          break;
 8005ae0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	7a9b      	ldrb	r3, [r3, #10]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d02b      	beq.n	8005b42 <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	7a9b      	ldrb	r3, [r3, #10]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d00e      	beq.n	8005b10 <LL_EXTI_Init+0xa4>
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d017      	beq.n	8005b26 <LL_EXTI_Init+0xba>
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d120      	bne.n	8005b3c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff ff8c 	bl	8005a1c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff ff17 	bl	800593c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005b0e:	e019      	b.n	8005b44 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff ff35 	bl	8005984 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff ff58 	bl	80059d4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005b24:	e00e      	b.n	8005b44 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff ff06 	bl	800593c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff ff4d 	bl	80059d4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005b3a:	e003      	b.n	8005b44 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
            break;
 8005b40:	e000      	b.n	8005b44 <LL_EXTI_Init+0xd8>
        }
      }
 8005b42:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d071      	beq.n	8005c30 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	7a5b      	ldrb	r3, [r3, #9]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d00e      	beq.n	8005b72 <LL_EXTI_Init+0x106>
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d017      	beq.n	8005b88 <LL_EXTI_Init+0x11c>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d120      	bne.n	8005b9e <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff fed7 	bl	8005914 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fe60 	bl	8005830 <LL_EXTI_EnableIT_32_63>
          break;
 8005b70:	e018      	b.n	8005ba4 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fe80 	bl	800587c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fea1 	bl	80058c8 <LL_EXTI_EnableEvent_32_63>
          break;
 8005b86:	e00d      	b.n	8005ba4 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fe4f 	bl	8005830 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fe96 	bl	80058c8 <LL_EXTI_EnableEvent_32_63>
          break;
 8005b9c:	e002      	b.n	8005ba4 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	73fb      	strb	r3, [r7, #15]
          break;
 8005ba2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	7a9b      	ldrb	r3, [r3, #10]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d041      	beq.n	8005c30 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7a9b      	ldrb	r3, [r3, #10]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d00e      	beq.n	8005bd2 <LL_EXTI_Init+0x166>
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d017      	beq.n	8005be8 <LL_EXTI_Init+0x17c>
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d120      	bne.n	8005bfe <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff ff3f 	bl	8005a44 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff fec8 	bl	8005960 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8005bd0:	e02f      	b.n	8005c32 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff fee8 	bl	80059ac <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff ff09 	bl	80059f8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005be6:	e024      	b.n	8005c32 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff feb7 	bl	8005960 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff fefe 	bl	80059f8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005bfc:	e019      	b.n	8005c32 <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
            break;
 8005c02:	bf00      	nop
 8005c04:	e015      	b.n	8005c32 <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff fe22 	bl	8005854 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fe69 	bl	80058ec <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff fe2c 	bl	800587c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff fe73 	bl	8005914 <LL_EXTI_DisableEvent_32_63>
 8005c2e:	e000      	b.n	8005c32 <LL_EXTI_Init+0x1c6>
      }
 8005c30:	bf00      	nop
#endif
  }
  return status;
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <LL_GPIO_SetPinMode>:
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	; 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	fa93 f3a3 	rbit	r3, r3
 8005c56:	613b      	str	r3, [r7, #16]
  return result;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	fab3 f383 	clz	r3, r3
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	2103      	movs	r1, #3
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	401a      	ands	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	fa93 f3a3 	rbit	r3, r3
 8005c76:	61bb      	str	r3, [r7, #24]
  return result;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	fab3 f383 	clz	r3, r3
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	601a      	str	r2, [r3, #0]
}
 8005c8e:	bf00      	nop
 8005c90:	3724      	adds	r7, #36	; 0x24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <LL_GPIO_SetPinOutputType>:
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	43db      	mvns	r3, r3
 8005cae:	401a      	ands	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	605a      	str	r2, [r3, #4]
}
 8005cbe:	bf00      	nop
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <LL_GPIO_SetPinSpeed>:
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b089      	sub	sp, #36	; 0x24
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	fa93 f3a3 	rbit	r3, r3
 8005ce4:	613b      	str	r3, [r7, #16]
  return result;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	fab3 f383 	clz	r3, r3
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	2103      	movs	r1, #3
 8005cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	401a      	ands	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	fa93 f3a3 	rbit	r3, r3
 8005d04:	61bb      	str	r3, [r7, #24]
  return result;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	fab3 f383 	clz	r3, r3
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	fa01 f303 	lsl.w	r3, r1, r3
 8005d16:	431a      	orrs	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	609a      	str	r2, [r3, #8]
}
 8005d1c:	bf00      	nop
 8005d1e:	3724      	adds	r7, #36	; 0x24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <LL_GPIO_SetPinPull>:
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	fa93 f3a3 	rbit	r3, r3
 8005d42:	613b      	str	r3, [r7, #16]
  return result;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	fab3 f383 	clz	r3, r3
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	2103      	movs	r1, #3
 8005d50:	fa01 f303 	lsl.w	r3, r1, r3
 8005d54:	43db      	mvns	r3, r3
 8005d56:	401a      	ands	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	fa93 f3a3 	rbit	r3, r3
 8005d62:	61bb      	str	r3, [r7, #24]
  return result;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	fab3 f383 	clz	r3, r3
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	fa01 f303 	lsl.w	r3, r1, r3
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	60da      	str	r2, [r3, #12]
}
 8005d7a:	bf00      	nop
 8005d7c:	3724      	adds	r7, #36	; 0x24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <LL_GPIO_SetAFPin_0_7>:
{
 8005d86:	b480      	push	{r7}
 8005d88:	b089      	sub	sp, #36	; 0x24
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	fa93 f3a3 	rbit	r3, r3
 8005da0:	613b      	str	r3, [r7, #16]
  return result;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	fab3 f383 	clz	r3, r3
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	210f      	movs	r1, #15
 8005dae:	fa01 f303 	lsl.w	r3, r1, r3
 8005db2:	43db      	mvns	r3, r3
 8005db4:	401a      	ands	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	fa93 f3a3 	rbit	r3, r3
 8005dc0:	61bb      	str	r3, [r7, #24]
  return result;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	fab3 f383 	clz	r3, r3
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	621a      	str	r2, [r3, #32]
}
 8005dd8:	bf00      	nop
 8005dda:	3724      	adds	r7, #36	; 0x24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <LL_GPIO_SetAFPin_8_15>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	b089      	sub	sp, #36	; 0x24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	fa93 f3a3 	rbit	r3, r3
 8005e00:	613b      	str	r3, [r7, #16]
  return result;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	fab3 f383 	clz	r3, r3
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	210f      	movs	r1, #15
 8005e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e12:	43db      	mvns	r3, r3
 8005e14:	401a      	ands	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	0a1b      	lsrs	r3, r3, #8
 8005e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	fa93 f3a3 	rbit	r3, r3
 8005e22:	61bb      	str	r3, [r7, #24]
  return result;
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	fab3 f383 	clz	r3, r3
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	fa01 f303 	lsl.w	r3, r1, r3
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005e3a:	bf00      	nop
 8005e3c:	3724      	adds	r7, #36	; 0x24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b088      	sub	sp, #32
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	fa93 f3a3 	rbit	r3, r3
 8005e5c:	613b      	str	r3, [r7, #16]
  return result;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	fab3 f383 	clz	r3, r3
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005e68:	e049      	b.n	8005efe <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	2101      	movs	r1, #1
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	4013      	ands	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d03b      	beq.n	8005ef8 <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	461a      	mov	r2, r3
 8005e86:	69b9      	ldr	r1, [r7, #24]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fed7 	bl	8005c3c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d003      	beq.n	8005e9e <LL_GPIO_Init+0x58>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d106      	bne.n	8005eac <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	69b9      	ldr	r1, [r7, #24]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff ff0f 	bl	8005cca <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	69b9      	ldr	r1, [r7, #24]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ff37 	bl	8005d28 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d11a      	bne.n	8005ef8 <LL_GPIO_Init+0xb2>
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	fa93 f3a3 	rbit	r3, r3
 8005ecc:	60bb      	str	r3, [r7, #8]
  return result;
 8005ece:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005ed0:	fab3 f383 	clz	r3, r3
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b07      	cmp	r3, #7
 8005ed8:	d807      	bhi.n	8005eea <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	69b9      	ldr	r1, [r7, #24]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff ff4f 	bl	8005d86 <LL_GPIO_SetAFPin_0_7>
 8005ee8:	e006      	b.n	8005ef8 <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	69b9      	ldr	r1, [r7, #24]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff ff76 	bl	8005de4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	3301      	adds	r3, #1
 8005efc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1ae      	bne.n	8005e6a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d003      	beq.n	8005f1c <LL_GPIO_Init+0xd6>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d107      	bne.n	8005f2c <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff feb7 	bl	8005c9a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <__libc_init_array>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	4e0d      	ldr	r6, [pc, #52]	; (8005f70 <__libc_init_array+0x38>)
 8005f3c:	4c0d      	ldr	r4, [pc, #52]	; (8005f74 <__libc_init_array+0x3c>)
 8005f3e:	1ba4      	subs	r4, r4, r6
 8005f40:	10a4      	asrs	r4, r4, #2
 8005f42:	2500      	movs	r5, #0
 8005f44:	42a5      	cmp	r5, r4
 8005f46:	d109      	bne.n	8005f5c <__libc_init_array+0x24>
 8005f48:	4e0b      	ldr	r6, [pc, #44]	; (8005f78 <__libc_init_array+0x40>)
 8005f4a:	4c0c      	ldr	r4, [pc, #48]	; (8005f7c <__libc_init_array+0x44>)
 8005f4c:	f000 f820 	bl	8005f90 <_init>
 8005f50:	1ba4      	subs	r4, r4, r6
 8005f52:	10a4      	asrs	r4, r4, #2
 8005f54:	2500      	movs	r5, #0
 8005f56:	42a5      	cmp	r5, r4
 8005f58:	d105      	bne.n	8005f66 <__libc_init_array+0x2e>
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f60:	4798      	blx	r3
 8005f62:	3501      	adds	r5, #1
 8005f64:	e7ee      	b.n	8005f44 <__libc_init_array+0xc>
 8005f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f6a:	4798      	blx	r3
 8005f6c:	3501      	adds	r5, #1
 8005f6e:	e7f2      	b.n	8005f56 <__libc_init_array+0x1e>
 8005f70:	08005fe0 	.word	0x08005fe0
 8005f74:	08005fe0 	.word	0x08005fe0
 8005f78:	08005fe0 	.word	0x08005fe0
 8005f7c:	08005fe4 	.word	0x08005fe4

08005f80 <memset>:
 8005f80:	4402      	add	r2, r0
 8005f82:	4603      	mov	r3, r0
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d100      	bne.n	8005f8a <memset+0xa>
 8005f88:	4770      	bx	lr
 8005f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8e:	e7f9      	b.n	8005f84 <memset+0x4>

08005f90 <_init>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr

08005f9c <_fini>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	bf00      	nop
 8005fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa2:	bc08      	pop	{r3}
 8005fa4:	469e      	mov	lr, r3
 8005fa6:	4770      	bx	lr
