
dcmotorsimple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f4  080047f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080047f4  080047f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f4  080047f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080047fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f4  20000010  0800480c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  0800480c  00020904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d398  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020b3  00000000  00000000  0002d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  0002f490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  000301f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e8ae  00000000  00000000  00030e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb60  00000000  00000000  0004f6d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b5a49  00000000  00000000  0005b236  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110c7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003714  00000000  00000000  00110cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080047a4 	.word	0x080047a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080047a4 	.word	0x080047a4

080001d4 <com_Test_SendBuffer>:

#include "com.h"
#include "usart.h"


void com_Test_SendBuffer( uint8_t * const buffer, const uint16_t size_bytes ){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	807b      	strh	r3, [r7, #2]
	uint16_t *u16buffer = (uint16_t *)buffer;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	60bb      	str	r3, [r7, #8]
	uint16_t i;

	for(i=0;i<size_bytes/2;i++){
 80001e4:	2300      	movs	r3, #0
 80001e6:	81fb      	strh	r3, [r7, #14]
 80001e8:	e008      	b.n	80001fc <com_Test_SendBuffer+0x28>
		u16buffer[i]=i;
 80001ea:	89fb      	ldrh	r3, [r7, #14]
 80001ec:	005b      	lsls	r3, r3, #1
 80001ee:	68ba      	ldr	r2, [r7, #8]
 80001f0:	4413      	add	r3, r2
 80001f2:	89fa      	ldrh	r2, [r7, #14]
 80001f4:	801a      	strh	r2, [r3, #0]
	for(i=0;i<size_bytes/2;i++){
 80001f6:	89fb      	ldrh	r3, [r7, #14]
 80001f8:	3301      	adds	r3, #1
 80001fa:	81fb      	strh	r3, [r7, #14]
 80001fc:	887b      	ldrh	r3, [r7, #2]
 80001fe:	085b      	lsrs	r3, r3, #1
 8000200:	b29b      	uxth	r3, r3
 8000202:	89fa      	ldrh	r2, [r7, #14]
 8000204:	429a      	cmp	r2, r3
 8000206:	d3f0      	bcc.n	80001ea <com_Test_SendBuffer+0x16>
	}

	HAL_UART_Transmit(&huart2, buffer, size_bytes, 5000);
 8000208:	887a      	ldrh	r2, [r7, #2]
 800020a:	f241 3388 	movw	r3, #5000	; 0x1388
 800020e:	6879      	ldr	r1, [r7, #4]
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <com_Test_SendBuffer+0x4c>)
 8000212:	f003 faf5 	bl	8003800 <HAL_UART_Transmit>

}
 8000216:	bf00      	nop
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	20000880 	.word	0x20000880

08000224 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800022e:	4a13      	ldr	r2, [pc, #76]	; (800027c <LL_SYSCFG_SetEXTISource+0x58>)
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	b2db      	uxtb	r3, r3
 8000234:	3302      	adds	r3, #2
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	0c1b      	lsrs	r3, r3, #16
 800023e:	43db      	mvns	r3, r3
 8000240:	ea02 0103 	and.w	r1, r2, r3
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	fa93 f3a3 	rbit	r3, r3
 8000250:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	fab3 f383 	clz	r3, r3
 8000258:	b2db      	uxtb	r3, r3
 800025a:	461a      	mov	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	fa03 f202 	lsl.w	r2, r3, r2
 8000262:	4806      	ldr	r0, [pc, #24]	; (800027c <LL_SYSCFG_SetEXTISource+0x58>)
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	b2db      	uxtb	r3, r3
 8000268:	430a      	orrs	r2, r1
 800026a:	3302      	adds	r3, #2
 800026c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000270:	bf00      	nop
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40010000 	.word	0x40010000

08000280 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	fa93 f3a3 	rbit	r3, r3
 800029a:	613b      	str	r3, [r7, #16]
  return result;
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	fab3 f383 	clz	r3, r3
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002b4:	69fb      	ldr	r3, [r7, #28]
 80002b6:	fa93 f3a3 	rbit	r3, r3
 80002ba:	61bb      	str	r3, [r7, #24]
  return result;
 80002bc:	69bb      	ldr	r3, [r7, #24]
 80002be:	fab3 f383 	clz	r3, r3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	6879      	ldr	r1, [r7, #4]
 80002c8:	fa01 f303 	lsl.w	r3, r1, r3
 80002cc:	431a      	orrs	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	601a      	str	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	3724      	adds	r7, #36	; 0x24
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002de:	b480      	push	{r7}
 80002e0:	b089      	sub	sp, #36	; 0x24
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	68da      	ldr	r2, [r3, #12]
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	fa93 f3a3 	rbit	r3, r3
 80002f8:	613b      	str	r3, [r7, #16]
  return result;
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	fab3 f383 	clz	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	2103      	movs	r1, #3
 8000306:	fa01 f303 	lsl.w	r3, r1, r3
 800030a:	43db      	mvns	r3, r3
 800030c:	401a      	ands	r2, r3
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000312:	69fb      	ldr	r3, [r7, #28]
 8000314:	fa93 f3a3 	rbit	r3, r3
 8000318:	61bb      	str	r3, [r7, #24]
  return result;
 800031a:	69bb      	ldr	r3, [r7, #24]
 800031c:	fab3 f383 	clz	r3, r3
 8000320:	b2db      	uxtb	r3, r3
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	6879      	ldr	r1, [r7, #4]
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	431a      	orrs	r2, r3
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	60da      	str	r2, [r3, #12]
}
 8000330:	bf00      	nop
 8000332:	3724      	adds	r7, #36	; 0x24
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	683a      	ldr	r2, [r7, #0]
 800034a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000362:	695a      	ldr	r2, [r3, #20]
 8000364:	4907      	ldr	r1, [pc, #28]	; (8000384 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4313      	orrs	r3, r2
 800036a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800036e:	695a      	ldr	r2, [r3, #20]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4013      	ands	r3, r2
 8000374:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000376:	68fb      	ldr	r3, [r7, #12]
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000

08000388 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC7   ------> S_TIM3_CH2
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800038e:	f107 031c 	add.w	r3, r7, #28
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
 80003a8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80003aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80003ae:	f7ff ffd3 	bl	8000358 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80003b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80003b6:	f7ff ffcf 	bl	8000358 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80003be:	f7ff ffcb 	bl	8000358 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80003c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80003c6:	f7ff ffc7 	bl	8000358 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LD2_Pin|EN_A_Pin);
 80003ca:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f7ff ffb3 	bl	800033c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IN2_A_GPIO_Port, IN2_A_Pin);
 80003d6:	2120      	movs	r1, #32
 80003d8:	482d      	ldr	r0, [pc, #180]	; (8000490 <MX_GPIO_Init+0x108>)
 80003da:	f7ff ffaf 	bl	800033c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80003de:	492d      	ldr	r1, [pc, #180]	; (8000494 <MX_GPIO_Init+0x10c>)
 80003e0:	2002      	movs	r0, #2
 80003e2:	f7ff ff1f 	bl	8000224 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ec:	482a      	ldr	r0, [pc, #168]	; (8000498 <MX_GPIO_Init+0x110>)
 80003ee:	f7ff ff76 	bl	80002de <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f8:	4827      	ldr	r0, [pc, #156]	; (8000498 <MX_GPIO_Init+0x110>)
 80003fa:	f7ff ff41 	bl	8000280 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80003fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000402:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000404:	2300      	movs	r3, #0
 8000406:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000408:	2301      	movs	r3, #1
 800040a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800040e:	2300      	movs	r3, #0
 8000410:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000414:	2302      	movs	r3, #2
 8000416:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800041a:	f107 031c 	add.w	r3, r7, #28
 800041e:	4618      	mov	r0, r3
 8000420:	f003 ff2e 	bl	8004280 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin|EN_A_Pin;
 8000424:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000428:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800042a:	2301      	movs	r3, #1
 800042c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4619      	mov	r1, r3
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f004 f90a 	bl	800465a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800044a:	2302      	movs	r3, #2
 800044c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800045a:	2302      	movs	r3, #2
 800045c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4619      	mov	r1, r3
 8000462:	480d      	ldr	r0, [pc, #52]	; (8000498 <MX_GPIO_Init+0x110>)
 8000464:	f004 f8f9 	bl	800465a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IN2_A_Pin;
 8000468:	2320      	movs	r3, #32
 800046a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800046c:	2301      	movs	r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(IN2_A_GPIO_Port, &GPIO_InitStruct);
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4803      	ldr	r0, [pc, #12]	; (8000490 <MX_GPIO_Init+0x108>)
 8000482:	f004 f8ea 	bl	800465a <LL_GPIO_Init>

}
 8000486:	bf00      	nop
 8000488:	3728      	adds	r7, #40	; 0x28
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	48000400 	.word	0x48000400
 8000494:	00f00003 	.word	0x00f00003
 8000498:	48000800 	.word	0x48000800

0800049c <LL_GPIO_SetOutputPin>:
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	619a      	str	r2, [r3, #24]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <LL_GPIO_ResetOutputPin>:
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b0ca      	sub	sp, #296	; 0x128
 80004d8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fb63 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f863 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f7ff ff51 	bl	8000388 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 fac1 	bl	8000a6c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80004ea:	f000 f98b 	bl	8000804 <MX_TIM16_Init>
  MX_TIM1_Init();
 80004ee:	f000 f92f 	bl	8000750 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  com_Test_SendBuffer( (uint8_t *)buffer, 2000);
 80004f2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80004f6:	4825      	ldr	r0, [pc, #148]	; (800058c <main+0xb8>)
 80004f8:	f7ff fe6c 	bl	80001d4 <com_Test_SendBuffer>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4824      	ldr	r0, [pc, #144]	; (8000590 <main+0xbc>)
 8000500:	f002 fa12 	bl	8002928 <HAL_TIM_PWM_Start>
  LL_GPIO_SetOutputPin(EN_A_GPIO_Port, EN_A_Pin);
 8000504:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f7ff ffc6 	bl	800049c <LL_GPIO_SetOutputPin>

  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, val);
 8000510:	4b20      	ldr	r3, [pc, #128]	; (8000594 <main+0xc0>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	b29a      	uxth	r2, r3
 8000516:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <main+0xbc>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800051c:	213c      	movs	r1, #60	; 0x3c
 800051e:	481e      	ldr	r0, [pc, #120]	; (8000598 <main+0xc4>)
 8000520:	f002 faf4 	bl	8002b0c <HAL_TIM_Encoder_Start>
//	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 2700-1);
//	  HAL_Delay(1000);
//	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, val);
//	   HAL_Delay(1000);

	  old = TIM1->CNT;
 8000524:	4b1d      	ldr	r3, [pc, #116]	; (800059c <main+0xc8>)
 8000526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000528:	b29a      	uxth	r2, r3
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <main+0xcc>)
 800052c:	801a      	strh	r2, [r3, #0]
	  for(i=0;i<100;i++){
 800052e:	2300      	movs	r3, #0
 8000530:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000534:	e01b      	b.n	800056e <main+0x9a>
		  HAL_Delay(10);
 8000536:	200a      	movs	r0, #10
 8000538:	f000 fb9a 	bl	8000c70 <HAL_Delay>
		  new = TIM1->CNT;
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <main+0xc8>)
 800053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000540:	b29a      	uxth	r2, r3
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <main+0xd0>)
 8000544:	801a      	strh	r2, [r3, #0]
		  diff_array[i] = new - old;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <main+0xd0>)
 8000548:	881a      	ldrh	r2, [r3, #0]
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <main+0xcc>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	b299      	uxth	r1, r3
 8000552:	463b      	mov	r3, r7
 8000554:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000558:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  old = new;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <main+0xd0>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0xcc>)
 8000562:	801a      	strh	r2, [r3, #0]
	  for(i=0;i<100;i++){
 8000564:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000568:	3301      	adds	r3, #1
 800056a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800056e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000572:	2b63      	cmp	r3, #99	; 0x63
 8000574:	d9df      	bls.n	8000536 <main+0x62>
	  }

	  LL_GPIO_ResetOutputPin(EN_A_GPIO_Port, EN_A_Pin);
 8000576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f7ff ff9b 	bl	80004b8 <LL_GPIO_ResetOutputPin>
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8000582:	4b03      	ldr	r3, [pc, #12]	; (8000590 <main+0xbc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2200      	movs	r2, #0
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
	  while(1);
 800058a:	e7fe      	b.n	800058a <main+0xb6>
 800058c:	2000002c 	.word	0x2000002c
 8000590:	20000840 	.word	0x20000840
 8000594:	20000000 	.word	0x20000000
 8000598:	20000800 	.word	0x20000800
 800059c:	40012c00 	.word	0x40012c00
 80005a0:	200007fc 	.word	0x200007fc
 80005a4:	200007fe 	.word	0x200007fe

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b0a6      	sub	sp, #152	; 0x98
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005b2:	2228      	movs	r2, #40	; 0x28
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f004 f8ec 	bl	8004794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2258      	movs	r2, #88	; 0x58
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 f8de 	bl	8004794 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fdc4 	bl	8001194 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000612:	f000 f82d 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000626:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000630:	2102      	movs	r1, #2
 8000632:	4618      	mov	r0, r3
 8000634:	f001 fcc4 	bl	8001fc0 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800063e:	f000 f817 	bl	8000670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <SystemClock_Config+0xc4>)
 8000644:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800064a:	2300      	movs	r3, #0
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800064e:	2300      	movs	r3, #0
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fee9 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000660:	f000 f806 	bl	8000670 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3798      	adds	r7, #152	; 0x98
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	00801002 	.word	0x00801002

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x44>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <HAL_MspInit+0x44>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_MspInit+0x44>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_MspInit+0x44>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <HAL_MspInit+0x44>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_MspInit+0x44>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071c:	f000 fa88 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <SystemInit+0x28>)
 800072a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <SystemInit+0x28>)
 8000730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <SystemInit+0x28>)
 800073a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800073e:	609a      	str	r2, [r3, #8]
#endif
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2224      	movs	r2, #36	; 0x24
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f004 f818 	bl	8004794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_TIM1_Init+0xac>)
 8000770:	4a23      	ldr	r2, [pc, #140]	; (8000800 <MX_TIM1_Init+0xb0>)
 8000772:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_TIM1_Init+0xac>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_TIM1_Init+0xac>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_TIM1_Init+0xac>)
 8000782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000786:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_TIM1_Init+0xac>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_TIM1_Init+0xac>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_TIM1_Init+0xac>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800079a:	2303      	movs	r3, #3
 800079c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007a2:	2301      	movs	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007b2:	2301      	movs	r3, #1
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_TIM1_Init+0xac>)
 80007c6:	f002 f90f 	bl	80029e8 <HAL_TIM_Encoder_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80007d0:	f7ff ff4e 	bl	8000670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_TIM1_Init+0xac>)
 80007e6:	f002 feab 	bl	8003540 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80007f0:	f7ff ff3e 	bl	8000670 <Error_Handler>
  }

}
 80007f4:	bf00      	nop
 80007f6:	3730      	adds	r7, #48	; 0x30
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000800 	.word	0x20000800
 8000800:	40012c00 	.word	0x40012c00

08000804 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b092      	sub	sp, #72	; 0x48
 8000808:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	222c      	movs	r2, #44	; 0x2c
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f003 ffb5 	bl	8004794 <memset>

  htim16.Instance = TIM16;
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <MX_TIM16_Init+0xec>)
 800082c:	4a31      	ldr	r2, [pc, #196]	; (80008f4 <MX_TIM16_Init+0xf0>)
 800082e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000830:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <MX_TIM16_Init+0xec>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <MX_TIM16_Init+0xec>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3599;
 800083c:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_TIM16_Init+0xec>)
 800083e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000842:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <MX_TIM16_Init+0xec>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_TIM16_Init+0xec>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <MX_TIM16_Init+0xec>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000856:	4826      	ldr	r0, [pc, #152]	; (80008f0 <MX_TIM16_Init+0xec>)
 8000858:	f002 f806 	bl	8002868 <HAL_TIM_Base_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000862:	f7ff ff05 	bl	8000670 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000866:	4822      	ldr	r0, [pc, #136]	; (80008f0 <MX_TIM16_Init+0xec>)
 8000868:	f002 f829 	bl	80028be <HAL_TIM_PWM_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000872:	f7ff fefd 	bl	8000670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000876:	2360      	movs	r3, #96	; 0x60
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 899;
 800087a:	f240 3383 	movw	r3, #899	; 0x383
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000880:	2300      	movs	r3, #0
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000884:	2300      	movs	r3, #0
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000898:	2200      	movs	r2, #0
 800089a:	4619      	mov	r1, r3
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_TIM16_Init+0xec>)
 800089e:	f002 f96d 	bl	8002b7c <HAL_TIM_PWM_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80008a8:	f7ff fee2 	bl	8000670 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM16_Init+0xec>)
 80008d4:	f002 fec0 	bl	8003658 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80008de:	f7ff fec7 	bl	8000670 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM16_Init+0xec>)
 80008e4:	f000 f88a 	bl	80009fc <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3748      	adds	r7, #72	; 0x48
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000840 	.word	0x20000840
 80008f4:	40014400 	.word	0x40014400

080008f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d145      	bne.n	80009a6 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <HAL_TIM_Encoder_MspInit+0xbc>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a25      	ldr	r2, [pc, #148]	; (80009b4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8000920:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8000938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_TIM_Encoder_MspInit+0xbc>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000962:	2301      	movs	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000972:	2302      	movs	r3, #2
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	480e      	ldr	r0, [pc, #56]	; (80009b8 <HAL_TIM_Encoder_MspInit+0xc0>)
 800097e:	f000 fa7f 	bl	8000e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000994:	2306      	movs	r3, #6
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 fa6d 	bl	8000e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40012c00 	.word	0x40012c00
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000800 	.word	0x48000800

080009bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_TIM_Base_MspInit+0x38>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d10b      	bne.n	80009e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_TIM_Base_MspInit+0x3c>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a09      	ldr	r2, [pc, #36]	; (80009f8 <HAL_TIM_Base_MspInit+0x3c>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <HAL_TIM_Base_MspInit+0x3c>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40014400 	.word	0x40014400
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <HAL_TIM_MspPostInit+0x64>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d11b      	bne.n	8000a56 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_TIM_MspPostInit+0x68>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <HAL_TIM_MspPostInit+0x68>)
 8000a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a28:	6153      	str	r3, [r2, #20]
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_TIM_MspPostInit+0x68>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration    
    PB4     ------> TIM16_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a36:	2310      	movs	r3, #16
 8000a38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_TIM_MspPostInit+0x6c>)
 8000a52:	f000 fa15 	bl	8000e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40014400 	.word	0x40014400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000400 	.word	0x48000400

08000a6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <MX_USART2_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000ab0:	f002 fe58 	bl	8003764 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f7ff fdd9 	bl	8000670 <Error_Handler>
  }

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000880 	.word	0x20000880
 8000ac8:	40004400 	.word	0x40004400

08000acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_UART_MspInit+0x7c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d128      	bne.n	8000b40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f000 f9a0 	bl	8000e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	40021000 	.word	0x40021000

08000b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b56:	e003      	b.n	8000b60 <LoopCopyDataInit>

08000b58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b5e:	3104      	adds	r1, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b68:	d3f6      	bcc.n	8000b58 <CopyDataInit>
	ldr	r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b6c:	e002      	b.n	8000b74 <LoopFillZerobss>

08000b6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b70:	f842 3b04 	str.w	r3, [r2], #4

08000b74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <LoopForever+0x16>)
	cmp	r2, r3
 8000b76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b78:	d3f9      	bcc.n	8000b6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b7a:	f7ff fdd3 	bl	8000724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f003 fde5 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b82:	f7ff fca7 	bl	80004d4 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b88:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b8c:	080047fc 	.word	0x080047fc
	ldr	r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b94:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b9c:	20000904 	.word	0x20000904

08000ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_Init+0x28>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_Init+0x28>)
 8000bae:	f043 0310 	orr.w	r3, r3, #16
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f92f 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f808 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fd5e 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40022000 	.word	0x40022000

08000bd0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x54>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x58>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f939 	bl	8000e66 <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00e      	b.n	8000c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d80a      	bhi.n	8000c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 f90f 	bl	8000e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c10:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <HAL_InitTick+0x5c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000004 	.word	0x20000004
 8000c28:	2000000c 	.word	0x2000000c
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000000c 	.word	0x2000000c
 8000c54:	20000900 	.word	0x20000900

08000c58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000900 	.word	0x20000900

08000c70 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_Delay+0x40>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000000c 	.word	0x2000000c

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df8:	f7ff ff8e 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff47 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff5c 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff8e 	bl	8000d6c <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5d 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffb0 	bl	8000dd4 <SysTick_Config>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	e160      	b.n	8001152 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8152 	beq.w	800114c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x38>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b12      	cmp	r3, #18
 8000eb6:	d123      	bne.n	8000f00 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	6939      	ldr	r1, [r7, #16]
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0203 	and.w	r2, r3, #3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d00b      	beq.n	8000f54 <HAL_GPIO_Init+0xd4>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d007      	beq.n	8000f54 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f48:	2b11      	cmp	r3, #17
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b12      	cmp	r3, #18
 8000f52:	d130      	bne.n	8000fb6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	f003 0201 	and.w	r2, r3, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 80ac 	beq.w	800114c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff4:	4b5e      	ldr	r3, [pc, #376]	; (8001170 <HAL_GPIO_Init+0x2f0>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a5d      	ldr	r2, [pc, #372]	; (8001170 <HAL_GPIO_Init+0x2f0>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b5b      	ldr	r3, [pc, #364]	; (8001170 <HAL_GPIO_Init+0x2f0>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800100c:	4a59      	ldr	r2, [pc, #356]	; (8001174 <HAL_GPIO_Init+0x2f4>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001036:	d025      	beq.n	8001084 <HAL_GPIO_Init+0x204>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a4f      	ldr	r2, [pc, #316]	; (8001178 <HAL_GPIO_Init+0x2f8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d01f      	beq.n	8001080 <HAL_GPIO_Init+0x200>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a4e      	ldr	r2, [pc, #312]	; (800117c <HAL_GPIO_Init+0x2fc>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d019      	beq.n	800107c <HAL_GPIO_Init+0x1fc>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <HAL_GPIO_Init+0x300>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d013      	beq.n	8001078 <HAL_GPIO_Init+0x1f8>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <HAL_GPIO_Init+0x304>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d00d      	beq.n	8001074 <HAL_GPIO_Init+0x1f4>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <HAL_GPIO_Init+0x308>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d007      	beq.n	8001070 <HAL_GPIO_Init+0x1f0>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_GPIO_Init+0x30c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d101      	bne.n	800106c <HAL_GPIO_Init+0x1ec>
 8001068:	2306      	movs	r3, #6
 800106a:	e00c      	b.n	8001086 <HAL_GPIO_Init+0x206>
 800106c:	2307      	movs	r3, #7
 800106e:	e00a      	b.n	8001086 <HAL_GPIO_Init+0x206>
 8001070:	2305      	movs	r3, #5
 8001072:	e008      	b.n	8001086 <HAL_GPIO_Init+0x206>
 8001074:	2304      	movs	r3, #4
 8001076:	e006      	b.n	8001086 <HAL_GPIO_Init+0x206>
 8001078:	2303      	movs	r3, #3
 800107a:	e004      	b.n	8001086 <HAL_GPIO_Init+0x206>
 800107c:	2302      	movs	r3, #2
 800107e:	e002      	b.n	8001086 <HAL_GPIO_Init+0x206>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <HAL_GPIO_Init+0x206>
 8001084:	2300      	movs	r3, #0
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	f002 0203 	and.w	r2, r2, #3
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	4093      	lsls	r3, r2
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001096:	4937      	ldr	r1, [pc, #220]	; (8001174 <HAL_GPIO_Init+0x2f4>)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a4:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <HAL_GPIO_Init+0x310>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010c8:	4a31      	ldr	r2, [pc, #196]	; (8001190 <HAL_GPIO_Init+0x310>)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_GPIO_Init+0x310>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010f2:	4a27      	ldr	r2, [pc, #156]	; (8001190 <HAL_GPIO_Init+0x310>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_GPIO_Init+0x310>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <HAL_GPIO_Init+0x310>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_GPIO_Init+0x310>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <HAL_GPIO_Init+0x310>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	f47f ae97 	bne.w	8000e90 <HAL_GPIO_Init+0x10>
  }
}
 8001162:	bf00      	nop
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000
 8001178:	48000400 	.word	0x48000400
 800117c:	48000800 	.word	0x48000800
 8001180:	48000c00 	.word	0x48000c00
 8001184:	48001000 	.word	0x48001000
 8001188:	48001400 	.word	0x48001400
 800118c:	48001800 	.word	0x48001800
 8001190:	40010400 	.word	0x40010400

08001194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800119a:	af00      	add	r7, sp, #0
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f000 bf01 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8160 	beq.w	800147e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011be:	4bae      	ldr	r3, [pc, #696]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d00c      	beq.n	80011e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ca:	4bab      	ldr	r3, [pc, #684]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d159      	bne.n	800128a <HAL_RCC_OscConfig+0xf6>
 80011d6:	4ba8      	ldr	r3, [pc, #672]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e2:	d152      	bne.n	800128a <HAL_RCC_OscConfig+0xf6>
 80011e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 80011f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d102      	bne.n	8001216 <HAL_RCC_OscConfig+0x82>
 8001210:	4b99      	ldr	r3, [pc, #612]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	e015      	b.n	8001242 <HAL_RCC_OscConfig+0xae>
 8001216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800122a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800122e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001232:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800123e:	4b8e      	ldr	r3, [pc, #568]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001246:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800124a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800124e:	fa92 f2a2 	rbit	r2, r2
 8001252:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001256:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800125a:	fab2 f282 	clz	r2, r2
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f042 0220 	orr.w	r2, r2, #32
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	f002 021f 	and.w	r2, r2, #31
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8102 	beq.w	800147c <HAL_RCC_OscConfig+0x2e8>
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 80fc 	bne.w	800147c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	f000 be93 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x110>
 8001296:	4b78      	ldr	r3, [pc, #480]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a77      	ldr	r2, [pc, #476]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e030      	b.n	8001306 <HAL_RCC_OscConfig+0x172>
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x134>
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a71      	ldr	r2, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b6f      	ldr	r3, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6e      	ldr	r2, [pc, #440]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e01e      	b.n	8001306 <HAL_RCC_OscConfig+0x172>
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x15a>
 80012d4:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a67      	ldr	r2, [pc, #412]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a64      	ldr	r2, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e00b      	b.n	8001306 <HAL_RCC_OscConfig+0x172>
 80012ee:	4b62      	ldr	r3, [pc, #392]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a61      	ldr	r2, [pc, #388]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a5e      	ldr	r2, [pc, #376]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001304:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d059      	beq.n	80013c4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fca2 	bl	8000c58 <HAL_GetTick>
 8001314:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131a:	f7ff fc9d 	bl	8000c58 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d902      	bls.n	8001330 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	f000 be40 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001334:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001344:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b01      	cmp	r3, #1
 800135a:	d102      	bne.n	8001362 <HAL_RCC_OscConfig+0x1ce>
 800135c:	4b46      	ldr	r3, [pc, #280]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	e015      	b.n	800138e <HAL_RCC_OscConfig+0x1fa>
 8001362:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001366:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800137a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800137e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001392:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001396:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800139a:	fa92 f2a2 	rbit	r2, r2
 800139e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80013a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013a6:	fab2 f282 	clz	r2, r2
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	f002 021f 	and.w	r2, r2, #31
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ab      	beq.n	800131a <HAL_RCC_OscConfig+0x186>
 80013c2:	e05c      	b.n	800147e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc48 	bl	8000c58 <HAL_GetTick>
 80013c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ce:	f7ff fc43 	bl	8000c58 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d902      	bls.n	80013e4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	f000 bde6 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 80013e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80013f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b01      	cmp	r3, #1
 800140e:	d102      	bne.n	8001416 <HAL_RCC_OscConfig+0x282>
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	e015      	b.n	8001442 <HAL_RCC_OscConfig+0x2ae>
 8001416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800142a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001432:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001446:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800144a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800144e:	fa92 f2a2 	rbit	r2, r2
 8001452:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001456:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800145a:	fab2 f282 	clz	r2, r2
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	f042 0220 	orr.w	r2, r2, #32
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	f002 021f 	and.w	r2, r2, #31
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f202 	lsl.w	r2, r1, r2
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ab      	bne.n	80013ce <HAL_RCC_OscConfig+0x23a>
 8001476:	e002      	b.n	800147e <HAL_RCC_OscConfig+0x2ea>
 8001478:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8170 	beq.w	800176e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800148e:	4bd0      	ldr	r3, [pc, #832]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800149a:	4bcd      	ldr	r3, [pc, #820]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d16d      	bne.n	8001582 <HAL_RCC_OscConfig+0x3ee>
 80014a6:	4bca      	ldr	r3, [pc, #808]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b2:	d166      	bne.n	8001582 <HAL_RCC_OscConfig+0x3ee>
 80014b4:	2302      	movs	r3, #2
 80014b6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80014c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	095b      	lsrs	r3, r3, #5
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d102      	bne.n	80014e4 <HAL_RCC_OscConfig+0x350>
 80014de:	4bbc      	ldr	r3, [pc, #752]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	e013      	b.n	800150c <HAL_RCC_OscConfig+0x378>
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014f6:	2302      	movs	r3, #2
 80014f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001508:	4bb1      	ldr	r3, [pc, #708]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	2202      	movs	r2, #2
 800150e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001512:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001516:	fa92 f2a2 	rbit	r2, r2
 800151a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800151e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001522:	fab2 f282 	clz	r2, r2
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	f042 0220 	orr.w	r2, r2, #32
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	f002 021f 	and.w	r2, r2, #31
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <HAL_RCC_OscConfig+0x3ba>
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d002      	beq.n	800154e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	f000 bd31 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4ba0      	ldr	r3, [pc, #640]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	21f8      	movs	r1, #248	; 0xf8
 800155e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001566:	fa91 f1a1 	rbit	r1, r1
 800156a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800156e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001572:	fab1 f181 	clz	r1, r1
 8001576:	b2c9      	uxtb	r1, r1
 8001578:	408b      	lsls	r3, r1
 800157a:	4995      	ldr	r1, [pc, #596]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001580:	e0f5      	b.n	800176e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8085 	beq.w	8001698 <HAL_RCC_OscConfig+0x504>
 800158e:	2301      	movs	r3, #1
 8001590:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80015a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	461a      	mov	r2, r3
 80015b6:	2301      	movs	r3, #1
 80015b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb4d 	bl	8000c58 <HAL_GetTick>
 80015be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fb48 	bl	8000c58 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d902      	bls.n	80015da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f000 bceb 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80015e4:	fa93 f3a3 	rbit	r3, r3
 80015e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80015ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	fab3 f383 	clz	r3, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d102      	bne.n	800160a <HAL_RCC_OscConfig+0x476>
 8001604:	4b72      	ldr	r3, [pc, #456]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	e013      	b.n	8001632 <HAL_RCC_OscConfig+0x49e>
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001622:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001626:	fa93 f3a3 	rbit	r3, r3
 800162a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800162e:	4b68      	ldr	r3, [pc, #416]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	2202      	movs	r2, #2
 8001634:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001638:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800163c:	fa92 f2a2 	rbit	r2, r2
 8001640:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001644:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001648:	fab2 f282 	clz	r2, r2
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	f042 0220 	orr.w	r2, r2, #32
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	f002 021f 	and.w	r2, r2, #31
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0af      	beq.n	80015c4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	21f8      	movs	r1, #248	; 0xf8
 8001674:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800167c:	fa91 f1a1 	rbit	r1, r1
 8001680:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001684:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001688:	fab1 f181 	clz	r1, r1
 800168c:	b2c9      	uxtb	r1, r1
 800168e:	408b      	lsls	r3, r1
 8001690:	494f      	ldr	r1, [pc, #316]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
 8001696:	e06a      	b.n	800176e <HAL_RCC_OscConfig+0x5da>
 8001698:	2301      	movs	r3, #1
 800169a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80016aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	461a      	mov	r2, r3
 80016c0:	2300      	movs	r3, #0
 80016c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fac8 	bl	8000c58 <HAL_GetTick>
 80016c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fac3 	bl	8000c58 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d902      	bls.n	80016e4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	f000 bc66 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 80016e4:	2302      	movs	r3, #2
 80016e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80016f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d102      	bne.n	8001714 <HAL_RCC_OscConfig+0x580>
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	e013      	b.n	800173c <HAL_RCC_OscConfig+0x5a8>
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800172c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2202      	movs	r2, #2
 800173e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001742:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001746:	fa92 f2a2 	rbit	r2, r2
 800174a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800174e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001752:	fab2 f282 	clz	r2, r2
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	f042 0220 	orr.w	r2, r2, #32
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f002 021f 	and.w	r2, r2, #31
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1af      	bne.n	80016ce <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80da 	beq.w	8001932 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d069      	beq.n	800185c <HAL_RCC_OscConfig+0x6c8>
 8001788:	2301      	movs	r3, #1
 800178a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800179a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x640>)
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	461a      	mov	r2, r3
 80017ae:	2301      	movs	r3, #1
 80017b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fa51 	bl	8000c58 <HAL_GetTick>
 80017b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	e00d      	b.n	80017d8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fa4c 	bl	8000c58 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d905      	bls.n	80017d8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e3ef      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 80017d0:	40021000 	.word	0x40021000
 80017d4:	10908120 	.word	0x10908120
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017e2:	fa93 f2a3 	rbit	r2, r3
 80017e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80017f0:	2202      	movs	r2, #2
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f2a3 	rbit	r2, r3
 80017fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001808:	2202      	movs	r2, #2
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800181a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181c:	4ba4      	ldr	r3, [pc, #656]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 800181e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001820:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001824:	2102      	movs	r1, #2
 8001826:	6019      	str	r1, [r3, #0]
 8001828:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f1a3 	rbit	r1, r3
 8001832:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001836:	6019      	str	r1, [r3, #0]
  return result;
 8001838:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001848:	b2db      	uxtb	r3, r3
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0b0      	beq.n	80017bc <HAL_RCC_OscConfig+0x628>
 800185a:	e06a      	b.n	8001932 <HAL_RCC_OscConfig+0x79e>
 800185c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	fa93 f2a3 	rbit	r2, r3
 800186e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001872:	601a      	str	r2, [r3, #0]
  return result;
 8001874:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001878:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	4b8c      	ldr	r3, [pc, #560]	; (8001ab4 <HAL_RCC_OscConfig+0x920>)
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	461a      	mov	r2, r3
 800188a:	2300      	movs	r3, #0
 800188c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff f9e3 	bl	8000c58 <HAL_GetTick>
 8001892:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001896:	e009      	b.n	80018ac <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff f9de 	bl	8000c58 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e381      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 80018ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018b0:	2202      	movs	r2, #2
 80018b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fa93 f2a3 	rbit	r2, r3
 80018be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018c8:	2202      	movs	r2, #2
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	fa93 f2a3 	rbit	r2, r3
 80018d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018e0:	2202      	movs	r2, #2
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	fa93 f2a3 	rbit	r2, r3
 80018ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80018f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018fc:	2102      	movs	r1, #2
 80018fe:	6019      	str	r1, [r3, #0]
 8001900:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	fa93 f1a3 	rbit	r1, r3
 800190a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800190e:	6019      	str	r1, [r3, #0]
  return result;
 8001910:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1b2      	bne.n	8001898 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8157 	beq.w	8001bf0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d112      	bne.n	800197a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001954:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	4a55      	ldr	r2, [pc, #340]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 800195a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195e:	61d3      	str	r3, [r2, #28]
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <HAL_RCC_OscConfig+0x924>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11a      	bne.n	80019bc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <HAL_RCC_OscConfig+0x924>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a4b      	ldr	r2, [pc, #300]	; (8001ab8 <HAL_RCC_OscConfig+0x924>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001992:	f7ff f961 	bl	8000c58 <HAL_GetTick>
 8001996:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	e009      	b.n	80019b0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199c:	f7ff f95c 	bl	8000c58 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	; 0x64
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e2ff      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_OscConfig+0x924>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ef      	beq.n	800199c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x840>
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a39      	ldr	r2, [pc, #228]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	e02f      	b.n	8001a34 <HAL_RCC_OscConfig+0x8a0>
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x864>
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a33      	ldr	r2, [pc, #204]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0x8a0>
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x888>
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0x8a0>
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a2e:	f023 0304 	bic.w	r3, r3, #4
 8001a32:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d06a      	beq.n	8001b14 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f90b 	bl	8000c58 <HAL_GetTick>
 8001a42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7ff f906 	bl	8000c58 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e2a7      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001a60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	fa93 f2a3 	rbit	r2, r3
 8001a72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a8e:	601a      	str	r2, [r3, #0]
  return result;
 8001a90:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_OscConfig+0x928>
 8001aaa:	4b01      	ldr	r3, [pc, #4]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	e013      	b.n	8001ad8 <HAL_RCC_OscConfig+0x944>
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	10908120 	.word	0x10908120
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	4bc0      	ldr	r3, [pc, #768]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001adc:	2102      	movs	r1, #2
 8001ade:	6011      	str	r1, [r2, #0]
 8001ae0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	fa92 f1a2 	rbit	r1, r2
 8001aea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001aee:	6011      	str	r1, [r2, #0]
  return result;
 8001af0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	fab2 f282 	clz	r2, r2
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f002 021f 	and.w	r2, r2, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d09a      	beq.n	8001a48 <HAL_RCC_OscConfig+0x8b4>
 8001b12:	e063      	b.n	8001bdc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7ff f8a0 	bl	8000c58 <HAL_GetTick>
 8001b18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1c:	e00b      	b.n	8001b36 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff f89b 	bl	8000c58 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e23c      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001b36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b52:	2202      	movs	r2, #2
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b64:	601a      	str	r2, [r3, #0]
  return result;
 8001b66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0x9f2>
 8001b80:	4b95      	ldr	r3, [pc, #596]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	e00d      	b.n	8001ba2 <HAL_RCC_OscConfig+0xa0e>
 8001b86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	4b8e      	ldr	r3, [pc, #568]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	6011      	str	r1, [r2, #0]
 8001baa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	fa92 f1a2 	rbit	r1, r2
 8001bb4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bb8:	6011      	str	r1, [r2, #0]
  return result;
 8001bba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	fab2 f282 	clz	r2, r2
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f002 021f 	and.w	r2, r2, #31
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1a0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bdc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be4:	4b7c      	ldr	r3, [pc, #496]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	4a7b      	ldr	r2, [pc, #492]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 81d9 	beq.w	8001fae <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfc:	4b76      	ldr	r3, [pc, #472]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	f000 81a6 	beq.w	8001f56 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	f040 811e 	bne.w	8001e52 <HAL_RCC_OscConfig+0xcbe>
 8001c16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c2e:	601a      	str	r2, [r3, #0]
  return result;
 8001c30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	461a      	mov	r2, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f804 	bl	8000c58 <HAL_GetTick>
 8001c50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c54:	e009      	b.n	8001c6a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7fe ffff 	bl	8000c58 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1a2      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001c6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c82:	601a      	str	r2, [r3, #0]
  return result;
 8001c84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xb10>
 8001c9e:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	e01b      	b.n	8001cdc <HAL_RCC_OscConfig+0xb48>
 8001ca4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ce0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ce4:	6011      	str	r1, [r2, #0]
 8001ce6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	fa92 f1a2 	rbit	r1, r2
 8001cf0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cf4:	6011      	str	r1, [r2, #0]
  return result;
 8001cf6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d19e      	bne.n	8001c56 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	f023 020f 	bic.w	r2, r3, #15
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	492c      	ldr	r1, [pc, #176]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a19      	ldr	r1, [r3, #32]
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	4925      	ldr	r1, [pc, #148]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
 8001d48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d60:	601a      	str	r2, [r3, #0]
  return result;
 8001d62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d66:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe ff6b 	bl	8000c58 <HAL_GetTick>
 8001d82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d86:	e009      	b.n	8001d9c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe ff66 	bl	8000c58 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e109      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001d9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001db4:	601a      	str	r2, [r3, #0]
  return result;
 8001db6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_RCC_OscConfig+0xc48>
 8001dd0:	4b01      	ldr	r3, [pc, #4]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	e01e      	b.n	8001e14 <HAL_RCC_OscConfig+0xc80>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fa93 f2a3 	rbit	r2, r3
 8001df0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f2a3 	rbit	r2, r3
 8001e0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0xe28>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e1c:	6011      	str	r1, [r2, #0]
 8001e1e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	fa92 f1a2 	rbit	r1, r2
 8001e28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e2c:	6011      	str	r1, [r2, #0]
  return result;
 8001e2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	fab2 f282 	clz	r2, r2
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f002 021f 	and.w	r2, r2, #31
 8001e44:	2101      	movs	r1, #1
 8001e46:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d09b      	beq.n	8001d88 <HAL_RCC_OscConfig+0xbf4>
 8001e50:	e0ad      	b.n	8001fae <HAL_RCC_OscConfig+0xe1a>
 8001e52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e6a:	601a      	str	r2, [r3, #0]
  return result;
 8001e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	461a      	mov	r2, r3
 8001e84:	2300      	movs	r3, #0
 8001e86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7fe fee6 	bl	8000c58 <HAL_GetTick>
 8001e8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	e009      	b.n	8001ea6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e92:	f7fe fee1 	bl	8000c58 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e084      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ebe:	601a      	str	r2, [r3, #0]
  return result;
 8001ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xd4c>
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_RCC_OscConfig+0xe28>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	e01b      	b.n	8001f18 <HAL_RCC_OscConfig+0xd84>
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f107 0320 	add.w	r3, r7, #32
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_OscConfig+0xe28>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	f107 0214 	add.w	r2, r7, #20
 8001f1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f20:	6011      	str	r1, [r2, #0]
 8001f22:	f107 0214 	add.w	r2, r7, #20
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	fa92 f1a2 	rbit	r1, r2
 8001f2c:	f107 0210 	add.w	r2, r7, #16
 8001f30:	6011      	str	r1, [r2, #0]
  return result;
 8001f32:	f107 0210 	add.w	r2, r7, #16
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d19e      	bne.n	8001e92 <HAL_RCC_OscConfig+0xcfe>
 8001f54:	e02b      	b.n	8001fae <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e025      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_RCC_OscConfig+0xe28>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCC_OscConfig+0xe28>)
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f78:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d111      	bne.n	8001faa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d108      	bne.n	8001faa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b09e      	sub	sp, #120	; 0x78
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e162      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	498b      	ldr	r1, [pc, #556]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b89      	ldr	r3, [pc, #548]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e14a      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b82      	ldr	r3, [pc, #520]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	497f      	ldr	r1, [pc, #508]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80dc 	beq.w	80021ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d13c      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xf6>
 800203c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002040:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d102      	bne.n	8002066 <HAL_RCC_ClockConfig+0xa6>
 8002060:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	e00f      	b.n	8002086 <HAL_RCC_ClockConfig+0xc6>
 8002066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	667b      	str	r3, [r7, #100]	; 0x64
 8002074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
 800207a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800208a:	65ba      	str	r2, [r7, #88]	; 0x58
 800208c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800208e:	fa92 f2a2 	rbit	r2, r2
 8002092:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d17b      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0f3      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d13c      	bne.n	8002138 <HAL_RCC_ClockConfig+0x178>
 80020be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x128>
 80020e2:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_ClockConfig+0x148>
 80020e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	647b      	str	r3, [r7, #68]	; 0x44
 80020f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
 80020fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002104:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210c:	63ba      	str	r2, [r7, #56]	; 0x38
 800210e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f042 0220 	orr.w	r2, r2, #32
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f002 021f 	and.w	r2, r2, #31
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d13a      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0b2      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
 8002138:	2302      	movs	r3, #2
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d102      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	e00d      	b.n	800217c <HAL_RCC_ClockConfig+0x1bc>
 8002160:	2302      	movs	r3, #2
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	2302      	movs	r3, #2
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2202      	movs	r2, #2
 800217e:	61ba      	str	r2, [r7, #24]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	fa92 f2a2 	rbit	r2, r2
 8002186:	617a      	str	r2, [r7, #20]
  return result;
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	fab2 f282 	clz	r2, r2
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	f042 0220 	orr.w	r2, r2, #32
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f002 021f 	and.w	r2, r2, #31
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e079      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021bc:	f7fe fd4c 	bl	8000c58 <HAL_GetTick>
 80021c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe fd48 	bl	8000c58 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e061      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d214      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 0207 	bic.w	r2, r3, #7
 8002202:	4906      	ldr	r1, [pc, #24]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e040      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	491a      	ldr	r1, [pc, #104]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4912      	ldr	r1, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002262:	f000 f829 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002266:	4601      	mov	r1, r0
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002270:	22f0      	movs	r2, #240	; 0xf0
 8002272:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	fa92 f2a2 	rbit	r2, r2
 800227a:	60fa      	str	r2, [r7, #12]
  return result;
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	40d3      	lsrs	r3, r2
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x2ec>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	fa21 f303 	lsr.w	r3, r1, r3
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fc9a 	bl	8000bd0 <HAL_InitTick>
  
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3778      	adds	r7, #120	; 0x78
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080047bc 	.word	0x080047bc
 80022b0:	20000004 	.word	0x20000004
 80022b4:	20000008 	.word	0x20000008

080022b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b08b      	sub	sp, #44	; 0x2c
 80022bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x36>
 80022e6:	e03f      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ea:	623b      	str	r3, [r7, #32]
      break;
 80022ec:	e03f      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	fa92 f2a2 	rbit	r2, r2
 8002300:	607a      	str	r2, [r7, #4]
  return result;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	40d3      	lsrs	r3, r2
 800230c:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_RCC_GetSysClockFreq+0xcc>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	220f      	movs	r2, #15
 800231c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	60fa      	str	r2, [r7, #12]
  return result;
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	fab2 f282 	clz	r2, r2
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	40d3      	lsrs	r3, r2
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002340:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	fbb2 f2f3 	udiv	r2, r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	e007      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fbb2 f2f3 	udiv	r2, r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	623b      	str	r3, [r7, #32]
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 800236a:	623b      	str	r3, [r7, #32]
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	6a3b      	ldr	r3, [r7, #32]
}
 8002370:	4618      	mov	r0, r3
 8002372:	372c      	adds	r7, #44	; 0x2c
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40021000 	.word	0x40021000
 8002380:	007a1200 	.word	0x007a1200
 8002384:	080047d4 	.word	0x080047d4
 8002388:	080047e4 	.word	0x080047e4

0800238c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023aa:	f7ff ffef 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023ae:	4601      	mov	r1, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	603a      	str	r2, [r7, #0]
  return result;
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	40d3      	lsrs	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	080047cc 	.word	0x080047cc

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023ee:	f7ff ffcd 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023f2:	4601      	mov	r1, r0
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002400:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	603a      	str	r2, [r7, #0]
  return result;
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	080047cc 	.word	0x080047cc

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b092      	sub	sp, #72	; 0x48
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80d7 	beq.w	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002450:	4b4e      	ldr	r3, [pc, #312]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10e      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245c:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a4a      	ldr	r2, [pc, #296]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002466:	61d3      	str	r3, [r2, #28]
 8002468:	4b48      	ldr	r3, [pc, #288]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b45      	ldr	r3, [pc, #276]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b42      	ldr	r3, [pc, #264]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a41      	ldr	r2, [pc, #260]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe fbe1 	bl	8000c58 <HAL_GetTick>
 8002496:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe fbdd 	bl	8000c58 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1d6      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024b8:	4b34      	ldr	r3, [pc, #208]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8084 	beq.w	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d07c      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024d8:	4b2c      	ldr	r3, [pc, #176]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	461a      	mov	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	461a      	mov	r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800252a:	4a18      	ldr	r2, [pc, #96]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d04b      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7fe fb8d 	bl	8000c58 <HAL_GetTick>
 800253e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fb89 	bl	8000c58 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e180      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002558:	2302      	movs	r3, #2
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	61fb      	str	r3, [r7, #28]
  return result;
 8002570:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d108      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002586:	4b01      	ldr	r3, [pc, #4]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	e00d      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
 8002594:	10908100 	.word	0x10908100
 8002598:	2302      	movs	r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	4ba0      	ldr	r3, [pc, #640]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2202      	movs	r2, #2
 80025aa:	613a      	str	r2, [r7, #16]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	fa92 f2a2 	rbit	r2, r2
 80025b2:	60fa      	str	r2, [r7, #12]
  return result;
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	fab2 f282 	clz	r2, r2
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f002 021f 	and.w	r2, r2, #31
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0b7      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025d2:	4b95      	ldr	r3, [pc, #596]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4992      	ldr	r1, [pc, #584]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b8e      	ldr	r3, [pc, #568]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4a8d      	ldr	r2, [pc, #564]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002604:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f023 0203 	bic.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4985      	ldr	r1, [pc, #532]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002622:	4b81      	ldr	r3, [pc, #516]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	497e      	ldr	r1, [pc, #504]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002630:	4313      	orrs	r3, r2
 8002632:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002640:	4b79      	ldr	r3, [pc, #484]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	4976      	ldr	r1, [pc, #472]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800265e:	4b72      	ldr	r3, [pc, #456]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f023 0210 	bic.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	496f      	ldr	r1, [pc, #444]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	4967      	ldr	r1, [pc, #412]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800269a:	4b63      	ldr	r3, [pc, #396]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f023 0220 	bic.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4960      	ldr	r1, [pc, #384]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b8:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	4958      	ldr	r1, [pc, #352]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d6:	4b54      	ldr	r3, [pc, #336]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	4951      	ldr	r1, [pc, #324]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f4:	4b4c      	ldr	r3, [pc, #304]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4949      	ldr	r1, [pc, #292]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002712:	4b45      	ldr	r3, [pc, #276]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4942      	ldr	r1, [pc, #264]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002730:	4b3d      	ldr	r3, [pc, #244]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	493a      	ldr	r1, [pc, #232]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800274e:	4b36      	ldr	r3, [pc, #216]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	4933      	ldr	r1, [pc, #204]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800276c:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	492b      	ldr	r1, [pc, #172]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800278a:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4924      	ldr	r1, [pc, #144]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027a8:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	491c      	ldr	r1, [pc, #112]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	4915      	ldr	r1, [pc, #84]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	490d      	ldr	r1, [pc, #52]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	4906      	ldr	r1, [pc, #24]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002810:	4313      	orrs	r3, r2
 8002812:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002820:	4b01      	ldr	r3, [pc, #4]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	e002      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
 800282c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	490b      	ldr	r1, [pc, #44]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002836:	4313      	orrs	r3, r2
 8002838:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	4904      	ldr	r1, [pc, #16]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002854:	4313      	orrs	r3, r2
 8002856:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3748      	adds	r7, #72	; 0x48
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e01d      	b.n	80028b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe f894 	bl	80009bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 fa80 	bl	8002dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e01d      	b.n	800290c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f815 	bl	8002914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f000 fa55 	bl	8002dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2201      	movs	r2, #1
 8002938:	6839      	ldr	r1, [r7, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fdda 	bl	80034f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a21      	ldr	r2, [pc, #132]	; (80029cc <HAL_TIM_PWM_Start+0xa4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d018      	beq.n	800297c <HAL_TIM_PWM_Start+0x54>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a20      	ldr	r2, [pc, #128]	; (80029d0 <HAL_TIM_PWM_Start+0xa8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_TIM_PWM_Start+0x54>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1e      	ldr	r2, [pc, #120]	; (80029d4 <HAL_TIM_PWM_Start+0xac>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <HAL_TIM_PWM_Start+0x54>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <HAL_TIM_PWM_Start+0xb0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_TIM_PWM_Start+0x54>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_TIM_PWM_Start+0xb4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_TIM_PWM_Start+0x54>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_TIM_PWM_Start+0xb8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_TIM_PWM_Start+0x58>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_TIM_PWM_Start+0x5a>
 8002980:	2300      	movs	r3, #0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_TIM_PWM_Start+0xbc>)
 800299e:	4013      	ands	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b06      	cmp	r3, #6
 80029a6:	d00b      	beq.n	80029c0 <HAL_TIM_PWM_Start+0x98>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ae:	d007      	beq.n	80029c0 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40013400 	.word	0x40013400
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	40015000 	.word	0x40015000
 80029e4:	00010007 	.word	0x00010007

080029e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e083      	b.n	8002b04 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fd ff71 	bl	80008f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002a2c:	f023 0307 	bic.w	r3, r3, #7
 8002a30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f000 f9b5 	bl	8002dac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	f023 0303 	bic.w	r3, r3, #3
 8002a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a88:	f023 030c 	bic.w	r3, r3, #12
 8002a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	011a      	lsls	r2, r3, #4
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	031b      	lsls	r3, r3, #12
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002ace:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	4313      	orrs	r3, r2
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_TIM_Encoder_Start+0x16>
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d008      	beq.n	8002b32 <HAL_TIM_Encoder_Start+0x26>
 8002b20:	e00f      	b.n	8002b42 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fce2 	bl	80034f4 <TIM_CCxChannelCmd>
      break;
 8002b30:	e016      	b.n	8002b60 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2201      	movs	r2, #1
 8002b38:	2104      	movs	r1, #4
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fcda 	bl	80034f4 <TIM_CCxChannelCmd>
      break;
 8002b40:	e00e      	b.n	8002b60 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2201      	movs	r2, #1
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fcd2 	bl	80034f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	2104      	movs	r1, #4
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fccb 	bl	80034f4 <TIM_CCxChannelCmd>
      break;
 8002b5e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e105      	b.n	8002da2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b14      	cmp	r3, #20
 8002baa:	f200 80f0 	bhi.w	8002d8e <HAL_TIM_PWM_ConfigChannel+0x212>
 8002bae:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb4:	08002c09 	.word	0x08002c09
 8002bb8:	08002d8f 	.word	0x08002d8f
 8002bbc:	08002d8f 	.word	0x08002d8f
 8002bc0:	08002d8f 	.word	0x08002d8f
 8002bc4:	08002c49 	.word	0x08002c49
 8002bc8:	08002d8f 	.word	0x08002d8f
 8002bcc:	08002d8f 	.word	0x08002d8f
 8002bd0:	08002d8f 	.word	0x08002d8f
 8002bd4:	08002c8b 	.word	0x08002c8b
 8002bd8:	08002d8f 	.word	0x08002d8f
 8002bdc:	08002d8f 	.word	0x08002d8f
 8002be0:	08002d8f 	.word	0x08002d8f
 8002be4:	08002ccb 	.word	0x08002ccb
 8002be8:	08002d8f 	.word	0x08002d8f
 8002bec:	08002d8f 	.word	0x08002d8f
 8002bf0:	08002d8f 	.word	0x08002d8f
 8002bf4:	08002d0d 	.word	0x08002d0d
 8002bf8:	08002d8f 	.word	0x08002d8f
 8002bfc:	08002d8f 	.word	0x08002d8f
 8002c00:	08002d8f 	.word	0x08002d8f
 8002c04:	08002d4d 	.word	0x08002d4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f96a 	bl	8002ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0208 	orr.w	r2, r2, #8
 8002c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6999      	ldr	r1, [r3, #24]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	619a      	str	r2, [r3, #24]
      break;
 8002c46:	e0a3      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f9e4 	bl	800301c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6999      	ldr	r1, [r3, #24]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	021a      	lsls	r2, r3, #8
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	619a      	str	r2, [r3, #24]
      break;
 8002c88:	e082      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fa57 	bl	8003144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0208 	orr.w	r2, r2, #8
 8002ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0204 	bic.w	r2, r2, #4
 8002cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69d9      	ldr	r1, [r3, #28]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	61da      	str	r2, [r3, #28]
      break;
 8002cc8:	e062      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fac9 	bl	8003268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69d9      	ldr	r1, [r3, #28]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	021a      	lsls	r2, r3, #8
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	61da      	str	r2, [r3, #28]
      break;
 8002d0a:	e041      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fb18 	bl	8003348 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0208 	orr.w	r2, r2, #8
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0204 	bic.w	r2, r2, #4
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d4a:	e021      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fb62 	bl	800341c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	021a      	lsls	r2, r3, #8
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d8c:	e000      	b.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002d8e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop

08002dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a42      	ldr	r2, [pc, #264]	; (8002ec8 <TIM_Base_SetConfig+0x11c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <TIM_Base_SetConfig+0x40>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dca:	d00f      	beq.n	8002dec <TIM_Base_SetConfig+0x40>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a3f      	ldr	r2, [pc, #252]	; (8002ecc <TIM_Base_SetConfig+0x120>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00b      	beq.n	8002dec <TIM_Base_SetConfig+0x40>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a3e      	ldr	r2, [pc, #248]	; (8002ed0 <TIM_Base_SetConfig+0x124>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a3d      	ldr	r2, [pc, #244]	; (8002ed4 <TIM_Base_SetConfig+0x128>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d003      	beq.n	8002dec <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a3c      	ldr	r2, [pc, #240]	; (8002ed8 <TIM_Base_SetConfig+0x12c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d108      	bne.n	8002dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <TIM_Base_SetConfig+0x11c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01f      	beq.n	8002e46 <TIM_Base_SetConfig+0x9a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0c:	d01b      	beq.n	8002e46 <TIM_Base_SetConfig+0x9a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a2e      	ldr	r2, [pc, #184]	; (8002ecc <TIM_Base_SetConfig+0x120>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d017      	beq.n	8002e46 <TIM_Base_SetConfig+0x9a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a2d      	ldr	r2, [pc, #180]	; (8002ed0 <TIM_Base_SetConfig+0x124>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <TIM_Base_SetConfig+0x9a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2c      	ldr	r2, [pc, #176]	; (8002ed4 <TIM_Base_SetConfig+0x128>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00f      	beq.n	8002e46 <TIM_Base_SetConfig+0x9a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <TIM_Base_SetConfig+0x130>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00b      	beq.n	8002e46 <TIM_Base_SetConfig+0x9a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <TIM_Base_SetConfig+0x134>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d007      	beq.n	8002e46 <TIM_Base_SetConfig+0x9a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <TIM_Base_SetConfig+0x138>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d003      	beq.n	8002e46 <TIM_Base_SetConfig+0x9a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <TIM_Base_SetConfig+0x12c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d108      	bne.n	8002e58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <TIM_Base_SetConfig+0x11c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <TIM_Base_SetConfig+0x100>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <TIM_Base_SetConfig+0x128>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00f      	beq.n	8002eac <TIM_Base_SetConfig+0x100>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a13      	ldr	r2, [pc, #76]	; (8002edc <TIM_Base_SetConfig+0x130>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00b      	beq.n	8002eac <TIM_Base_SetConfig+0x100>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <TIM_Base_SetConfig+0x134>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d007      	beq.n	8002eac <TIM_Base_SetConfig+0x100>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <TIM_Base_SetConfig+0x138>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <TIM_Base_SetConfig+0x100>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <TIM_Base_SetConfig+0x12c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d103      	bne.n	8002eb4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	615a      	str	r2, [r3, #20]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40013400 	.word	0x40013400
 8002ed8:	40015000 	.word	0x40015000
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800

08002ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f023 0201 	bic.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 0302 	bic.w	r3, r3, #2
 8002f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a30      	ldr	r2, [pc, #192]	; (8003004 <TIM_OC1_SetConfig+0x11c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <TIM_OC1_SetConfig+0x88>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <TIM_OC1_SetConfig+0x120>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00f      	beq.n	8002f70 <TIM_OC1_SetConfig+0x88>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a2e      	ldr	r2, [pc, #184]	; (800300c <TIM_OC1_SetConfig+0x124>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00b      	beq.n	8002f70 <TIM_OC1_SetConfig+0x88>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <TIM_OC1_SetConfig+0x128>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d007      	beq.n	8002f70 <TIM_OC1_SetConfig+0x88>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a2c      	ldr	r2, [pc, #176]	; (8003014 <TIM_OC1_SetConfig+0x12c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_OC1_SetConfig+0x88>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a2b      	ldr	r2, [pc, #172]	; (8003018 <TIM_OC1_SetConfig+0x130>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10c      	bne.n	8002f8a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0308 	bic.w	r3, r3, #8
 8002f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <TIM_OC1_SetConfig+0x11c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <TIM_OC1_SetConfig+0xd2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <TIM_OC1_SetConfig+0x120>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00f      	beq.n	8002fba <TIM_OC1_SetConfig+0xd2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1b      	ldr	r2, [pc, #108]	; (800300c <TIM_OC1_SetConfig+0x124>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00b      	beq.n	8002fba <TIM_OC1_SetConfig+0xd2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <TIM_OC1_SetConfig+0x128>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_OC1_SetConfig+0xd2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a19      	ldr	r2, [pc, #100]	; (8003014 <TIM_OC1_SetConfig+0x12c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_OC1_SetConfig+0xd2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a18      	ldr	r2, [pc, #96]	; (8003018 <TIM_OC1_SetConfig+0x130>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d111      	bne.n	8002fde <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	621a      	str	r2, [r3, #32]
}
 8002ff8:	bf00      	nop
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40013400 	.word	0x40013400
 800300c:	40014000 	.word	0x40014000
 8003010:	40014400 	.word	0x40014400
 8003014:	40014800 	.word	0x40014800
 8003018:	40015000 	.word	0x40015000

0800301c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0210 	bic.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0320 	bic.w	r3, r3, #32
 800306a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a2c      	ldr	r2, [pc, #176]	; (800312c <TIM_OC2_SetConfig+0x110>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d007      	beq.n	8003090 <TIM_OC2_SetConfig+0x74>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <TIM_OC2_SetConfig+0x114>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <TIM_OC2_SetConfig+0x74>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <TIM_OC2_SetConfig+0x118>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10d      	bne.n	80030ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a1f      	ldr	r2, [pc, #124]	; (800312c <TIM_OC2_SetConfig+0x110>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d013      	beq.n	80030dc <TIM_OC2_SetConfig+0xc0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <TIM_OC2_SetConfig+0x114>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00f      	beq.n	80030dc <TIM_OC2_SetConfig+0xc0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <TIM_OC2_SetConfig+0x11c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00b      	beq.n	80030dc <TIM_OC2_SetConfig+0xc0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a1d      	ldr	r2, [pc, #116]	; (800313c <TIM_OC2_SetConfig+0x120>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d007      	beq.n	80030dc <TIM_OC2_SetConfig+0xc0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <TIM_OC2_SetConfig+0x124>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <TIM_OC2_SetConfig+0xc0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a17      	ldr	r2, [pc, #92]	; (8003134 <TIM_OC2_SetConfig+0x118>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d113      	bne.n	8003104 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030e2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030ea:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	621a      	str	r2, [r3, #32]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40012c00 	.word	0x40012c00
 8003130:	40013400 	.word	0x40013400
 8003134:	40015000 	.word	0x40015000
 8003138:	40014000 	.word	0x40014000
 800313c:	40014400 	.word	0x40014400
 8003140:	40014800 	.word	0x40014800

08003144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <TIM_OC3_SetConfig+0x10c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <TIM_OC3_SetConfig+0x72>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2a      	ldr	r2, [pc, #168]	; (8003254 <TIM_OC3_SetConfig+0x110>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_OC3_SetConfig+0x72>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a29      	ldr	r2, [pc, #164]	; (8003258 <TIM_OC3_SetConfig+0x114>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d10d      	bne.n	80031d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <TIM_OC3_SetConfig+0x10c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <TIM_OC3_SetConfig+0xbe>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <TIM_OC3_SetConfig+0x110>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00f      	beq.n	8003202 <TIM_OC3_SetConfig+0xbe>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <TIM_OC3_SetConfig+0x118>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00b      	beq.n	8003202 <TIM_OC3_SetConfig+0xbe>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <TIM_OC3_SetConfig+0x11c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <TIM_OC3_SetConfig+0xbe>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <TIM_OC3_SetConfig+0x120>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <TIM_OC3_SetConfig+0xbe>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <TIM_OC3_SetConfig+0x114>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d113      	bne.n	800322a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40013400 	.word	0x40013400
 8003258:	40015000 	.word	0x40015000
 800325c:	40014000 	.word	0x40014000
 8003260:	40014400 	.word	0x40014400
 8003264:	40014800 	.word	0x40014800

08003268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	031b      	lsls	r3, r3, #12
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <TIM_OC4_SetConfig+0xc8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <TIM_OC4_SetConfig+0x8c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a19      	ldr	r2, [pc, #100]	; (8003334 <TIM_OC4_SetConfig+0xcc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00f      	beq.n	80032f4 <TIM_OC4_SetConfig+0x8c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <TIM_OC4_SetConfig+0xd0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00b      	beq.n	80032f4 <TIM_OC4_SetConfig+0x8c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a17      	ldr	r2, [pc, #92]	; (800333c <TIM_OC4_SetConfig+0xd4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <TIM_OC4_SetConfig+0x8c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a16      	ldr	r2, [pc, #88]	; (8003340 <TIM_OC4_SetConfig+0xd8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_OC4_SetConfig+0x8c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a15      	ldr	r2, [pc, #84]	; (8003344 <TIM_OC4_SetConfig+0xdc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d109      	bne.n	8003308 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800
 8003344:	40015000 	.word	0x40015000

08003348 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800338c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	041b      	lsls	r3, r3, #16
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a19      	ldr	r2, [pc, #100]	; (8003404 <TIM_OC5_SetConfig+0xbc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <TIM_OC5_SetConfig+0x82>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a18      	ldr	r2, [pc, #96]	; (8003408 <TIM_OC5_SetConfig+0xc0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00f      	beq.n	80033ca <TIM_OC5_SetConfig+0x82>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a17      	ldr	r2, [pc, #92]	; (800340c <TIM_OC5_SetConfig+0xc4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00b      	beq.n	80033ca <TIM_OC5_SetConfig+0x82>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a16      	ldr	r2, [pc, #88]	; (8003410 <TIM_OC5_SetConfig+0xc8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <TIM_OC5_SetConfig+0x82>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a15      	ldr	r2, [pc, #84]	; (8003414 <TIM_OC5_SetConfig+0xcc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d003      	beq.n	80033ca <TIM_OC5_SetConfig+0x82>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a14      	ldr	r2, [pc, #80]	; (8003418 <TIM_OC5_SetConfig+0xd0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d109      	bne.n	80033de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	621a      	str	r2, [r3, #32]
}
 80033f8:	bf00      	nop
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40013400 	.word	0x40013400
 800340c:	40014000 	.word	0x40014000
 8003410:	40014400 	.word	0x40014400
 8003414:	40014800 	.word	0x40014800
 8003418:	40015000 	.word	0x40015000

0800341c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	051b      	lsls	r3, r3, #20
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a1a      	ldr	r2, [pc, #104]	; (80034dc <TIM_OC6_SetConfig+0xc0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d013      	beq.n	80034a0 <TIM_OC6_SetConfig+0x84>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <TIM_OC6_SetConfig+0xc4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00f      	beq.n	80034a0 <TIM_OC6_SetConfig+0x84>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <TIM_OC6_SetConfig+0xc8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00b      	beq.n	80034a0 <TIM_OC6_SetConfig+0x84>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <TIM_OC6_SetConfig+0xcc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <TIM_OC6_SetConfig+0x84>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a16      	ldr	r2, [pc, #88]	; (80034ec <TIM_OC6_SetConfig+0xd0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_OC6_SetConfig+0x84>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <TIM_OC6_SetConfig+0xd4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d109      	bne.n	80034b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	029b      	lsls	r3, r3, #10
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	621a      	str	r2, [r3, #32]
}
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40013400 	.word	0x40013400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800
 80034f0:	40015000 	.word	0x40015000

080034f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2201      	movs	r2, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1a      	ldr	r2, [r3, #32]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1a      	ldr	r2, [r3, #32]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	431a      	orrs	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003554:	2302      	movs	r3, #2
 8003556:	e06d      	b.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a30      	ldr	r2, [pc, #192]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a2d      	ldr	r2, [pc, #180]	; (8003648 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800359c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d01d      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d018      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1c      	ldr	r2, [pc, #112]	; (800364c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d013      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1a      	ldr	r2, [pc, #104]	; (8003650 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00e      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a16      	ldr	r2, [pc, #88]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a11      	ldr	r2, [pc, #68]	; (8003648 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10c      	bne.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800360e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40013400 	.word	0x40013400
 8003648:	40015000 	.word	0x40015000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40014000 	.word	0x40014000

08003658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003670:	2302      	movs	r3, #2
 8003672:	e06a      	b.n	800374a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a16      	ldr	r2, [pc, #88]	; (8003760 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d115      	bne.n	8003738 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	051b      	lsls	r3, r3, #20
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40013400 	.word	0x40013400
 8003760:	40015000 	.word	0x40015000

08003764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e040      	b.n	80037f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd f9a0 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8c0 	bl	8003928 <UART_SetConfig>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e022      	b.n	80037f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 face 	bl	8003d5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fb55 	bl	8003ea0 <UART_CheckIdleState>
 80037f6:	4603      	mov	r3, r0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003814:	2b20      	cmp	r3, #32
 8003816:	f040 8081 	bne.w	800391c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_UART_Transmit+0x26>
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e079      	b.n	800391e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_UART_Transmit+0x38>
 8003834:	2302      	movs	r3, #2
 8003836:	e072      	b.n	800391e <HAL_UART_Transmit+0x11e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2221      	movs	r2, #33	; 0x21
 800384a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800384c:	f7fd fa04 	bl	8000c58 <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	88fa      	ldrh	r2, [r7, #6]
 8003856:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386a:	d108      	bne.n	800387e <HAL_UART_Transmit+0x7e>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	61bb      	str	r3, [r7, #24]
 800387c:	e003      	b.n	8003886 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003886:	e02d      	b.n	80038e4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2200      	movs	r2, #0
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 fb49 	bl	8003f2a <UART_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e03d      	b.n	800391e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	881a      	ldrh	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b4:	b292      	uxth	r2, r2
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	3302      	adds	r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e008      	b.n	80038d2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b292      	uxth	r2, r2
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3301      	adds	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1cb      	bne.n	8003888 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2140      	movs	r1, #64	; 0x40
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fb15 	bl	8003f2a <UART_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e009      	b.n	800391e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003930:	2300      	movs	r3, #0
 8003932:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4bac      	ldr	r3, [pc, #688]	; (8003c08 <UART_SetConfig+0x2e0>)
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	6939      	ldr	r1, [r7, #16]
 8003960:	430b      	orrs	r3, r1
 8003962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a9a      	ldr	r2, [pc, #616]	; (8003c0c <UART_SetConfig+0x2e4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d121      	bne.n	80039ec <UART_SetConfig+0xc4>
 80039a8:	4b99      	ldr	r3, [pc, #612]	; (8003c10 <UART_SetConfig+0x2e8>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d817      	bhi.n	80039e4 <UART_SetConfig+0xbc>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UART_SetConfig+0x94>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039d9 	.word	0x080039d9
 80039c4:	080039df 	.word	0x080039df
 80039c8:	080039d3 	.word	0x080039d3
 80039cc:	2301      	movs	r3, #1
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e0b2      	b.n	8003b38 <UART_SetConfig+0x210>
 80039d2:	2302      	movs	r3, #2
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e0af      	b.n	8003b38 <UART_SetConfig+0x210>
 80039d8:	2304      	movs	r3, #4
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e0ac      	b.n	8003b38 <UART_SetConfig+0x210>
 80039de:	2308      	movs	r3, #8
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e0a9      	b.n	8003b38 <UART_SetConfig+0x210>
 80039e4:	2310      	movs	r3, #16
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	bf00      	nop
 80039ea:	e0a5      	b.n	8003b38 <UART_SetConfig+0x210>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a88      	ldr	r2, [pc, #544]	; (8003c14 <UART_SetConfig+0x2ec>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d123      	bne.n	8003a3e <UART_SetConfig+0x116>
 80039f6:	4b86      	ldr	r3, [pc, #536]	; (8003c10 <UART_SetConfig+0x2e8>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a02:	d012      	beq.n	8003a2a <UART_SetConfig+0x102>
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a08:	d802      	bhi.n	8003a10 <UART_SetConfig+0xe8>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <UART_SetConfig+0xf6>
 8003a0e:	e012      	b.n	8003a36 <UART_SetConfig+0x10e>
 8003a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a14:	d00c      	beq.n	8003a30 <UART_SetConfig+0x108>
 8003a16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a1a:	d003      	beq.n	8003a24 <UART_SetConfig+0xfc>
 8003a1c:	e00b      	b.n	8003a36 <UART_SetConfig+0x10e>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e089      	b.n	8003b38 <UART_SetConfig+0x210>
 8003a24:	2302      	movs	r3, #2
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e086      	b.n	8003b38 <UART_SetConfig+0x210>
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e083      	b.n	8003b38 <UART_SetConfig+0x210>
 8003a30:	2308      	movs	r3, #8
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e080      	b.n	8003b38 <UART_SetConfig+0x210>
 8003a36:	2310      	movs	r3, #16
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	bf00      	nop
 8003a3c:	e07c      	b.n	8003b38 <UART_SetConfig+0x210>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a75      	ldr	r2, [pc, #468]	; (8003c18 <UART_SetConfig+0x2f0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d123      	bne.n	8003a90 <UART_SetConfig+0x168>
 8003a48:	4b71      	ldr	r3, [pc, #452]	; (8003c10 <UART_SetConfig+0x2e8>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003a50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a54:	d012      	beq.n	8003a7c <UART_SetConfig+0x154>
 8003a56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a5a:	d802      	bhi.n	8003a62 <UART_SetConfig+0x13a>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <UART_SetConfig+0x148>
 8003a60:	e012      	b.n	8003a88 <UART_SetConfig+0x160>
 8003a62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a66:	d00c      	beq.n	8003a82 <UART_SetConfig+0x15a>
 8003a68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a6c:	d003      	beq.n	8003a76 <UART_SetConfig+0x14e>
 8003a6e:	e00b      	b.n	8003a88 <UART_SetConfig+0x160>
 8003a70:	2300      	movs	r3, #0
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e060      	b.n	8003b38 <UART_SetConfig+0x210>
 8003a76:	2302      	movs	r3, #2
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e05d      	b.n	8003b38 <UART_SetConfig+0x210>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e05a      	b.n	8003b38 <UART_SetConfig+0x210>
 8003a82:	2308      	movs	r3, #8
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e057      	b.n	8003b38 <UART_SetConfig+0x210>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	bf00      	nop
 8003a8e:	e053      	b.n	8003b38 <UART_SetConfig+0x210>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a61      	ldr	r2, [pc, #388]	; (8003c1c <UART_SetConfig+0x2f4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d123      	bne.n	8003ae2 <UART_SetConfig+0x1ba>
 8003a9a:	4b5d      	ldr	r3, [pc, #372]	; (8003c10 <UART_SetConfig+0x2e8>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa6:	d012      	beq.n	8003ace <UART_SetConfig+0x1a6>
 8003aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aac:	d802      	bhi.n	8003ab4 <UART_SetConfig+0x18c>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <UART_SetConfig+0x19a>
 8003ab2:	e012      	b.n	8003ada <UART_SetConfig+0x1b2>
 8003ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ab8:	d00c      	beq.n	8003ad4 <UART_SetConfig+0x1ac>
 8003aba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003abe:	d003      	beq.n	8003ac8 <UART_SetConfig+0x1a0>
 8003ac0:	e00b      	b.n	8003ada <UART_SetConfig+0x1b2>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e037      	b.n	8003b38 <UART_SetConfig+0x210>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e034      	b.n	8003b38 <UART_SetConfig+0x210>
 8003ace:	2304      	movs	r3, #4
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e031      	b.n	8003b38 <UART_SetConfig+0x210>
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e02e      	b.n	8003b38 <UART_SetConfig+0x210>
 8003ada:	2310      	movs	r3, #16
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	bf00      	nop
 8003ae0:	e02a      	b.n	8003b38 <UART_SetConfig+0x210>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a4e      	ldr	r2, [pc, #312]	; (8003c20 <UART_SetConfig+0x2f8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d123      	bne.n	8003b34 <UART_SetConfig+0x20c>
 8003aec:	4b48      	ldr	r3, [pc, #288]	; (8003c10 <UART_SetConfig+0x2e8>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af8:	d012      	beq.n	8003b20 <UART_SetConfig+0x1f8>
 8003afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afe:	d802      	bhi.n	8003b06 <UART_SetConfig+0x1de>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <UART_SetConfig+0x1ec>
 8003b04:	e012      	b.n	8003b2c <UART_SetConfig+0x204>
 8003b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b0a:	d00c      	beq.n	8003b26 <UART_SetConfig+0x1fe>
 8003b0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b10:	d003      	beq.n	8003b1a <UART_SetConfig+0x1f2>
 8003b12:	e00b      	b.n	8003b2c <UART_SetConfig+0x204>
 8003b14:	2300      	movs	r3, #0
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e00e      	b.n	8003b38 <UART_SetConfig+0x210>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	e00b      	b.n	8003b38 <UART_SetConfig+0x210>
 8003b20:	2304      	movs	r3, #4
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e008      	b.n	8003b38 <UART_SetConfig+0x210>
 8003b26:	2308      	movs	r3, #8
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e005      	b.n	8003b38 <UART_SetConfig+0x210>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	bf00      	nop
 8003b32:	e001      	b.n	8003b38 <UART_SetConfig+0x210>
 8003b34:	2310      	movs	r3, #16
 8003b36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b40:	f040 8090 	bne.w	8003c64 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003b44:	7ffb      	ldrb	r3, [r7, #31]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d86c      	bhi.n	8003c24 <UART_SetConfig+0x2fc>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <UART_SetConfig+0x228>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b95 	.word	0x08003b95
 8003b58:	08003bb5 	.word	0x08003bb5
 8003b5c:	08003c25 	.word	0x08003c25
 8003b60:	08003bd1 	.word	0x08003bd1
 8003b64:	08003c25 	.word	0x08003c25
 8003b68:	08003c25 	.word	0x08003c25
 8003b6c:	08003c25 	.word	0x08003c25
 8003b70:	08003bf1 	.word	0x08003bf1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b74:	f7fe fc16 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8003b78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	005a      	lsls	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	61bb      	str	r3, [r7, #24]
        break;
 8003b92:	e04a      	b.n	8003c2a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b94:	f7fe fc28 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8003b98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	005a      	lsls	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	61bb      	str	r3, [r7, #24]
        break;
 8003bb2:	e03a      	b.n	8003c2a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003bbe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6852      	ldr	r2, [r2, #4]
 8003bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	61bb      	str	r3, [r7, #24]
        break;
 8003bce:	e02c      	b.n	8003c2a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd0:	f7fe fb72 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003bd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	005a      	lsls	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	441a      	add	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	61bb      	str	r3, [r7, #24]
        break;
 8003bee:	e01c      	b.n	8003c2a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	61bb      	str	r3, [r7, #24]
        break;
 8003c06:	e010      	b.n	8003c2a <UART_SetConfig+0x302>
 8003c08:	efff69f3 	.word	0xefff69f3
 8003c0c:	40013800 	.word	0x40013800
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40004400 	.word	0x40004400
 8003c18:	40004800 	.word	0x40004800
 8003c1c:	40004c00 	.word	0x40004c00
 8003c20:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
        break;
 8003c28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b0f      	cmp	r3, #15
 8003c2e:	d916      	bls.n	8003c5e <UART_SetConfig+0x336>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d212      	bcs.n	8003c5e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f023 030f 	bic.w	r3, r3, #15
 8003c40:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	897b      	ldrh	r3, [r7, #10]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	897a      	ldrh	r2, [r7, #10]
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	e072      	b.n	8003d44 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
 8003c62:	e06f      	b.n	8003d44 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003c64:	7ffb      	ldrb	r3, [r7, #31]
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d85b      	bhi.n	8003d22 <UART_SetConfig+0x3fa>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <UART_SetConfig+0x348>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003cb3 	.word	0x08003cb3
 8003c78:	08003cd1 	.word	0x08003cd1
 8003c7c:	08003d23 	.word	0x08003d23
 8003c80:	08003ced 	.word	0x08003ced
 8003c84:	08003d23 	.word	0x08003d23
 8003c88:	08003d23 	.word	0x08003d23
 8003c8c:	08003d23 	.word	0x08003d23
 8003c90:	08003d0b 	.word	0x08003d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c94:	f7fe fb86 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8003c98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	085a      	lsrs	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	441a      	add	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	61bb      	str	r3, [r7, #24]
        break;
 8003cb0:	e03a      	b.n	8003d28 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb2:	f7fe fb99 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8003cb6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	085a      	lsrs	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	441a      	add	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	61bb      	str	r3, [r7, #24]
        break;
 8003cce:	e02b      	b.n	8003d28 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003cda:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6852      	ldr	r2, [r2, #4]
 8003ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	61bb      	str	r3, [r7, #24]
        break;
 8003cea:	e01d      	b.n	8003d28 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cec:	f7fe fae4 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003cf0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	085a      	lsrs	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	441a      	add	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	61bb      	str	r3, [r7, #24]
        break;
 8003d08:	e00e      	b.n	8003d28 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	61bb      	str	r3, [r7, #24]
        break;
 8003d20:	e002      	b.n	8003d28 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
        break;
 8003d26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b0f      	cmp	r3, #15
 8003d2c:	d908      	bls.n	8003d40 <UART_SetConfig+0x418>
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d204      	bcs.n	8003d40 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	e001      	b.n	8003d44 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop

08003d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01a      	beq.n	8003e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5a:	d10a      	bne.n	8003e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003eae:	f7fc fed3 	bl	8000c58 <HAL_GetTick>
 8003eb2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d10e      	bne.n	8003ee0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f82a 	bl	8003f2a <UART_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e020      	b.n	8003f22 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d10e      	bne.n	8003f0c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f814 	bl	8003f2a <UART_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e00a      	b.n	8003f22 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	4613      	mov	r3, r2
 8003f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3a:	e05d      	b.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f42:	d059      	beq.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f44:	f7fc fe88 	bl	8000c58 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d302      	bcc.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d11b      	bne.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e042      	b.n	8004018 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d02b      	beq.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fae:	d123      	bne.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fc8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e00f      	b.n	8004018 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	429a      	cmp	r2, r3
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	429a      	cmp	r2, r3
 8004014:	d092      	beq.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <LL_EXTI_EnableIT_0_31+0x20>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4904      	ldr	r1, [pc, #16]	; (8004040 <LL_EXTI_EnableIT_0_31+0x20>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40010400 	.word	0x40010400

08004044 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <LL_EXTI_EnableIT_32_63+0x20>)
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	4904      	ldr	r1, [pc, #16]	; (8004064 <LL_EXTI_EnableIT_32_63+0x20>)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4313      	orrs	r3, r2
 8004056:	620b      	str	r3, [r1, #32]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40010400 	.word	0x40010400

08004068 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <LL_EXTI_DisableIT_0_31+0x24>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	43db      	mvns	r3, r3
 8004078:	4904      	ldr	r1, [pc, #16]	; (800408c <LL_EXTI_DisableIT_0_31+0x24>)
 800407a:	4013      	ands	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010400 	.word	0x40010400

08004090 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <LL_EXTI_DisableIT_32_63+0x24>)
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	43db      	mvns	r3, r3
 80040a0:	4904      	ldr	r1, [pc, #16]	; (80040b4 <LL_EXTI_DisableIT_32_63+0x24>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	620b      	str	r3, [r1, #32]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40010400 	.word	0x40010400

080040b8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	4904      	ldr	r1, [pc, #16]	; (80040d8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]

}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40010400 	.word	0x40010400

080040dc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <LL_EXTI_EnableEvent_32_63+0x20>)
 80040e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e8:	4904      	ldr	r1, [pc, #16]	; (80040fc <LL_EXTI_EnableEvent_32_63+0x20>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	624b      	str	r3, [r1, #36]	; 0x24
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	40010400 	.word	0x40010400

08004100 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <LL_EXTI_DisableEvent_0_31+0x24>)
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	43db      	mvns	r3, r3
 8004110:	4904      	ldr	r1, [pc, #16]	; (8004124 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004112:	4013      	ands	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40010400 	.word	0x40010400

08004128 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <LL_EXTI_DisableEvent_32_63+0x24>)
 8004132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	43db      	mvns	r3, r3
 8004138:	4904      	ldr	r1, [pc, #16]	; (800414c <LL_EXTI_DisableEvent_32_63+0x24>)
 800413a:	4013      	ands	r3, r2
 800413c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40010400 	.word	0x40010400

08004150 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	4904      	ldr	r1, [pc, #16]	; (8004170 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]

}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40010400 	.word	0x40010400

08004174 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800417e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004180:	4904      	ldr	r1, [pc, #16]	; (8004194 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4313      	orrs	r3, r2
 8004186:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40010400 	.word	0x40010400

08004198 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	43db      	mvns	r3, r3
 80041a8:	4904      	ldr	r1, [pc, #16]	; (80041bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]

}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010400 	.word	0x40010400

080041c0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80041ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	4904      	ldr	r1, [pc, #16]	; (80041e4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40010400 	.word	0x40010400

080041e8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4904      	ldr	r1, [pc, #16]	; (8004208 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60cb      	str	r3, [r1, #12]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40010400 	.word	0x40010400

0800420c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	4904      	ldr	r1, [pc, #16]	; (800422c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4313      	orrs	r3, r2
 800421e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40010400 	.word	0x40010400

08004230 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	43db      	mvns	r3, r3
 8004240:	4904      	ldr	r1, [pc, #16]	; (8004254 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004242:	4013      	ands	r3, r2
 8004244:	60cb      	str	r3, [r1, #12]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010400 	.word	0x40010400

08004258 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	43db      	mvns	r3, r3
 8004268:	4904      	ldr	r1, [pc, #16]	; (800427c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800426a:	4013      	ands	r3, r2
 800426c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40010400 	.word	0x40010400

08004280 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7a1b      	ldrb	r3, [r3, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80c2 	beq.w	800441a <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d05b      	beq.n	8004356 <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	7a5b      	ldrb	r3, [r3, #9]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d00e      	beq.n	80042c4 <LL_EXTI_Init+0x44>
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d017      	beq.n	80042da <LL_EXTI_Init+0x5a>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d120      	bne.n	80042f0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff ff24 	bl	8004100 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff feaf 	bl	8004020 <LL_EXTI_EnableIT_0_31>
          break;
 80042c2:	e018      	b.n	80042f6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fecd 	bl	8004068 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fef0 	bl	80040b8 <LL_EXTI_EnableEvent_0_31>
          break;
 80042d8:	e00d      	b.n	80042f6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fe9e 	bl	8004020 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fee5 	bl	80040b8 <LL_EXTI_EnableEvent_0_31>
          break;
 80042ee:	e002      	b.n	80042f6 <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
          break;
 80042f4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7a9b      	ldrb	r3, [r3, #10]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d02b      	beq.n	8004356 <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	7a9b      	ldrb	r3, [r3, #10]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d00e      	beq.n	8004324 <LL_EXTI_Init+0xa4>
 8004306:	2b03      	cmp	r3, #3
 8004308:	d017      	beq.n	800433a <LL_EXTI_Init+0xba>
 800430a:	2b01      	cmp	r3, #1
 800430c:	d120      	bne.n	8004350 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff ff8c 	bl	8004230 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff17 	bl	8004150 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004322:	e019      	b.n	8004358 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff35 	bl	8004198 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff58 	bl	80041e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004338:	e00e      	b.n	8004358 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff06 	bl	8004150 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ff4d 	bl	80041e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800434e:	e003      	b.n	8004358 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
            break;
 8004354:	e000      	b.n	8004358 <LL_EXTI_Init+0xd8>
        }
      }
 8004356:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d071      	beq.n	8004444 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	7a5b      	ldrb	r3, [r3, #9]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d00e      	beq.n	8004386 <LL_EXTI_Init+0x106>
 8004368:	2b02      	cmp	r3, #2
 800436a:	d017      	beq.n	800439c <LL_EXTI_Init+0x11c>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d120      	bne.n	80043b2 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fed7 	bl	8004128 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fe60 	bl	8004044 <LL_EXTI_EnableIT_32_63>
          break;
 8004384:	e018      	b.n	80043b8 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fe80 	bl	8004090 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fea1 	bl	80040dc <LL_EXTI_EnableEvent_32_63>
          break;
 800439a:	e00d      	b.n	80043b8 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fe4f 	bl	8004044 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fe96 	bl	80040dc <LL_EXTI_EnableEvent_32_63>
          break;
 80043b0:	e002      	b.n	80043b8 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
          break;
 80043b6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	7a9b      	ldrb	r3, [r3, #10]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d041      	beq.n	8004444 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7a9b      	ldrb	r3, [r3, #10]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d00e      	beq.n	80043e6 <LL_EXTI_Init+0x166>
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d017      	beq.n	80043fc <LL_EXTI_Init+0x17c>
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d120      	bne.n	8004412 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff ff3f 	bl	8004258 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fec8 	bl	8004174 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80043e4:	e02f      	b.n	8004446 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fee8 	bl	80041c0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff09 	bl	800420c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80043fa:	e024      	b.n	8004446 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff feb7 	bl	8004174 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fefe 	bl	800420c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004410:	e019      	b.n	8004446 <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
            break;
 8004416:	bf00      	nop
 8004418:	e015      	b.n	8004446 <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fe22 	bl	8004068 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fe69 	bl	8004100 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fe2c 	bl	8004090 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fe73 	bl	8004128 <LL_EXTI_DisableEvent_32_63>
 8004442:	e000      	b.n	8004446 <LL_EXTI_Init+0x1c6>
      }
 8004444:	bf00      	nop
#endif
  }
  return status;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <LL_GPIO_SetPinMode>:
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	; 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	613b      	str	r3, [r7, #16]
  return result;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	2103      	movs	r1, #3
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	43db      	mvns	r3, r3
 800447e:	401a      	ands	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	fa93 f3a3 	rbit	r3, r3
 800448a:	61bb      	str	r3, [r7, #24]
  return result;
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	fab3 f383 	clz	r3, r3
 8004492:	b2db      	uxtb	r3, r3
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	bf00      	nop
 80044a4:	3724      	adds	r7, #36	; 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <LL_GPIO_SetPinOutputType>:
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	401a      	ands	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	431a      	orrs	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_GPIO_SetPinSpeed>:
{
 80044de:	b480      	push	{r7}
 80044e0:	b089      	sub	sp, #36	; 0x24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	fa93 f3a3 	rbit	r3, r3
 80044f8:	613b      	str	r3, [r7, #16]
  return result;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	fab3 f383 	clz	r3, r3
 8004500:	b2db      	uxtb	r3, r3
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	2103      	movs	r1, #3
 8004506:	fa01 f303 	lsl.w	r3, r1, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	401a      	ands	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	61bb      	str	r3, [r7, #24]
  return result;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	431a      	orrs	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	609a      	str	r2, [r3, #8]
}
 8004530:	bf00      	nop
 8004532:	3724      	adds	r7, #36	; 0x24
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <LL_GPIO_SetPinPull>:
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	613b      	str	r3, [r7, #16]
  return result;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	2103      	movs	r1, #3
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	401a      	ands	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	61bb      	str	r3, [r7, #24]
  return result;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	fa01 f303 	lsl.w	r3, r1, r3
 8004588:	431a      	orrs	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	60da      	str	r2, [r3, #12]
}
 800458e:	bf00      	nop
 8004590:	3724      	adds	r7, #36	; 0x24
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <LL_GPIO_SetAFPin_0_7>:
{
 800459a:	b480      	push	{r7}
 800459c:	b089      	sub	sp, #36	; 0x24
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	613b      	str	r3, [r7, #16]
  return result;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	210f      	movs	r1, #15
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	401a      	ands	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	61bb      	str	r3, [r7, #24]
  return result;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	431a      	orrs	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]
}
 80045ec:	bf00      	nop
 80045ee:	3724      	adds	r7, #36	; 0x24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_GPIO_SetAFPin_8_15>:
{
 80045f8:	b480      	push	{r7}
 80045fa:	b089      	sub	sp, #36	; 0x24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	613b      	str	r3, [r7, #16]
  return result;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	b2db      	uxtb	r3, r3
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	210f      	movs	r1, #15
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	401a      	ands	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	61bb      	str	r3, [r7, #24]
  return result;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	fab3 f383 	clz	r3, r3
 800463e:	b2db      	uxtb	r3, r3
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	fa01 f303 	lsl.w	r3, r1, r3
 8004648:	431a      	orrs	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800464e:	bf00      	nop
 8004650:	3724      	adds	r7, #36	; 0x24
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b088      	sub	sp, #32
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	fa93 f3a3 	rbit	r3, r3
 8004670:	613b      	str	r3, [r7, #16]
  return result;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800467c:	e049      	b.n	8004712 <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	2101      	movs	r1, #1
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d03b      	beq.n	800470c <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	461a      	mov	r2, r3
 800469a:	69b9      	ldr	r1, [r7, #24]
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff fed7 	bl	8004450 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d003      	beq.n	80046b2 <LL_GPIO_Init+0x58>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d106      	bne.n	80046c0 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	461a      	mov	r2, r3
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ff0f 	bl	80044de <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	461a      	mov	r2, r3
 80046c6:	69b9      	ldr	r1, [r7, #24]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff37 	bl	800453c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d11a      	bne.n	800470c <LL_GPIO_Init+0xb2>
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	60bb      	str	r3, [r7, #8]
  return result;
 80046e2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80046e4:	fab3 f383 	clz	r3, r3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b07      	cmp	r3, #7
 80046ec:	d807      	bhi.n	80046fe <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	461a      	mov	r2, r3
 80046f4:	69b9      	ldr	r1, [r7, #24]
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff ff4f 	bl	800459a <LL_GPIO_SetAFPin_0_7>
 80046fc:	e006      	b.n	800470c <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	461a      	mov	r2, r3
 8004704:	69b9      	ldr	r1, [r7, #24]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ff76 	bl	80045f8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	3301      	adds	r3, #1
 8004710:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ae      	bne.n	800467e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d003      	beq.n	8004730 <LL_GPIO_Init+0xd6>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d107      	bne.n	8004740 <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	461a      	mov	r2, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff feb7 	bl	80044ae <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	4e0d      	ldr	r6, [pc, #52]	; (8004784 <__libc_init_array+0x38>)
 8004750:	4c0d      	ldr	r4, [pc, #52]	; (8004788 <__libc_init_array+0x3c>)
 8004752:	1ba4      	subs	r4, r4, r6
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	2500      	movs	r5, #0
 8004758:	42a5      	cmp	r5, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	4e0b      	ldr	r6, [pc, #44]	; (800478c <__libc_init_array+0x40>)
 800475e:	4c0c      	ldr	r4, [pc, #48]	; (8004790 <__libc_init_array+0x44>)
 8004760:	f000 f820 	bl	80047a4 <_init>
 8004764:	1ba4      	subs	r4, r4, r6
 8004766:	10a4      	asrs	r4, r4, #2
 8004768:	2500      	movs	r5, #0
 800476a:	42a5      	cmp	r5, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004774:	4798      	blx	r3
 8004776:	3501      	adds	r5, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800477e:	4798      	blx	r3
 8004780:	3501      	adds	r5, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	080047f4 	.word	0x080047f4
 8004788:	080047f4 	.word	0x080047f4
 800478c:	080047f4 	.word	0x080047f4
 8004790:	080047f8 	.word	0x080047f8

08004794 <memset>:
 8004794:	4402      	add	r2, r0
 8004796:	4603      	mov	r3, r0
 8004798:	4293      	cmp	r3, r2
 800479a:	d100      	bne.n	800479e <memset+0xa>
 800479c:	4770      	bx	lr
 800479e:	f803 1b01 	strb.w	r1, [r3], #1
 80047a2:	e7f9      	b.n	8004798 <memset+0x4>

080047a4 <_init>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr

080047b0 <_fini>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr
